<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于node的不同取参方式</title>
      <link href="/%E5%85%B3%E4%BA%8Enode%E7%9A%84%E4%B8%8D%E5%90%8C%E5%8F%96%E5%8F%82%E6%96%B9%E5%BC%8F/"/>
      <url>/%E5%85%B3%E4%BA%8Enode%E7%9A%84%E4%B8%8D%E5%90%8C%E5%8F%96%E5%8F%82%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>1.req.query（无需载入中间件）</p><p>通过req.query可以获取<code>GET请求</code>的参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET /search?username=tom+braint</span></span><br><span class="line">req.query.username</span><br><span class="line"><span class="comment">// =&gt; &quot;tom braint&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /shoes?username=jack&amp;info[age]=20&amp;info[hobby]=dance</span></span><br><span class="line">req.query.order</span><br><span class="line"><span class="comment">// =&gt; &quot;jack&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-req-params（无需载入中间件）"><a href="#2-req-params（无需载入中间件）" class="headerlink" title="2.req.params（无需载入中间件）"></a>2.req.params（无需载入中间件）</h3><p>通过req.param同样是获取<code>GET请求</code>参数，用于router.get(“/user/:userinfo”,….)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.get(&quot;/user/:userinfo&quot;,function(req,res,next)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(req.params.userinfo)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 那么“userinfo”属性可作为req.params.userinfo</span></span><br><span class="line"><span class="comment">// 示例：GET /user/jack</span></span><br><span class="line">req.params.userinfo</span><br><span class="line"><span class="comment">// =&gt; &quot;jack&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-req-body（中间件body-parser）"><a href="#3-req-body（中间件body-parser）" class="headerlink" title="3.req.body（中间件body-parser）"></a>3.req.body（中间件body-parser）</h3><p>通过req.body获取<code>POST请求</code>参数<br>注意：不使用body-parser，直接获取<code>req.body</code>为<code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POST /login.do  &#123;name:&quot;tom&quot;&#125;</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(express.json()) <span class="comment">// for parsing application/json</span></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;)) <span class="comment">// for parsing application/x-www-form-urlencoded</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/login.do&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;********************&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(req.body) <span class="comment">// ★  &#123;name:&#x27;tom&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    res.end();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web&amp;Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用keep-alive实现组件页面缓存</title>
      <link href="/%E4%BD%BF%E7%94%A8keep-alive%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98/"/>
      <url>/%E4%BD%BF%E7%94%A8keep-alive%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><h3 id="keep-alive-参考文档"><a href="#keep-alive-参考文档" class="headerlink" title="keep-alive  参考文档"></a>keep-alive  <a href="https://cn.vuejs.org/guide/built-ins/keep-alive.html#keepalive">参考文档</a></h3><ul><li><p><strong>Props</strong>：</p><ul><li><code>include</code> - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li><li><code>exclude</code> - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li><li><code>max</code> - 数字。最多可以缓存多少组件实例。</li></ul></li><li><p><strong>用法</strong>：</p><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p><p><code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。</p><p>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</p><blockquote><p>在 2.2.0 及其更高版本中，<code>activated</code> 和 <code>deactivated</code> 将会在 <code>&lt;keep-alive&gt;</code> 树内的所有嵌套组件中触发。</p></blockquote></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>给<code>app.vue</code>中的<router-view />添加keep-alive组件，并通过include来决定缓存哪些页面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 路由的出口 --&gt;</span><br><span class="line">    &lt;keep-alive include=&quot;LayoutIndex&quot;&gt;</span><br><span class="line">      &lt;router-view /&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>在文章列表页加载的时候监听元素滚动事件，记录当前浏览的滚动条的高度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;article-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  ...</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data () &#123;</span><br><span class="line">+ scrollTop: <span class="number">0</span> <span class="comment">// 列表滚动的高度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mounted () &#123;</span><br><span class="line">    <span class="comment">// 当页面加载的时候监听列表元素的滚动事件，把列表的滚动高度记录下来</span></span><br><span class="line">    <span class="keyword">const</span> articleList = <span class="built_in">this</span>.$refs[<span class="string">&#x27;article-list&#x27;</span>]</span><br><span class="line">    articleList.onscroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.scrollTop = articleList.scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在切换到缓存的组件时，在<code>activated</code>钩子函数中把高度设置为保存的高度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">activated () &#123;</span><br><span class="line">    <span class="comment">// activated生命周期函数 被 keep-alive 缓存的组件激活时调用。</span></span><br><span class="line">    <span class="comment">// 该钩子在服务器端渲染期间不被调用。</span></span><br><span class="line">    <span class="comment">// 把记录的到顶部的距离重新设置回去</span></span><br><span class="line">    <span class="built_in">this</span>.$refs[<span class="string">&#x27;article-list&#x27;</span>].scrollTop = <span class="built_in">this</span>.scrollTop</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>此时发现连个人中心也被缓存了，需要把个人中心排除掉，通过路由的meta属性来定义需要加keep-alive组件的路由</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 默认子路由，只能有1个</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/home&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">keepAlive</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后在app.vue根组件判断一下需要缓存的组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 路由的出口 --&gt;</span><br><span class="line">    &lt;keep-alive include=&quot;LayoutIndex&quot;&gt;</span><br><span class="line">      &lt;router-view v-if=&quot;$route.meta.keepAlive&quot; /&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>既然通过不同的路由地址来实现缓存，那么此时<code>include=&quot;LayoutIndex&quot;</code>就没有意义了，而且去掉之后像问答，视频的模块也不会被缓存了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 路由的出口 --&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">      &lt;router-view v-if=&quot;$route.meta.keepAlive&quot; /&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>继续优化，给第2步监听滚动条位置事件，增加防抖</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line">mounted () &#123;</span><br><span class="line">    <span class="comment">// 当页面加载的时候监听列表元素的滚动事件，把列表的滚动高度记录下来</span></span><br><span class="line">    <span class="keyword">const</span> articleList = <span class="built_in">this</span>.$refs[<span class="string">&#x27;article-list&#x27;</span>]</span><br><span class="line">    articleList.onscroll = debounce(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(articleList.scrollTop)</span><br><span class="line">      <span class="built_in">this</span>.scrollTop = articleList.scrollTop</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>切换用户之后发现频道数据也被缓存了，可以通过router-view 标签的key属性解决复用问题。让不同的用户使用不同的key，用用户的token作为唯一的key</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由的出口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;$store.state.user ? $store.state.user.token : null&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="最终的代码："><a href="#最终的代码：" class="headerlink" title="最终的代码："></a>最终的代码：</h3><p>   app.vue</p>   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由的出口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;$store.state.user ? $store.state.user.token : null&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   router/index.js</p>   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 默认子路由，只能有1个</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/home&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">keepAlive</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>   views/home/components/article-list.vue</p>   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">...</span><br><span class="line">      <span class="attr">scrollTop</span>: <span class="number">0</span> <span class="comment">// 记录滚动条的高度</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 当缓存组件被激活的时候触发</span></span><br><span class="line">activated () &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs[<span class="string">&#x27;article-list&#x27;</span>].scrollTop = <span class="built_in">this</span>.scrollTop</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">  mounted () &#123;</span><br><span class="line">     <span class="comment">// 获取文章列表容器的引用对象</span></span><br><span class="line">    <span class="keyword">const</span> articleList = <span class="built_in">this</span>.$refs[<span class="string">&#x27;article-list&#x27;</span>]</span><br><span class="line">    articleList.onscroll = debounce(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(articleList.scrollTop)</span></span><br><span class="line">      <span class="built_in">this</span>.scrollTop = articleList.scrollTop</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  <strong>PS:</strong><a href="https://rainux.top/"> 博主博客主页(Rainux)，精彩继续，欢迎来访！</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>其他解决方法：Forbidden(403) CSRF verification failed.Request aborted.</title>
      <link href="/%E5%85%B6%E4%BB%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%9AForbidden(403)%20CSRF%20verification%20failed.Request%20aborted./"/>
      <url>/%E5%85%B6%E4%BB%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%9AForbidden(403)%20CSRF%20verification%20failed.Request%20aborted./</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><p>今天在完成部分页面发起POST请求时，出现了如下所示的403报错情况<br><img src="https://img-blog.csdnimg.cn/f13d2a942a5540d0b083efb3c60e1889.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="问题信息"><br>度娘搜索了一下，解决方法包含了前端修改和后端修改的解决办法，前端来修改操作的90%都集中于在form标签里面添加<code>&#123;% csrf_token %&#125;</code>即可，也是最为简单的，然而，很不幸我加了之后依然报错。<br>后来发现页面登陆进来会有一个接口获取csrfToken，用来防御CSRF攻击，在接口请求时为避免安全性的问题产生漏洞，会在headers中携带此csrfToken，故在请求时加上<code>headers: &#123; &#39;X-CSRFToken&#39;: token &#125;</code>，其中token为获取得到的csrfToken，这样就能够正常调用接口，从而访问/存储信息。</p><p><strong>结尾：</strong> 发现只有POST请求接口必须要携带token，而GET请求不携带也可访问，暂时未知原因。猜测为：GET请求数据不会造成安全攻击，只是拿到数据，并不能对数据进行操作。希望有大神可以指导，共同进步！</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串、数组、对象等常用方法（留存备用）</title>
      <link href="/%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E7%AD%89%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%88%E7%95%99%E5%AD%98%E5%A4%87%E7%94%A8%EF%BC%89/"/>
      <url>/%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E7%AD%89%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%88%E7%95%99%E5%AD%98%E5%A4%87%E7%94%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p>记录一下吧，经常用到的一些字符串、数组、对象等的方法，老是会忘记使用方法和混淆！</p><h5 id="split-separator-howmany-字符串方法"><a href="#split-separator-howmany-字符串方法" class="headerlink" title="split(separator,howmany)---字符串方法"></a><code>split(separator,howmany)---字符串方法</code></h5><p><code>string.split()</code> 方法用于把一个字符串分割成字符串数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> R = <span class="string">&#x27;www.rainux.top&#x27;</span></span><br><span class="line">R.split(<span class="string">&#x27;.&#x27;</span>) <span class="comment">// [&#x27;www&#x27;,&#x27;rainux&#x27;,&#x27;top&#x27;]</span></span><br><span class="line">R.split(<span class="string">&#x27;.&#x27;</span>,<span class="number">2</span>) <span class="comment">// [&#x27;www&#x27;,&#x27;rainux&#x27;]截前两部分</span></span><br><span class="line">R.split(<span class="string">&#x27;&#x27;</span>,<span class="number">4</span>) <span class="comment">// [&quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;.&quot;]</span></span><br></pre></td></tr></table></figure><h5 id="join-separator-数组方法"><a href="#join-separator-数组方法" class="headerlink" title="join(separator)---数组方法"></a><code>join(separator)---数组方法</code></h5><p><code>Array.join()</code> 方法将数组作为字符串返回。<br>元素将由指定的分隔符分隔。默认分隔符是逗号 (,)。<code>join()</code> 方法不会改变原始数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> R = [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;.&quot;</span>]</span><br><span class="line">R.join() <span class="comment">// &quot;w,w,w,.&quot;</span></span><br><span class="line">R.join(<span class="string">&#x27;&#x27;</span>) <span class="comment">// &quot;www.&quot;</span></span><br><span class="line">R.join(<span class="string">&#x27;√&#x27;</span>) <span class="comment">// &quot;w√w√w√.&quot;</span></span><br></pre></td></tr></table></figure><h5 id="pop-shift-数组方法"><a href="#pop-shift-数组方法" class="headerlink" title="pop()/shift()---数组方法"></a><code>pop()/shift()---数组方法</code></h5><p><code>Array.pop()</code> 方法移除数组最后一个元素。<br>改变了原数组长度</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> R = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;.&quot;</span>]</span><br><span class="line">R.pop() <span class="comment">// &quot;.&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(R) <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">let</span> a =[<span class="string">&#x27;123456&#x27;</span>]</span><br><span class="line">a.pop() <span class="comment">// &quot;123456&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p><code>Array.shift()</code> 方法移除数组第一个元素。<br>改变了原数组长度</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> R = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;.&quot;</span>]</span><br><span class="line">R.shift() <span class="comment">// &quot;a&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(R) <span class="comment">// [&quot;b&quot;, &quot;c&quot;,&quot;.&quot;]</span></span><br><span class="line"><span class="keyword">let</span> a =[<span class="string">&#x27;123456&#x27;</span>]</span><br><span class="line">a.shift() <span class="comment">// &quot;123456&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// []</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>超简单使用Vue项目引入Vuex，随时更新新问题</title>
      <link href="/%E8%B6%85%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Vuex%EF%BC%8C%E9%9A%8F%E6%97%B6%E6%9B%B4%E6%96%B0%E6%96%B0%E9%97%AE%E9%A2%98/"/>
      <url>/%E8%B6%85%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Vuex%EF%BC%8C%E9%9A%8F%E6%97%B6%E6%9B%B4%E6%96%B0%E6%96%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p>如何更好地在组件外部管理状态，Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架，将会成为自然而然的选择。</p><p>今天就简单记录一下最简单的使用Vuex的方法。</p><h4 id="一、安装引入"><a href="#一、安装引入" class="headerlink" title="一、安装引入"></a>一、安装引入</h4><p>如果是Vue项目搭建的底层，推荐<code>npm/yarn</code>安装</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#npm</span></span><br><span class="line">npm install vuex -<span class="literal">-save</span></span><br><span class="line"><span class="comment">#yarn</span></span><br><span class="line">yarn add vuex</span><br></pre></td></tr></table></figure><h4 id="二、结构添加"><a href="#二、结构添加" class="headerlink" title="二、结构添加"></a>二、结构添加</h4><p>经过步骤一，成功安装了vuex，下面需要在src目录下新建<code>store/store.js</code>,当然了，需要在项目中使用，肯定是要引入到main.js中的。以下以登陆成功保存用户名和用户所在用户组为例：<br><strong>1.以下为基本的main.js设置：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">Vue.prototype.$http = axios</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">components</span>: &#123; App &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2.使用vuex保存信息的用户(Login.vue):</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;saveUsername&#x27;</span>,data.username) </span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;saveUsergroup&#x27;</span>,data.groupname)</span><br></pre></td></tr></table></figure><p><strong>3.以下为基本的store.js设置：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  在store里面的store.js文件写入</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="comment">// 保存信息的变量名</span></span><br><span class="line">        <span class="attr">userName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">userGroup</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="comment">// 保存当前用户的信息</span></span><br><span class="line">        <span class="function"><span class="title">saveUsername</span>(<span class="params">state,userName</span>)</span>&#123;</span><br><span class="line">            state.userName = userName;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 保存当前用户组的信息</span></span><br><span class="line">        <span class="function"><span class="title">saveUsergroup</span>(<span class="params">state,userGroup</span>)</span>&#123;</span><br><span class="line">            state.userGroup = userGroup;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>4.其他模块使用已存储在vuex中的数据：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p id=<span class="string">&quot;name_part&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>欢迎您, <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 这里使用用户名</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;titleusername&quot;</span> <span class="attr">v-html</span>=<span class="string">&quot;this.$store.state.userName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;other_part&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>角色：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">// 这里使用用户组</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;other_val&quot;</span> <span class="attr">v-html</span>=<span class="string">&quot;this.$store.state.userGroup&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样一个简单的vuex的使用就做好了，在登陆成功时将用户的信息存储在vuex中，在进入其他页面需要用到用户信息的时候可以直接获取。</p><p><strong><code>JavaScript代码是运行在内存当中的，代码运行时的变量，函数，也都是保存在内存中的。刷新页面后，之前申请的所有内存会被释放，重新加载JavaScript代码，变量和函数将重新赋值和初始化。因此，刷新页面保留数据就必须使用外部存储——客户端 or 服务器</code></strong></p><p>这里其实就是说存储在vuex中，当页面刷新后内存被释放，数据也会丢失，所以需要从客户端存储中获取，即Local Storage &amp; Session Storage。具体使用如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面重新加载执行</span></span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.$router.path != <span class="string">&#x27;Login&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//在页面加载时读取localStorage里的状态信息</span></span><br><span class="line"><span class="built_in">localStorage</span>.getItem(<span class="string">&quot;userThing&quot;</span>) &amp;&amp; <span class="built_in">this</span>.$store.replaceState(<span class="built_in">Object</span>.assign(<span class="built_in">this</span>.$store.state, <span class="built_in">JSON</span>.parse(</span><br><span class="line"><span class="built_in">localStorage</span>.getItem(<span class="string">&quot;userThing&quot;</span>))));</span><br><span class="line"><span class="comment">//在页面刷新时将vuex里的信息保存到localStorage里</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;beforeunload&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;userThing&quot;</span>, <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.$store.state))</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录_设置jtopo节点不可拖拽</title>
      <link href="/%E8%AE%B0%E5%BD%95_%E8%AE%BE%E7%BD%AEjtopo%E8%8A%82%E7%82%B9%E4%B8%8D%E5%8F%AF%E6%8B%96%E6%8B%BD/"/>
      <url>/%E8%AE%B0%E5%BD%95_%E8%AE%BE%E7%BD%AEjtopo%E8%8A%82%E7%82%B9%E4%B8%8D%E5%8F%AF%E6%8B%96%E6%8B%BD/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.scene.mousedrag(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>))</span>&#123;</span><br><span class="line">e.target.dragable = <span class="literal">false</span>;<span class="comment">//将拖拽设置为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>构建一个表格，能够实现一对多的数据形式（已自用于项目），形象而便于使用</title>
      <link href="/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%A0%BC%EF%BC%8C%E8%83%BD%E5%A4%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E5%A4%9A%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BD%A2%E5%BC%8F%EF%BC%88%E5%B7%B2%E8%87%AA%E7%94%A8%E4%BA%8E%E9%A1%B9%E7%9B%AE%EF%BC%89%EF%BC%8C%E5%BD%A2%E8%B1%A1%E8%80%8C%E4%BE%BF%E4%BA%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%A0%BC%EF%BC%8C%E8%83%BD%E5%A4%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E5%A4%9A%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BD%A2%E5%BC%8F%EF%BC%88%E5%B7%B2%E8%87%AA%E7%94%A8%E4%BA%8E%E9%A1%B9%E7%9B%AE%EF%BC%89%EF%BC%8C%E5%BD%A2%E8%B1%A1%E8%80%8C%E4%BE%BF%E4%BA%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p>本功能测试依托于<a href="https://cn.vuejs.org/v2/guide/">Vue</a>渐进式框架、<a href="https://iviewui.com/">Iview</a>组件库。</p><h3 id="功能实战化"><a href="#功能实战化" class="headerlink" title="功能实战化"></a>功能实战化</h3><p>博主已在工作项目中亲身使用，确保只要按照这种方法肯定能使用，项目中使用，可以和后台提前沟通好数据格式，这样确保万无一失！<br><strong>附录项目中真实数据和展现情况！</strong></p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>构建一个表格，能够实现一对多的情况，例如<a href="https://www.cnvd.org.cn/">国家信息安全漏洞共享平台</a>总结周度漏洞反馈情况，一些实力较强的公司（启安信、启明星辰等）可能贡献颇多，在以表格形式列举报表时，需要一对多的展现形式：<br><img src="https://img-blog.csdnimg.cn/69277b9696ed49f7a84151f80d0638f2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="实现结果示例"></p><h3 id="实现代码（详细）"><a href="#实现代码（详细）" class="headerlink" title="实现代码（详细）"></a>实现代码（详细）</h3><p><strong><code>模板字符串部分</code></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Table</span><br><span class="line">   height=<span class="string">&quot;318&quot;</span></span><br><span class="line">   border</span><br><span class="line">   <span class="comment">// 关键处理行、列关系</span></span><br><span class="line">   :span-method=<span class="string">&quot;handleSpan&quot;</span></span><br><span class="line">   align=<span class="string">&quot;center&quot;</span></span><br><span class="line">   <span class="comment">// 表头</span></span><br><span class="line">   :columns=<span class="string">&quot;columns1&quot;</span></span><br><span class="line">   :data=<span class="string">&quot;processList&quot;</span>&gt;</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; row, index &#125;&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;alianjie&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getcourse(row)&quot;</span>&gt;</span>&#123;&#123;row.process_name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/Table&gt;</span><br></pre></td></tr></table></figure><p><strong><code>引入lodash工具</code></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>; <span class="comment">// 包含很多方法很实用！</span></span><br></pre></td></tr></table></figure><p><strong><code>data部分</code></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">processList: [],</span><br><span class="line"><span class="comment">// 表头内容</span></span><br><span class="line"><span class="attr">columns1</span>: [</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&quot;应用名&quot;</span>, <span class="attr">key</span>: <span class="string">&quot;appname&quot;</span>, <span class="attr">align</span>: <span class="string">&quot;center&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&quot;进程名&quot;</span>, <span class="attr">slot</span>: <span class="string">&quot;view&quot;</span>, <span class="attr">align</span>: <span class="string">&quot;center&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&quot;pid&quot;</span>, <span class="attr">key</span>: <span class="string">&quot;pid&quot;</span>, <span class="attr">align</span>: <span class="string">&quot;center&quot;</span> &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><strong><code>created部分</code></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化表格</span></span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.getExProcess();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong><code>methods部分</code></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化数据并处理行列关系</span></span><br><span class="line"><span class="function"><span class="title">getExProcess</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="comment">// 一对多的在同一个数组包裹中</span></span><br><span class="line">    <span class="built_in">this</span>.processList = [</span><br><span class="line">        [&#123; <span class="attr">appname</span>: <span class="string">&quot;应用1&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程1&quot;</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;],</span><br><span class="line">        [&#123; <span class="attr">appname</span>: <span class="string">&quot;应用2&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程2&quot;</span>, <span class="attr">pid</span>: <span class="number">2</span> &#125;],</span><br><span class="line">        [</span><br><span class="line">        &#123; <span class="attr">appname</span>: <span class="string">&quot;应用3&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程3&quot;</span>, <span class="attr">pid</span>: <span class="number">3</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">appname</span>: <span class="string">&quot;应用3&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程4&quot;</span>, <span class="attr">pid</span>: <span class="number">4</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">        &#123; <span class="attr">appname</span>: <span class="string">&quot;应用4&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程5&quot;</span>, <span class="attr">pid</span>: <span class="number">5</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">appname</span>: <span class="string">&quot;应用3&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程6&quot;</span>, <span class="attr">pid</span>: <span class="number">6</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">        &#123; <span class="attr">appname</span>: <span class="string">&quot;应用5&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程7&quot;</span>, <span class="attr">pid</span>: <span class="number">7</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">appname</span>: <span class="string">&quot;应用3&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程8&quot;</span>, <span class="attr">pid</span>: <span class="number">8</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">        &#123; <span class="attr">appname</span>: <span class="string">&quot;应用6&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程9&quot;</span>, <span class="attr">pid</span>: <span class="number">9</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">appname</span>: <span class="string">&quot;应用4&quot;</span>, <span class="attr">process_name</span>: <span class="string">&quot;进程10&quot;</span>, <span class="attr">pid</span>: <span class="number">10</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">    <span class="built_in">this</span>.processList.forEach(<span class="function">(<span class="params">Item</span>) =&gt;</span> &#123;</span><br><span class="line">        Item.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.assign(item, &#123; <span class="attr">rowSpan</span>: Item.length, <span class="attr">colSpan</span>: <span class="number">1</span> &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">Object</span>.assign(item, &#123; <span class="attr">rowSpan</span>: <span class="number">0</span>, <span class="attr">colSpan</span>: <span class="number">0</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.processList = _.flattenDeep(<span class="built_in">this</span>.processList);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.processList);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 处理合并进程表格</span></span><br><span class="line"><span class="function"><span class="title">handleSpan</span>(<span class="params">&#123; row, column, rowIndex, columnIndex &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (columnIndex === <span class="number">0</span> &amp;&amp; row) &#123;</span><br><span class="line">        <span class="keyword">return</span> [row.rowSpan, row.colSpan];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">getcourse</span>(<span class="params">row</span>)</span>&#123;</span><br><span class="line"><span class="comment">//对某项进行操作，可以拿到这一行信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>目前后端只返回一个一对多数据<br><img src="https://img-blog.csdnimg.cn/05ef3e8b4610402a8c2e927a798067d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="返回数据"><br><img src="https://img-blog.csdnimg.cn/375afec68955474ba389a324c9590ce9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="系统展示"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试基本---面向过程与面向对象</title>
      <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-面向过程"><a href="#1-面向过程" class="headerlink" title="1. 面向过程"></a>1. 面向过程</h3><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li><li><strong>总结</strong>：按照步骤编程 （函数和变量）</li></ul><h3 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2. 面向对象"></a>2. 面向对象</h3><ul><li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li><li><strong>总结</strong>：将需求分析出一个一个的对象，然后在分析出对象中的属性和方法，最后按照步骤编程（方法和属性）</li></ul><h3 id="3-面向过程与面向对象对比"><a href="#3-面向过程与面向对象对比" class="headerlink" title="3. 面向过程与面向对象对比"></a>3. 面向过程与面向对象对比</h3><table><thead><tr><th></th><th>面向过程</th><th>面向对象</th></tr></thead><tbody><tr><td>优点</td><td>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</td><td>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</td></tr><tr><td>缺点</td><td>不易维护、不易复用、不易扩展</td><td>性能比面向过程低</td></tr></tbody></table><h3 id="4-应用场景"><a href="#4-应用场景" class="headerlink" title="4. 应用场景"></a>4. 应用场景</h3><ul><li>比较简单的逻辑，使用面向过程，前端更偏向使用面向过程。</li><li>比较复杂的逻辑，使用面向对象，后端更偏向使用面向对象。</li></ul><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git：放弃本地(或Linux下)修改内容，全部拉取远端git仓库代码</title>
      <link href="/Git%EF%BC%9A%E6%94%BE%E5%BC%83%E6%9C%AC%E5%9C%B0(%E6%88%96Linux%E4%B8%8B)%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%8C%E5%85%A8%E9%83%A8%E6%8B%89%E5%8F%96%E8%BF%9C%E7%AB%AFgit%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81/"/>
      <url>/Git%EF%BC%9A%E6%94%BE%E5%BC%83%E6%9C%AC%E5%9C%B0(%E6%88%96Linux%E4%B8%8B)%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%8C%E5%85%A8%E9%83%A8%E6%8B%89%E5%8F%96%E8%BF%9C%E7%AB%AFgit%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die</strong></p><p>本地(或者服务器)修改了部分内容，想要放弃本地的更改，拉取使用远程git仓库所有内容，可以进行下面操作：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一、拉取所有更新，不同步</span></span><br><span class="line">git fetch --all</span><br><span class="line"><span class="comment">// 二、指向master最新版本，覆盖本地内容（包含本地修改）</span></span><br><span class="line"><span class="comment">//    拿到所有远程master内容</span></span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单条执行命令--覆盖本地内容（效果同上一&amp;二）</span></span><br><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组、对象遍历收藏版</title>
      <link href="/%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E9%81%8D%E5%8E%86%E6%94%B6%E8%97%8F%E7%89%88/"/>
      <url>/%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E9%81%8D%E5%8E%86%E6%94%B6%E8%97%8F%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><p>留存方便自己使用，方便大家使用</p><h3 id="遍历对象："><a href="#遍历对象：" class="headerlink" title="遍历对象："></a>遍历对象：</h3><p><strong>1.Object.keys()</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">console</span>.log(key,obj[key]);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/df909c11ea5f4be7a1b01e428742ca86.png" alt="在这里插入图片描述"><br><strong>2.for…in…</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">console</span>.log(i,<span class="string">&quot;:&quot;</span>,obj[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7ecaa4f535804518bddd6e563b4aa7cb.png" alt="在这里插入图片描述"><br><strong>3.Object.getOwnPropertyNames(obj)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(key,obj[key]);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fd10b45db03d4a969ce70cac734d22c0.png" alt="在这里插入图片描述"><br><strong>4.Reflect.ownKeys(obj)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(key,obj[key]);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f76aaae0380946518958dcb192e05dea.png" alt="在这里插入图片描述"></p><h3 id="遍历数组："><a href="#遍历数组：" class="headerlink" title="遍历数组："></a>遍历数组：</h3><p><strong>1.forEach</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, index</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val, index);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f3fc2b20d595480aa1e19f17f1414b80.png" alt="在这里插入图片描述"><br><strong>2.for…in…</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i,<span class="string">&quot;:&quot;</span>,arr[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/002d0fc3b20c454fb1c5a11618eadeaf.png" alt="在这里插入图片描述"><br><strong>3.for…of….</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3ed90b36329c4279ad86ae96f6d9458c.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS比较两个数组是否完全相同(超简单)</title>
      <link href="/JS%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C(%E8%B6%85%E7%AE%80%E5%8D%95)/"/>
      <url>/JS%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C(%E8%B6%85%E7%AE%80%E5%8D%95)/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设两个数组arr1、arr2</span></span><br><span class="line"><span class="keyword">var</span> arr1=[<span class="string">&quot;11&quot;</span>,<span class="string">&quot;22&quot;</span>,<span class="string">&quot;33&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=[<span class="string">&quot;11&quot;</span>,<span class="string">&quot;33&quot;</span>,<span class="string">&quot;44&quot;</span>];</span><br><span class="line"><span class="comment">// 定义变量用于标志</span></span><br><span class="line"><span class="keyword">var</span> arr_status;</span><br><span class="line"><span class="comment">// 判断两个数组长度是否相同</span></span><br><span class="line"><span class="keyword">if</span>(arr1.length == arr2.length)&#123;</span><br><span class="line"><span class="comment">// 循环arr1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; arr1.length; x++) &#123;</span><br><span class="line"><span class="comment">// 默认arr_status 为1</span></span><br><span class="line">        arr_status = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// if (arry2.indexOf(arr1[x]) == -1) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (arr2[x] != arr1[x]) &#123;</span><br><span class="line">        <span class="comment">// 只要有arr2中查不到arr1的元素，代表不相等</span></span><br><span class="line">            arr_status = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 两个数组长度不同不可能相等</span></span><br><span class="line">arr_status = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// arr_status == 1 代表两个数组相等</span></span><br><span class="line"><span class="keyword">if</span> (arr_status == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;不相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>PS:</strong><a href="https://rainux.top/"> 博主博客主页(Rainux)，精彩继续，欢迎来访！</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试基本---forEach、filter、some大合集</title>
      <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---forEach%E3%80%81filter%E3%80%81some%E5%A4%A7%E5%90%88%E9%9B%86/"/>
      <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---forEach%E3%80%81filter%E3%80%81some%E5%A4%A7%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-0-数组方法-forEach-遍历数组"><a href="#1-0-数组方法-forEach-遍历数组" class="headerlink" title="1.0 数组方法 forEach 遍历数组 ***"></a>1.0 数组方法 forEach 遍历数组 ***</h3><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value， index， array</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//参数一是:数组元素</span></span><br><span class="line">       <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">       <span class="comment">//参数三是:当前的数组</span></span><br><span class="line"> &#125;)</span><br><span class="line">  <span class="comment">//相当于数组遍历的 for循环 没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>（<span class="title">fn</span>）</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.length;i++)&#123;</span><br><span class="line">        fn(<span class="built_in">this</span>[i],i,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// forEach 迭代(遍历) 数组</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;每个数组元素&#x27;</span> + value);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;每个数组元素的索引号&#x27;</span> + index);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数组本身&#x27;</span> + array);</span><br><span class="line">        sum += value;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(sum);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-0-数组方法-filter-过滤数组"><a href="#2-0-数组方法-filter-过滤数组" class="headerlink" title="2.0 数组方法 filter 过滤数组 ***"></a>2.0 数组方法 filter 过滤数组 ***</h3><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> arr = [<span class="number">12</span>， <span class="number">66</span>， <span class="number">4</span>， <span class="number">88</span>， <span class="number">3</span>， <span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value， index，array</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//参数一是:数组元素</span></span><br><span class="line">     <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">     <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">     <span class="keyword">return</span> value &gt;= <span class="number">20</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(newArr);<span class="comment">//[66，88] //返回值是一个新数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFilter</span>(<span class="params">fnCallback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 根据fnCallback的返回值来进行过滤</span></span><br><span class="line">    <span class="comment">// 返回值就是过滤条件</span></span><br><span class="line">    <span class="keyword">var</span> tj = fnCallback(<span class="number">12</span>,<span class="number">0</span>,arr);</span><br><span class="line">    <span class="keyword">if</span>(tj)&#123;</span><br><span class="line">        newArr.push(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// filter 筛选数组</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">88</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line">    <span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// return value &gt;= 20;</span></span><br><span class="line">        <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-0-数组方法-some"><a href="#3-0-数组方法-some" class="headerlink" title="3.0 数组方法 some ***"></a>3.0 数组方法 some ***</h3><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">some 查找数组中是否有满足条件的元素</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">10</span>， <span class="number">30</span>， <span class="number">4</span>];</span><br><span class="line"> <span class="keyword">var</span> flag = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value，index，array</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//参数一是:数组元素</span></span><br><span class="line">     <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">     <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">     <span class="keyword">return</span> value &lt; <span class="number">15</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flag);<span class="comment">//返回值是布尔值，只要查找到满足条件的一个元素就立马终止循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// some的源码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">some</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = fn(<span class="built_in">this</span>[i], i, <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span>(result == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// some 查找数组中是否有满足条件的元素</span></span><br><span class="line">    <span class="comment">// var arr = [10, 30, 4];</span></span><br><span class="line">    <span class="comment">// var flag = arr.some(function(value) &#123;</span></span><br><span class="line">    <span class="comment">//     // return value &gt;= 20;</span></span><br><span class="line">    <span class="comment">//     return value &lt; 3;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">// console.log(flag);</span></span><br><span class="line">    <span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> flag1 = arr1.some(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value == <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(flag1);</span><br><span class="line">    <span class="comment">// 1. filter 也是查找满足条件的元素 返回的是一个数组 而且是把所有满足条件的元素返回回来</span></span><br><span class="line">    <span class="comment">// 2. some 也是查找满足条件的元素是否存在  返回的是一个布尔值 如果查找到第一个满足条件的元素就终止循环</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结</strong><br>| 名称 | 作用 |参数 | 返回值| 备注|<br>|–|–|–|–|–|<br>| forEach| 遍历数组,取出数组中的每一项| function(value,index,array){}|没有返回值|不会使用回调函数的返回值|<br>| filter| 遍历数组,筛选出满足条件的项,将满足条件的项放到新数组中,并且返回| function(value,index,array){}|返回存放了满足条件的项的新数组|如果发现回调函数,返回了 true,就会将当前的 value,放到新数组中|<br>| some| 遍历数组,判断是否有满足条件的元素,如果有返回 true,如果没有返回 false| function(value,index,array){}|返回 true/false|如果发现回调函数,返回了 true,就会停止遍历|</p><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Echarts出现的一些问题......</title>
      <link href="/%E4%BD%BF%E7%94%A8Echarts%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98....../"/>
      <url>/%E4%BD%BF%E7%94%A8Echarts%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98....../</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><h4 id="一、Echarts图表显示大小与屏幕之间的问题"><a href="#一、Echarts图表显示大小与屏幕之间的问题" class="headerlink" title="一、Echarts图表显示大小与屏幕之间的问题"></a>一、Echarts图表显示大小与屏幕之间的问题</h4><p>终极解决方案： <strong><code>window.onresize = myChart.resize</code></strong></p><p><strong>P1.页面中只有一个Echarts图</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;echartFirst&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;echartFirst&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> options = &#123;<span class="comment">//图表配置项....&#125;</span></span><br><span class="line">myChart.setOption(options)</span><br><span class="line"><span class="built_in">window</span>.onresize = myChart.resize</span><br></pre></td></tr></table></figure><p><strong>P2.页面中存在多个Echarts图</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;echartFirst&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;echartSecond&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;echartThird&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">var</span> myChartFir = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;echartFirst&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> myChartSec = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;echartSecond&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> myChartThi = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;echartThird&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> optionsF = &#123;<span class="comment">//图表配置项....&#125;</span></span><br><span class="line"><span class="keyword">var</span> optionsS = &#123;<span class="comment">//图表配置项....&#125;</span></span><br><span class="line"><span class="keyword">var</span> optionsT = &#123;<span class="comment">//图表配置项....&#125;</span></span><br><span class="line">myChartFir.setOption(optionsF)</span><br><span class="line">myChartSec.setOption(optionsS)</span><br><span class="line">myChartThi.setOption(optionsT)</span><br><span class="line"><span class="comment">// ★★★ 需用到 addEventListener</span></span><br><span class="line"><span class="comment">// ☆☆☆ 否则页面上只有一个图表会根据浏览器的变化而自适应</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    myChartFir.resize();</span><br><span class="line">    myChartSec.resize();</span><br><span class="line">    myChartThi.resize();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ★★★ 或者可以另一种写法</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    myChartFir.resize();</span><br><span class="line">    myChartSec.resize();</span><br><span class="line">    myChartThi.resize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试基本---函数的定义和调用</title>
      <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8/"/>
      <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-0-函数的定义方式"><a href="#1-0-函数的定义方式" class="headerlink" title="1.0 函数的定义方式"></a>1.0 函数的定义方式</h3><ul><li><p>方式 1： 函数声明方式 function 关键字 (命名函数)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式 2： 函数表达式(匿名函数)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方式 3： new Function() （函数也是对象，所以可以 new）（了解）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;console.log(a + b)&#x27;</span>);</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>..., <span class="string">&#x27;函数体&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>Function 里面参数都必须是字符串格式</li><li>第三种方式执行效率低，也不方便书写，因此较少使用</li><li>所有函数都是 Function 的实例(对象)</li><li>函数也属于对象</li></ul></li></ul><h3 id="2-0-函数的调用"><a href="#2-0-函数的调用" class="headerlink" title="2.0 函数的调用"></a>2.0 函数的调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. 普通函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">/* 2. 对象的方法 */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line"><span class="attr">sayHi</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">o.sayHi();</span><br><span class="line"><span class="comment">/* 3. 构造函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Star();</span><br><span class="line"><span class="comment">/* 4. 绑定事件函数*/</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 点击了按钮就可以调用这个函数</span></span><br><span class="line"><span class="comment">/* 5. 定时器函数*/</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="number">1000</span>);</span><br><span class="line">这个函数是定时器自动<span class="number">1</span>秒钟调用一次(</span><br><span class="line"><span class="comment">/* 6. 立即执行函数(自调用函数)*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron“安装已中止，安装程序未成功地运行完成”</title>
      <link href="/Electron%E2%80%9C%E5%AE%89%E8%A3%85%E5%B7%B2%E4%B8%AD%E6%AD%A2%EF%BC%8C%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E6%9C%AA%E6%88%90%E5%8A%9F%E5%9C%B0%E8%BF%90%E8%A1%8C%E5%AE%8C%E6%88%90%E2%80%9D/"/>
      <url>/Electron%E2%80%9C%E5%AE%89%E8%A3%85%E5%B7%B2%E4%B8%AD%E6%AD%A2%EF%BC%8C%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E6%9C%AA%E6%88%90%E5%8A%9F%E5%9C%B0%E8%BF%90%E8%A1%8C%E5%AE%8C%E6%88%90%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p>最近在使用Electron桌面化程序时（官方定义：<a href="http://www.electronjs.org/">使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</a>），打包成exe文件时出了点问题，特此记录一下，同时分享给大家。</p><p>本人打包安装的是使用比较多的<code>electron-builder</code>进行项目的打包，<code>yarn build</code>后会在build文件夹下生成 <strong><code>.exe</code></strong> 程序安装包，点击安装时出现了如图问题：<br><img src="https://img-blog.csdnimg.cn/c809a2024c284ba4b6e7fa26b38dc6f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="安装已中止"><br>检查了一下<code>package.json</code>的配置情况，发现一切配置也都正常，并未发现错误，安装路径也没错误。</p><p>PS：这里补充一下<code>electron</code>安装时的两种情况：<br>（1）点击直接安装，无需选择路径，默认放到C盘默认目录下<br><img src="https://img-blog.csdnimg.cn/cf5697c06f434b3bbec860d86726f1f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d2a823f7935242019d3f32494428adff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>（2）自定义安装路径，如下所示<br><img src="https://img-blog.csdnimg.cn/d6c7d8d397614436b89c900852b76aa4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="自定义路径"><br><img src="https://img-blog.csdnimg.cn/a59f2bb8091d449db0b887be74c42ec5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="自定义"><br>好的，回到整体上，检查完之后，发现并没有配置方面的问题，在中止页面看起来好像是能正常安装，好像是和哪产生冲突了，因为提示的是<strong>中止</strong>而不是<strong>出错/失败</strong>。<br>考虑是不是自己电脑前面已安装过此程序，未删除干净造成的，所以一方面在其他电脑测试了，另一方面找到自己电脑程序与功能面板，查看是否有残余。<br>综上发现：<br>（1）在另台电脑上可以正常安装；<br>（2）在原电脑上找到了未卸载彻底的程序，卸载了，然后就能正常安装<br><img src="https://img-blog.csdnimg.cn/3b68e10011d649818048e2288c73b33f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="程序与功能"><br><img src="https://img-blog.csdnimg.cn/95f611329a17473daf613fa0b1d5fdb9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="正常安装"><br>最终得知原因：<strong>因为在上一次安装了此程序后，测试完成就删除了，直接删除了如图所示的文件，并未正常进行程序卸载操作，导致再次安装时在程序中找到了相同的<code>appid</code>，所以会提示安装被中止问题</strong><br><img src="https://img-blog.csdnimg.cn/c7af3999c2394e0f998e287957e071d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_11,color_FFFFFF,t_70,g_se,x_16" alt="删除内容"></p><p><strong>Code Is Never Die ！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器开发的网站http登录失败，必须https登录</title>
      <link href="/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%E7%9A%84%E7%BD%91%E7%AB%99http%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%BF%85%E9%A1%BBhttps%E7%99%BB%E5%BD%95/"/>
      <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%E7%9A%84%E7%BD%91%E7%AB%99http%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%BF%85%E9%A1%BBhttps%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><p>公司系统使用默认（也就是http方式登录）都会出现问题<br><img src="https://img-blog.csdnimg.cn/12cefc7e7ffe4c7e8e18227110c88685.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>应该是之前做了https的安全验证，但是有的时候默认输入地址是http的，所以往往会造成一定的不方便。<br>考虑最简单的就是让系统自动使用https下访问<br>在头部增加如下一行代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;upgrade-insecure-requests&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样访问不管是<code>http/https</code>都会自动跳到<code>https</code>下，可以避免登录迷之操作发生</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>离开页面提示beforeunload和unload的事件应用</title>
      <link href="/%E7%A6%BB%E5%BC%80%E9%A1%B5%E9%9D%A2%E6%8F%90%E7%A4%BAbeforeunload%E5%92%8Cunload%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BA%94%E7%94%A8/"/>
      <url>/%E7%A6%BB%E5%BC%80%E9%A1%B5%E9%9D%A2%E6%8F%90%E7%A4%BAbeforeunload%E5%92%8Cunload%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><p><strong>需求：</strong> 在用户离开页面之前给一个提示，选择是否确认离开，并且用户确认离开的话，需要发出一个请求。</p><p><img src="https://img-blog.csdnimg.cn/054c2a22fdb642048385898c226d727f.png#pic_center" alt="示意图"><br><strong>代码：</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 只有屏幕和用户互动过后，用户离开页面（关闭、刷新、跳转其他页面）才会触发</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;onbeforeload！！！！！&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (event) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                event.returnValue = <span class="string">&#x27;关闭提示&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 不管有没有和用户互动过，只要用户离开页面（关闭、刷新、跳转其他页面）就会触发</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">window</span>.onunload = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;onunload！！！！！&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/test&#x27;</span>, <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 加一段同步代码阻塞一下，不然刷新会发不出去异步请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() - now &lt; <span class="number">100</span>) &#123; &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong><br>1.离开之前的提示无法自定义，只能是浏览器提供的文案（如上图）；<br>2.unload事件如果要发异步请求的话，需要后面给补一段同步代码阻塞一下，否则请求会发不出去的。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你需要知道的 15 个很棒的 CSS 动画库</title>
      <link href="/%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%2015%20%E4%B8%AA%E5%BE%88%E6%A3%92%E7%9A%84%20CSS%20%E5%8A%A8%E7%94%BB%E5%BA%93/"/>
      <url>/%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%2015%20%E4%B8%AA%E5%BE%88%E6%A3%92%E7%9A%84%20CSS%20%E5%8A%A8%E7%94%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>从一种 CSS 样式配置到另一种的过渡可以使用 CSS 动画进行动画处理。描述 CSS 动画的样式和指示动画样式的开始和结束状态的一组关键帧，以及可能的中间路点，构成了动画。</p><p>与传统的脚本驱动动画技术相比，CSS 动画提供了三大优势：</p><p>它们很容易用于简单的动画；你甚至不需要知道 JavaScript 来制作它们。</p><p>即使系统负载适中，动画也能正常工作。在 JavaScript 中，简单的动画通常运行不佳。为了使性能尽可能流畅，渲染引擎可以使用跳帧和其他方法。</p><p>例如，允许浏览器调节动画序列允许浏览器通过限制当前不可见的选项卡中动画的更新频率来提高性能和效率。</p><p>虽然大多数动画都可以使用纯 CSS 完成，但你可以使用动画库和框架在更短的时间内创建更好的动画。</p><p><strong>Animate.css<br>官网地址；<a href="https://animate.style/">https://animate.style/</a></strong></p><p><strong>Anime.js<br>官网地址：<a href="https://animejs.com/">https://animejs.com/</a></strong></p><p>Anime.js (/ˈæn.ə.meɪ/) 是一个轻量级的 JavaScript 动画库，具有简单但功能强大的 API。它适用于 CSS 属性、SVG、DOM 属性和 JavaScript 对象</p><p><strong>CSShake<br>官网地址：<a href="http://elrumordelaluz.github.io/csshake/">http://elrumordelaluz.github.io/csshake/</a></strong></p><p>CSShake ——一个专门为在你的网页中摇动元素而设计的 CSS 库</p><p><strong>Hover.css<br>官网地址：<a href="http://ianlunn.github.io/Hover/">http://ianlunn.github.io/Hover/</a></strong></p><p>Hover.css 是一个 CSS 动画库，旨在与你的网站中的按钮和其他 UI 元素一起使用</p><p><strong>AniJS<br>官网地址：<a href="http://anijs.github.io/">http://anijs.github.io/</a></strong></p><p>AniJS 是一个动画库，允许您以简单的“类似句子”的结构向元素添加动画</p><p><strong>Animista<br>官方地址：<a href="https://animista.net/">https://animista.net/</a></strong></p><p>按需 CSS 动画</p><p><strong>Tachyons-animate<br>官方地址: <a href="https://github.com/anater/tachyons-animate">https://github.com/anater/tachyons-animate</a></strong></p><p>Tachyons 本身是一个具有大量实用程序类的原子 CSS 库，用于通过向你需要的内容添加类来设计任何东西</p><p><strong>Sequence.js<br>官方地址：<a href="https://www.sequencejs.com/">https://www.sequencejs.com/</a></strong></p><p>Sequence.js 是一个 JavaScript 库，它提供了一个响应式 CSS 框架，用于创建独特的滑块、演示文稿、横幅和其他基于步骤的应用程序</p><p><strong>Infinite<br>官方地址：<a href="https://tilomitra.github.io/infinite/">https://tilomitra.github.io/infinite/</a></strong></p><p>这些动画，如旋转和脉冲，专门设计用于永远运行和重复</p><p><strong>OBNOXIOUS.CSS<br>官方地址：<a href="https://tholman.com/obnoxious/">https://tholman.com/obnoxious/</a></strong></p><p><strong>MOTION UI<br>官方地址：<a href="https://zurb.com/playground/motion-ui">https://zurb.com/playground/motion-ui</a></strong></p><p>用于创建灵活的 CSS 过渡和动画的 Sass 库</p><p><strong>Keyframes.app<br>官方地址：<a href="https://keyframes.app/">https://keyframes.app/</a></strong></p><p>用于生成自定义 CSS 关键帧动画的图形用户界面</p><p><strong>AnimXYZ<br>官方地址：<a href="https://animxyz.com/">https://animxyz.com/</a></strong></p><p>AnimXYZ 可帮助你为你的网站创建、自定义和组合动画。专为 Vue、React、SCSS 和 CSS 构建</p><p><strong>Whirl<br>官方地址：<a href="https://github.com/jh3y/whirl">https://github.com/jh3y/whirl</a></strong></p><p>轻松加载 CSS 动画！</p><p><strong>Hamburgers<br>官方地址：<a href="https://jonsuh.com/hamburgers/">https://jonsuh.com/hamburgers/</a></strong></p><p>Hamburgers 是一组CSS 动画汉堡包图标。还包括作为 Sass 库的源。它是模块化和可定制的，所以你可以自己做汉堡包。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端mockjs虚拟数据__留备使用</title>
      <link href="/%E5%89%8D%E7%AB%AFmockjs%E8%99%9A%E6%8B%9F%E6%95%B0%E6%8D%AE__%E7%95%99%E5%A4%87%E4%BD%BF%E7%94%A8/"/>
      <url>/%E5%89%8D%E7%AB%AFmockjs%E8%99%9A%E6%8B%9F%E6%95%B0%E6%8D%AE__%E7%95%99%E5%A4%87%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><h4 id="1-0-Vue环境下"><a href="#1-0-Vue环境下" class="headerlink" title="1.0 Vue环境下"></a>1.0 Vue环境下</h4><h4 id="2-0-引入mock-js文件"><a href="#2-0-引入mock-js文件" class="headerlink" title="2.0 引入mock.js文件"></a>2.0 引入mock.js文件</h4><p>在<code>main.js</code>中引入<code>mock.js</code></p><h4 id="3-0-mock-js文件拦截ajax请求，返回mock数据"><a href="#3-0-mock-js文件拦截ajax请求，返回mock数据" class="headerlink" title="3.0 mock.js文件拦截ajax请求，返回mock数据"></a>3.0 mock.js文件拦截ajax请求，返回mock数据</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回字符串</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">&#x27;string|3&#x27;</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定范围的整数</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/getInteger&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">&#x27;a|1-100&#x27;</span>: <span class="number">100</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机个数的对象</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/getObject&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">&#x27;brand|1-3&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">a</span>: <span class="string">&#x27;京东&#x27;</span>,</span><br><span class="line">            <span class="attr">b</span>: <span class="string">&#x27;国美&#x27;</span>,</span><br><span class="line">            <span class="attr">c</span>: <span class="string">&#x27;苏宁&#x27;</span>,</span><br><span class="line">            <span class="attr">d</span>: <span class="string">&#x27;当当&#x27;</span>,</span><br><span class="line">            <span class="attr">e</span>: <span class="string">&#x27;天猫&#x27;</span>,</span><br><span class="line">            <span class="attr">f</span>: <span class="string">&#x27;淘宝&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机数组</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/getArr&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">&#x27;data|1-10&#x27;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机字符</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/getRandom1&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">&#x27;random1&#x27;</span>: <span class="regexp">/[a-z]&#123;2&#125;[A-Z]&#123;2&#125;[0-9]/</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机字符</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/getRandom2&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;<span class="attr">random2</span>: <span class="string">&#x27;@string(&quot;lower&quot;, 5)&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回UUID</span></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api/getUUID&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;uuid&#x27;</span>: Mock.Random.id()&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-0-单组件中使用axios发起请求"><a href="#4-0-单组件中使用axios发起请求" class="headerlink" title="4.0 单组件中使用axios发起请求"></a>4.0 单组件中使用axios发起请求</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        <span class="built_in">this</span>.init()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        init () &#123;</span><br><span class="line">            axios.get(<span class="string">&#x27;/api/data&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.data,<span class="string">&#x27;字符串&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            axios.get(<span class="string">&#x27;/api/getInteger&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.data, <span class="string">&#x27;数字&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            axios.get(<span class="string">&#x27;/api/getObject&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.data, <span class="string">&#x27;对象&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            axios.get(<span class="string">&#x27;/api/getArr&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.data, <span class="string">&#x27;数组&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            axios.get(<span class="string">&#x27;/api/getRandom1&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.data, <span class="string">&#x27;5个随机字符-方式一&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            axios.get(<span class="string">&#x27;/api/getRandom2&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.data, <span class="string">&#x27;5个随机字符-方式二&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            axios.get(<span class="string">&#x27;/api/getUUID&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.data, <span class="string">&#x27;uuid&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试基本---JavaScript严格模式</title>
      <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---JavaScript%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---JavaScript%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-0-什么是严格模式"><a href="#1-0-什么是严格模式" class="headerlink" title="1.0 什么是严格模式"></a>1.0 什么是严格模式</h3><ul><li><p>JavaScript 除了提供正常模式外，还提供了<strong>严格模式</strong>（strict mode）。</p></li><li><p>ES5 的严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码。</p></li><li><p>严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p></li><li><p>严格模式对正常的 JavaScript 语义做了一些更改：</p><ul><li>1.消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</li><li>2.消除代码运行的一些不安全之处，保证代码运行的安全。</li><li>3.提高编译器效率，增加运行速度。</li><li>4.禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super 不能做变量名</li></ul></li></ul><h3 id="2-0-开启严格模式"><a href="#2-0-开启严格模式" class="headerlink" title="2.0 开启严格模式"></a>2.0 开启严格模式</h3><p>严格模式可以应用到整个脚本或个别函数中。</p><p>因此在使用时，我们可以将严格模式分为为<strong>脚本开启严格模式</strong>和<strong>为函数开启严格模式</strong>两种情况。</p><ul><li><p>情况一 ：为脚本开启严格模式</p><ul><li><p>有的 script 脚本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他<br>script 脚本文件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span></span><br><span class="line"><span class="meta">　　　　&quot;use strict&quot;</span>;<span class="comment">//use使用，strict严格。使用严格模式</span></span><br><span class="line">       <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span></span><br><span class="line"><span class="meta"><span class="javascript"><span class="xml">  　&quot;use strict&quot;</span>; <span class="comment">//当前script标签开启了严格模式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//当前script标签未开启严格模式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>情况二：为函数开启严格模式</p><ul><li><p>要给某个函数开启严格模式，需要把“use strict”; (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>; <span class="comment">//当前fn函数开启了严格模式</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-0-严格模式中的变化"><a href="#3-0-严格模式中的变化" class="headerlink" title="3.0 严格模式中的变化"></a>3.0 严格模式中的变化</h3><p>严格模式对 Javascript 的语法和行为，都做了一些改变。</p><ol><li><p>变量规定</p><p>① 在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，变量都必须先用</p><p>var 命令声明，然后再使用。</p><p>② 严禁删除已经声明变量。例如，delete x; 语法是错误的。</p></li><li><p>严格模式下 this 指向问题</p><p>① 以前在全局作用域函数中的 this 指向 window 对象。</p><p>② <strong>严格模式下全局作用域中函数中的 this 是 undefined。</strong></p><p>③ 以前构造函数时不加 new 也可以 调用,当普通函数，this 指向全局对象</p><p>④ 严格模式下,如果 构造函数不加 new 调用, this 指向的是 undefined 如果给他赋值则 会报错</p><p>⑤ new 实例化的构造函数指向创建的对象实例。</p><p>⑥ 定时器 this 还是指向 window 。</p><p>⑦ 事件、对象还是指向调用者。</p></li></ol><p>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="comment">// 1. 我们的变量名必须先声明再使用</span></span><br><span class="line">    <span class="comment">// num = 10;</span></span><br><span class="line">    <span class="comment">// console.log(num);</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="comment">// 2.我们不能随意删除已经声明好的变量</span></span><br><span class="line">    <span class="comment">// delete num;</span></span><br><span class="line">    <span class="comment">// 3. 严格模式下全局作用域中函数中的 this 是 undefined。</span></span><br><span class="line">    <span class="comment">// function fn() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(this); // undefined。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn();</span></span><br><span class="line">    <span class="comment">// 4. 严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span></span><br><span class="line">    <span class="comment">// function Star() &#123;</span></span><br><span class="line">    <span class="comment">//     this.sex = &#x27;男&#x27;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// // Star();</span></span><br><span class="line">    <span class="comment">// var ldh = new Star();</span></span><br><span class="line">    <span class="comment">// console.log(ldh.sex);</span></span><br><span class="line">    <span class="comment">// 5. 定时器 this 还是指向 window</span></span><br><span class="line">    <span class="comment">// setTimeout(function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(this);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;, 2000);</span></span><br><span class="line">    <span class="comment">// a = 1;</span></span><br><span class="line">    <span class="comment">// a = 2;</span></span><br><span class="line">    <span class="comment">// 6. 严格模式下函数里面的参数不允许有重名</span></span><br><span class="line">    <span class="comment">// function fn(a, a) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(a + a);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// fn(1, 2);</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">更多严格模式要求点击参考</a></p><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npm err ! Error_ connect ECONNREFUSED 127.0.0.1_8087</title>
      <link href="/npm%20err%20!%20Error_%20connect%20ECONNREFUSED%20127.0.0.1_8087/"/>
      <url>/npm%20err%20!%20Error_%20connect%20ECONNREFUSED%20127.0.0.1_8087/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die</strong></p><p>npm安装了express</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><p>然后出现了错误</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm err !  <span class="built_in">Error</span>: connect ECONNREFUSED <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8087</span></span><br></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm config set proxy <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>然后就OK啦！</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见状态码，仍需必备呢_</title>
      <link href="/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%EF%BC%8C%E4%BB%8D%E9%9C%80%E5%BF%85%E5%A4%87%E5%91%A2_/"/>
      <url>/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%EF%BC%8C%E4%BB%8D%E9%9C%80%E5%BF%85%E5%A4%87%E5%91%A2_/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><p>常见的一些状态码返回，还是要掌握滴~</p><p><strong><code>200</code></strong>   OK    请求成功。一般用于GET与POST请求；</p><p><strong><code>301</code></strong>    Moved Permanently    永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替；</p><p><strong><code>302</code></strong>    Found    临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI；</p><p><strong><code>304</code></strong>    Not Modified    未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源；</p><p><strong><code>400</code></strong>    Bad Request    客户端请求的语法错误，服务器无法理解；</p><p><strong><code>401</code></strong>    Unauthorized    请求要求用户的身份认证；</p><p><strong><code>403</code></strong>    Forbidden    服务器理解请求客户端的请求，但是拒绝执行此请求；</p><p><strong><code>404</code></strong>    Not Found    服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面；</p><p><strong><code>405</code></strong>    Method Not Allowed    客户端请求中的方法被禁止；</p><p><strong><code>410</code></strong>    Gone    客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置；</p><p><strong><code>500</code></strong>    Internal Server Error    服务器内部错误，无法完成请求；</p><p><strong><code>501</code></strong>    Not Implemented    服务器不支持请求的功能，无法完成请求；</p><p><strong><code>502</code></strong>    Bad Gateway    作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应；</p><p><strong><code>503</code></strong>    Service Unavailable    由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中；</p><p><strong><code>504</code></strong>    Gateway Time-out    充当网关或代理的服务器，未及时从远端服务器获取请求；</p><p><strong><code>505</code></strong>    HTTP Version not supported    服务器不支持请求的HTTP协议的版本，无法完成处理。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue本地项目实现其他局域网电脑在线访问</title>
      <link href="/Vue%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E5%85%B6%E4%BB%96%E5%B1%80%E5%9F%9F%E7%BD%91%E7%94%B5%E8%84%91%E5%9C%A8%E7%BA%BF%E8%AE%BF%E9%97%AE/"/>
      <url>/Vue%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E5%85%B6%E4%BB%96%E5%B1%80%E5%9F%9F%E7%BD%91%E7%94%B5%E8%84%91%E5%9C%A8%E7%BA%BF%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><p>项目在本地<code>npm run dev</code>跑起来，默认为<code>http://localhost:8080</code>在当前IP下访问没有问题，但是同一局域网下的其他同事却访问不了，显示<code>ERR_CONTENT_LENGTH_MISMATCH</code>，没有办法访问<br><img src="https://img-blog.csdnimg.cn/89fb71ab67bc48c09e28a655465b5d95.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="原本地跑项目"><br>同时直接通过同事电脑访问我的IP<code>http://192.168.1.20:8080</code>，也显示连接失败无法访问也无法访问成功。<br>看到网上的解决办法如下：<br>1.<code>package.json</code>中<code>scripts</code>的<code>dev</code>中最后加入<code>--host 0.0.0.0</code>   亲测后无效；<br>2.<code>config</code>下的<code>index.js</code>中的host属性“<code>localhost</code>”改为<code>0.0.0.0</code>  亲测后无效；<br>（备注：可能是上述方法有效，但我的项目未满足条件）<br>我解决问题的办法：<br>1.<code>package.json</code>中<code>scripts</code>的<code>dev</code>中最后加入<code>--host 本机IP</code>；<br>2.<code>config</code>下的<code>index.js</code>中的host属性“<code>localhost</code>”改为<code>本机IP</code><br>这样的话重新启动项目即可在同一局域网下的其他IP下访问本地项目。<br><img src="https://img-blog.csdnimg.cn/12e4f78b053749c9aca43fff0b2a2ce9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>PS：注意要把电脑防火墙给关了，这方面也会影响同一局域网下在线访问本机项目（仅限于工作环境局域网，不然可能会产生危险哦）。<br><img src="https://img-blog.csdnimg.cn/1fc71c9792a345918cb6a8c95ddaebcb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>点击当前元素将信息存在数组，再次点击从数组移除</title>
      <link href="/%E7%82%B9%E5%87%BB%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E5%B0%86%E4%BF%A1%E6%81%AF%E5%AD%98%E5%9C%A8%E6%95%B0%E7%BB%84%EF%BC%8C%E5%86%8D%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BB%8E%E6%95%B0%E7%BB%84%E7%A7%BB%E9%99%A4/"/>
      <url>/%E7%82%B9%E5%87%BB%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E5%B0%86%E4%BF%A1%E6%81%AF%E5%AD%98%E5%9C%A8%E6%95%B0%E7%BB%84%EF%BC%8C%E5%86%8D%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BB%8E%E6%95%B0%E7%BB%84%E7%A7%BB%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><p><strong>真实场景：</strong> 昨天在做一个选中与取消选中元素的功能，需要用到频繁<code>push(加入)</code>和<code>remove(移除)</code>元素的操作。</p><p><strong>实现思路：</strong> </p><ol><li>首先需要先判断数组中是否包含即将操作的元素；</li><li>若不存在，则将当前元素<code>push</code>至数组中；若存在则将当前所选元素在数组中找到并<code>splice</code>移除；</li></ol><p><strong>引入新方法：</strong> 根据数组元素的 “值” 来删除数组中当前 “值” 元素。<br>对数组增加内置属性方法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.contains = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> i = <span class="built_in">this</span>.length; </span><br><span class="line">  <span class="keyword">while</span> (i--) &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>[i] === obj) &#123; </span><br><span class="line">      <span class="keyword">return</span> i;  <span class="comment">// 返回的这个 i 就是元素的索引下标，</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125; <span class="comment">// 数组内置属性方法，定义之后，后面就能直接使用conains方法arr.contains(x)就能得到x在arr数组中的下标</span></span><br><span class="line"><span class="keyword">var</span> arrList = [<span class="string">&#x27;ace&#x27;</span>,<span class="string">&#x27;mvp&#x27;</span>,<span class="string">&#x27;ceo&#x27;</span>,<span class="string">&#x27;dancer&#x27;</span>]; </span><br><span class="line">arrList.splice(arrList.contains(<span class="string">&#x27;ceo&#x27;</span>),<span class="number">1</span>)  <span class="comment">//通过这样在数组中就能删除ceo这个元素</span></span><br></pre></td></tr></table></figure><p><strong>完整实现：</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组内置属性方法，以备后面使用</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.contains = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> i = <span class="built_in">this</span>.length; </span><br><span class="line">        <span class="keyword">while</span> (i--) &#123; </span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>[i] === obj) &#123; </span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">// 返回的这个 i 就是元素的索引下标，</span></span><br><span class="line">          &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">let</span> isExist = choseNodes.indexOf(e.item.model.id)<span class="comment">// 首先判断数组中是否存在当前元素，根据isExist受否为-1</span></span><br><span class="line"><span class="built_in">this</span>.flowChartData.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123; <span class="comment">// 从当前数组flowChartData中找到当前点击的元素</span></span><br><span class="line">    <span class="keyword">if</span> (e.item.model.id == i.id &amp;&amp;isExist === -<span class="number">1</span>) &#123;</span><br><span class="line">        choseNodes.push(e.item.model.id)</span><br><span class="line">        <span class="comment">// i.color = &quot;red&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.item.model.id == i.id &amp;&amp;isExist != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// i.color = &quot;#d7e8f0&quot;</span></span><br><span class="line">        choseNodes.splice(choseNodes.contains(e.item.model.id),<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>欢迎大家交流学习，感觉这样做麻烦了很多，希望大神能指导一二</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试基本---this 指向(call、apply、bind用法及区别详解)</title>
      <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---this%20%E6%8C%87%E5%90%91(call%E3%80%81apply%E3%80%81bind%E7%94%A8%E6%B3%95%E5%8F%8A%E5%8C%BA%E5%88%AB%E8%AF%A6%E8%A7%A3)/"/>
      <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---this%20%E6%8C%87%E5%90%91(call%E3%80%81apply%E3%80%81bind%E7%94%A8%E6%B3%95%E5%8F%8A%E5%8C%BA%E5%88%AB%E8%AF%A6%E8%A7%A3)/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-0-函数内部的-this-指向"><a href="#1-0-函数内部的-this-指向" class="headerlink" title="1.0 函数内部的 this 指向"></a>1.0 函数内部的 this 指向</h3><ul><li>这些 this 的指向，是当我们调用函数的时候确定的</li><li>调用方式的不同决定了 this 的指向不同</li><li>一般指向我们的调用者</li><li>总结如下：</li></ul><table><thead><tr><th>调用方式</th><th>this 指向</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td></tr><tr><td>构造函数调用</td><td>实例对象,原型对象里面的方法也指向实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td></tr><tr><td>定时器函数</td><td>window</td></tr><tr><td>立即执行函数</td><td>window</td></tr></tbody></table><p>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;/button&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 函数的不同调用方式决定了this 的指向不同</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 1. 普通函数 this 指向window</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">console</span>.log(<span class="string">&#x27;普通函数的this&#x27;</span> + <span class="built_in">this</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="built_in">window</span>.fn();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 2. 对象的方法 this指向的是对象 o</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">sayHi</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             <span class="built_in">console</span>.log(<span class="string">&#x27;对象方法的this:&#x27;</span> + <span class="built_in">this</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     o.sayHi();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 3. 构造函数 this 指向 ldh 这个实例对象 原型对象里面的this 指向的也是 ldh这个实例对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> ldh = <span class="keyword">new</span> Star();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 4. 绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">console</span>.log(<span class="string">&#x27;绑定时间函数的this:&#x27;</span> + <span class="built_in">this</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 5. 定时器函数 this 指向的也是window</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">console</span>.log(<span class="string">&#x27;定时器的this:&#x27;</span> + <span class="built_in">this</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 6. 立即执行函数 this还是指向window</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">console</span>.log(<span class="string">&#x27;立即执行函数的this&#x27;</span> + <span class="built_in">this</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;)();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="2-0-改变函数内部-this-指向"><a href="#2-0-改变函数内部-this-指向" class="headerlink" title="2.0 改变函数内部 this 指向"></a>2.0 改变函数内部 this 指向</h3><p>改变函数内 this 指向 js 提供了三种方法 call() apply() bind()</p><h4 id="2-1-call-方法"><a href="#2-1-call-方法" class="headerlink" title="2.1 call 方法"></a>2.1 call 方法</h4><ul><li>call()方法调用一个对象</li><li>简单理解为调用函数的方式，但是它可以改变函数的 this 指向</li><li>应用场景: 经常做继承</li><li>call：打电话，在程序中有调用的意思</li><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">// 此时的this指向的是window</span></span><br><span class="line">fn.call(o, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//此时的this指向的是对象o,参数使用逗号隔开</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call 第一个可以调用函数 第二个可以改变函数内的this 指向</span></span><br><span class="line"><span class="comment">// call 的主要作用可以实现继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age, sex</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.uname = uname;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age, sex</span>) </span>&#123;</span><br><span class="line">Father.call(<span class="built_in">this</span>, uname, age, sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><h4 id="2-2-apply-方法"><a href="#2-2-apply-方法" class="headerlink" title="2.2 apply 方法"></a>2.2 apply 方法</h4><ul><li>apply() 方法调用一个函数</li><li>简单理解为调用函数的方式，但是它可以改变函数的 this 指向</li><li>应用场景: 经常跟数组有关系</li><li>apply：应用，运用</li><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">// 此时的this指向的是window</span></span><br><span class="line">fn.apply(o, [<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">//此时的this指向的是对象o,参数使用数组传递</span></span><br><span class="line"><span class="comment">// 1. 也是调用函数 第二个可以改变函数内部的this指向</span></span><br><span class="line"><span class="comment">// 2. 但是他的参数必须是数组(伪数组)</span></span><br><span class="line"><span class="comment">// 3. apply 的主要应用 比如说我们可以利用 apply 借助于数学内置对象求数组最大值</span></span><br><span class="line"><span class="comment">// ***4. apply将第二个参数的数组,进行了拆包,将拆出来的每个元素,作为实参传递进去</span></span><br><span class="line"><span class="comment">// Math.max();</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="comment">// var max = Math.max.apply(null, arr);//不需要改变this指向，写null</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr); <span class="comment">//但是写null不太合适，写max的调用者Math最好</span></span><br><span class="line"><span class="comment">// 以上代码相当于:Math.max(1, 66, 3, 99, 4);</span></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, arr);</span><br><span class="line"><span class="built_in">console</span>.log(max, min);</span><br><span class="line"><span class="comment">//补充:</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// max计算一组数中的最大值</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="2-3-bind-方法"><a href="#2-3-bind-方法" class="headerlink" title="2.3 bind 方法"></a>2.3 bind 方法</h4><ul><li><p>bind() 方法不会调用函数，但是能改变函数内部 this 指向，返回的是原函数改变 this 之后产生的新函数</p></li><li><p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind</p></li><li><p>应用场景：不调用函数，但是还想改变 this 指向</p></li><li><p>bind：绑定</p></li><li><p>代码：</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//this指向的是对象o 参数使用逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> f = fn.bind(o, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//此处的f是bind返回的新函数</span></span><br><span class="line">f(); <span class="comment">//调用新函数</span></span><br><span class="line"><span class="comment">// 1. 不会调用原来的函数   可以改变原来函数内部的this 指向</span></span><br><span class="line"><span class="comment">// 2. 返回的是原函数改变this之后产生的新函数</span></span><br><span class="line"><span class="comment">// 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind</span></span><br><span class="line"><span class="comment">// 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮</span></span><br><span class="line"><span class="comment">// var btn1 = document.querySelector(&#x27;button&#x27;);</span></span><br><span class="line"><span class="comment">// btn1.onclick = function() &#123;</span></span><br><span class="line"><span class="comment">//     this.disabled = true; // 这个this 指向的是 btn 这个按钮</span></span><br><span class="line"><span class="comment">//     // var that = this;</span></span><br><span class="line"><span class="comment">//     setTimeout(function() &#123;</span></span><br><span class="line"><span class="comment">//         // that.disabled = false; // 定时器函数里面的this 指向的是window</span></span><br><span class="line"><span class="comment">//         this.disabled = false; // 此时定时器函数里面的this 指向的是btn</span></span><br><span class="line"><span class="comment">//     &#125;.bind(this), 3000); // 这个this 指向的是btn 这个对象</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">btns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;.bind(<span class="built_in">this</span>),</span><br><span class="line"><span class="number">2000</span></span><br><span class="line">);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-call、apply、bind-三者的异同"><a href="#2-4-call、apply、bind-三者的异同" class="headerlink" title="2.4 call、apply、bind 三者的异同"></a>2.4 call、apply、bind 三者的异同</h4><ul><li><p><strong>共同点:</strong> 都可以改变 this 指向</p></li><li><p><strong>不同点:</strong></p><ul><li>call 和 apply 会调用函数, 并且改变函数内部 this 指向.</li><li>call 和 apply 传递的参数不一样,call 传递参数使用逗号隔开,apply 使用数组传递</li><li>bind 不会调用函数, 可以改变函数内部 this 指向.</li></ul></li><li><p><strong>应用场景</strong></p><ol><li>call 经常做继承</li><li>apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</li><li>bind 不调用函数,但是还想改变 this 指向. 比如改变定时器内部的 this 指向</li></ol></li></ul><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用innerHTML向DOM元素中追加问题</title>
      <link href="/%E4%BD%BF%E7%94%A8innerHTML%E5%90%91DOM%E5%85%83%E7%B4%A0%E4%B8%AD%E8%BF%BD%E5%8A%A0%E9%97%AE%E9%A2%98/"/>
      <url>/%E4%BD%BF%E7%94%A8innerHTML%E5%90%91DOM%E5%85%83%E7%B4%A0%E4%B8%AD%E8%BF%BD%E5%8A%A0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>Header：</strong> 首创不易，还请大家不吝指导赐教，Code is never die！</p><p>ps:本着让更多人不止解决问题，更能够学到一点点方法的目的，内容有点赘述，还请耐心。</p><p>今天在修改项目时，偶然碰到了 innerHTML 部分知识的使用。<br><strong>直击问题：</strong><br>根据后台返回数据的个数循环动态添加 dom 元素，并且对 dom 元素进行相应的操作（例如：添加、编辑 dom 元素等）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; This.dataList.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 此处为每个div添加一个id（为简洁直接以i作为id）</span></span><br><span class="line">dom.innerHTML += <span class="string">`&lt;div id=<span class="subst">$&#123;i&#125;</span> style=&quot;width:200px;height:200px;&quot;&gt;&lt;/div&gt;`</span>;</span><br><span class="line"><span class="keyword">let</span> domItem = <span class="built_in">document</span>.getElementById(i);</span><br><span class="line"><span class="comment">// 此处以添加一个echarts图表为例；</span></span><br><span class="line">domItem.myChart = echarts.init(domItem);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题阐述：</strong><br>这是一段很常规的代码，但是当真正渲染时会发现，当有两个（及以上）的数量时，最终只会展现最后一个可视化部分，而前面的部分 dom 元素也存在，但就是无法显示出来。</p><p><strong>初步想法：</strong><br>① 一开始更多的想的是可视化的数据出现了问题，用过 echarts 的朋友都知道，数据不准确会导致这种情况。在反复各种打印控制台 log 各种数据后发现，各类数据都一一打印出来。所以，数据部分导致的设想 Pass 掉了。<br>② 考虑的是初始化 echarts 时，也就是上面代码中的<code>domItem</code>，因为每次循环使用同一个变量，后面的可能会把前面的覆盖，导致前面可视化图形展示不出来。后面通过对象赋予不同变量<code>domItem[i]</code> 然而发现，并没有什么作用，原因猜测是当前面的可视化初始化–&gt;完成，已经完成了本轮图形化的构建，当第二次循环使用的话相当于用了一个“新”的变量，所以这个不是主要原因。所以，也 Pass 掉了。</p><p><strong>最终原因：</strong><br>后面瞪着代码看，然后瞪着代码看，然后再瞪着代码看，最终跟着循环走了第一圈，发现当第一次可视化完成之后，来到第二次可视化，关键来了！<code>dom.innerHTML +=...... </code>其实也就是<code>dom.innerHTML = dom.innerHTML +......</code> 这个过程，相当于前面我第一次完成的 echarts 构建，在这里就是<code>dom.innerHTML +</code> +号前面的部分，又重新绘制了一遍，那么问题就浮出了水面，会导致已经可视化完成的第一个图表，再进行第二轮可视化时发生了 <strong>重绘</strong> 整个 dom 元素，所以前面已然完成的可视化，又将被“打回原形”，变成了一个空壳子，而第二次的可视化正常，以此类推…所以最终只会显示最后一个可视化（真实创建并渲染完成显示）</p><p><strong>解决办法：</strong><br>① 针对上述这种需要进行操作的类型，既然会发生重绘，那我何不将计就计，等你各种重绘完成之后，我再去给你每个盒子进行操作呢。这就好比于下课的时候大家都在吵闹，你去制止 A 同学，A 不说话了，当你再去制止 B，会发现 A 继续和大家吵闹，而 B 不说了，往复循环，最后发现让他们吵闹去吧，一上课大家就立马安静了。这里的上课就类比于重绘完成，一切就绪，就可以一个一个的去批评啦，哈哈哈…..例子稍微一点点牵强，不过意思到了。<br>代码也非常简单</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//孩子创建过程，随便重绘</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; This.dataList.length; i++) &#123;</span><br><span class="line">dom.innerHTML += <span class="string">`&lt;div id=<span class="subst">$&#123;i&#125;</span> style=&quot;width:200px;height:200px;&quot;&gt;&lt;/div&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建完成了，不会再重绘了..后续操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; This.dataList.length; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> domItem = <span class="built_in">document</span>.getElementById(i);</span><br><span class="line"><span class="comment">// 此处以添加一个echarts图表为例；</span></span><br><span class="line">domItem.myChart = echarts.init(domItem);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 当你需要循环添加的 dom 元素内容单一、固定格式的元素时，也可以选择 appendChild 来解决重绘问题。具体见代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给body添加dom元素</span></span><br><span class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">dom.className = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">dom.innerHTML = <span class="string">&#x27;Hello,Rain&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(dom);</span><br></pre></td></tr></table></figure><p>这样也避免了重绘问题。</p><p><strong>Ending…</strong><br>好啦，首创怀着激动的心啰里啰唆竟然码了 2k，问题不是特别难理解，主要的是想要给大家分享拿到问题的整个流程和想法，如有个别地方表述不当或您有疑问，咱们讨论区相互学习哦，还望各位支持一下哦~</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包经典案例留存</title>
      <link href="/%E9%97%AD%E5%8C%85%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B%E7%95%99%E5%AD%98/"/>
      <url>/%E9%97%AD%E5%8C%85%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B%E7%95%99%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p><strong>闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">                result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;i 的值：&#x27;</span>+ i)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>调用函数:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">createFunction()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/65d1ed9ce05d4eac827c3bd4682f491c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">createFunction()[<span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>/...]() <span class="comment">//代表调用第一个或第二个或第三个,结果都一样</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/724bf0856a674403af2b811f3a03ba1e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>若希望得到预期结果,需要修改原函数:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">                result[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;)(i)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;i 的值：&#x27;</span>+ i)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>改为立即执行函数,这样每次都会自动执行,所以<code>result=[0,1,2,3,4,5,6,7,8,9]</code><br><img src="https://img-blog.csdnimg.cn/856af9cd761947bf9f19510e7822b80b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcmFpbnV4Lg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单行省略&amp;多行省略</title>
      <link href="/%E5%8D%95%E8%A1%8C%E7%9C%81%E7%95%A5&amp;%E5%A4%9A%E8%A1%8C%E7%9C%81%E7%95%A5/"/>
      <url>/%E5%8D%95%E8%A1%8C%E7%9C%81%E7%95%A5&amp;%E5%A4%9A%E8%A1%8C%E7%9C%81%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p><strong>单行省略</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">white-space:nowrap;</span><br><span class="line">overflow:hidden;</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line"><span class="comment">//若无效，可设置display:inline-block</span></span><br><span class="line"><span class="comment">//若高度超出被截断，可设置line-height属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多行省略"><a href="#多行省略" class="headerlink" title="多行省略"></a><strong>多行省略</strong></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">word-wrap:<span class="keyword">break</span>-word;</span><br><span class="line">overflow:hidden;</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">display:-webkit-box;</span><br><span class="line">-webkit-box-orient:vertical;</span><br><span class="line">line-height: 14px;</span><br><span class="line">-webkit-line-clamp:<span class="number">4</span>;<span class="comment">//只显示4行，用于定义显示几行</span></span><br><span class="line"><span class="comment">// 用于英文换行</span></span><br><span class="line">word-<span class="keyword">break</span>:<span class="keyword">break</span>-all;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决 Refused to display in a frame because it set ‘X-Frame-Options‘ to ‘deny‘.问题</title>
      <link href="/%E8%A7%A3%E5%86%B3%20Refused%20to%20display%20in%20a%20frame%20because%20it%20set%20%E2%80%98X-Frame-Options%E2%80%98%20to%20%E2%80%98deny%E2%80%98.%E9%97%AE%E9%A2%98/"/>
      <url>/%E8%A7%A3%E5%86%B3%20Refused%20to%20display%20in%20a%20frame%20because%20it%20set%20%E2%80%98X-Frame-Options%E2%80%98%20to%20%E2%80%98deny%E2%80%98.%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong><br><strong>问题：</strong> 在做iframe预览PDF文件时，虽然nginx配置了<code>X-Frame-Options  SAMEORIGIN</code>,但在iframe中仍然获取不到内容。</p><p><strong>介绍：</strong><code>X-Frame-Options</code> HTTP 响应头是用来给浏览器指示允许一个页面可否在 frame , iframe 或者 object 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。</p><p>只有当用户使用支持<code>X-Frame-Options</code>的浏览器访问文档时，才提供增加的安全性。<code>Content-Security-Policy</code> HTTP头中的<code>frame-ancestors</code>指令会替代这个非标准的<code>header.CSP</code>的<code>frame-ancestors</code>会在壁虎4.0中支持,但是并不会被所有浏览器支持。然而<code>X-Frame-Options</code>是个已广泛支持的非官方标准,可以和CSP结合使用。</p><p><code>X-Frame-Options </code>有三个可能的值：</p><p><code>deny</code> 表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</p><p><code>sameorigin</code> 表示该页面可以在相同域名页面的 frame 中展示。</p><p><code>allow-from uri(http://......)</code> 表示该页面可以在指定来源的 frame 中展示。</p><h2 id="解决办法：Django中提供了一些简单的方法来在站点的响应中包含这个协议头"><a href="#解决办法：Django中提供了一些简单的方法来在站点的响应中包含这个协议头" class="headerlink" title="解决办法：Django中提供了一些简单的方法来在站点的响应中包含这个协议头"></a>解决办法：Django中提供了一些简单的方法来在站点的响应中包含这个协议头</h2><p><strong>（1）一个简单的中间件，在所有响应中设置协议头。</strong><br>如果要为你的站点中所有的响应设置相同的<code>X-Frame-Options</code>值，就可以将项目中<code>settings.py</code>文件中的添加中间件：‘<code>django.middleware.clickjacking.XFrameOptionsMiddleware</code> 设置为<code>MIDDLEWARE</code>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在开启该中间件之后，默认会为任何开放的<code>HttpResponse</code>设置<code>X-Frame-Options</code>协议头为DENY,如果你想要设置为<code>SAMEOGIGIN</code>,可以在<code>settings.py</code>文件中设置：<code>X_FRAME_OPTIONS = &#39;SAMEORIGIN&#39;</code>.</p><p><strong>但是这样的话会使该站点所有的视图都使用X-Frame-Options协议头，对于某些视图函数，我们可以使用特定的装饰器告诉中间件不要设置协议头.</strong></p><p><strong>（2）使用修饰器。</strong><br>在views.py文件中使用装饰器<br><strong>导入模块</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.clickjacking <span class="keyword">import</span> xframe_options_sameorigin, xframe_options_exempt,xframe_options_deny</span><br></pre></td></tr></table></figure><p>1.引用装饰器xframe_options_sameorigin，允许同源访问的装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators,clickjacking <span class="keyword">import</span> xframe_options_sameorigin</span><br><span class="line"> </span><br><span class="line"><span class="meta">@xframe_options_sameorigin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span>(<span class="params">request,filename</span>):</span></span><br><span class="line">    fp = <span class="built_in">open</span>(os.path.join(UEDITOR_UPLOAD_PATH,filename),<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    response = FileResponse(fp)</span><br><span class="line">    response[<span class="string">&#x27;X-Frame-Options&#x27;</span>] = settings.X_FRAME_OPTIONS</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ol start="2"><li>引用装饰器<code>xframe_options_exempt</code>，告诉中间件访问该视图时不要设置协议头：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.clickjacking <span class="keyword">import</span> xframe_options_exempt</span><br><span class="line"> </span><br><span class="line"><span class="meta">@xframe_options_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xframe_exempt</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;这个页面是安全的&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>3.引用装饰器<code>xframe_options_deny</code>, 告诉中间件访问该视图时屏蔽在加载iframe时的所有资源：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.clickjacking <span class="keyword">import</span> xframe_options_deny</span><br><span class="line"> </span><br><span class="line"><span class="meta">@xframe_options_deny</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deny_xframe</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;拒绝所有的资源&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>完整顺利的卸载node（避免踩坑！）</title>
      <link href="/%E5%AE%8C%E6%95%B4%E9%A1%BA%E5%88%A9%E7%9A%84%E5%8D%B8%E8%BD%BDnode%EF%BC%88%E9%81%BF%E5%85%8D%E8%B8%A9%E5%9D%91%EF%BC%81%EF%BC%89/"/>
      <url>/%E5%AE%8C%E6%95%B4%E9%A1%BA%E5%88%A9%E7%9A%84%E5%8D%B8%E8%BD%BDnode%EF%BC%88%E9%81%BF%E5%85%8D%E8%B8%A9%E5%9D%91%EF%BC%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die！</strong></p><p>1.卸载 node 本身、删除 nodejs 目录</p><p>提示：可以在系统控制面板–&gt;所有控制面板项–&gt;程序和功能 卸载 Node.js</p><p>2.手动删除<code>C:\Program Files\nodejs\node_modules</code>(如果你的文件是在这里的话)</p><p>3.手动删除<code>C:\users\</code>你的用户名<code>\node_modules</code>(如果你的文件是在这里的话)</p><p>这样就能完整卸载电脑上面的 node，然后也可以进行新版本下载<br>附官网地址：<a href="http://nodejs.cn/download/">下载新版 nodejs</a><br><img src="https://img-blog.csdnimg.cn/20210421183201539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web&amp;Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图片跟随鼠标样式跟随效果（附完整代码及效果）</title>
      <link href="/%E5%9B%BE%E7%89%87%E8%B7%9F%E9%9A%8F%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F%E8%B7%9F%E9%9A%8F%E6%95%88%E6%9E%9C%EF%BC%88%E9%99%84%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E5%8F%8A%E6%95%88%E6%9E%9C%EF%BC%89/"/>
      <url>/%E5%9B%BE%E7%89%87%E8%B7%9F%E9%9A%8F%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F%E8%B7%9F%E9%9A%8F%E6%95%88%E6%9E%9C%EF%BC%88%E9%99%84%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E5%8F%8A%E6%95%88%E6%9E%9C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>Demo效果如下：</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/aaf3f27d947c655837e2af69e95978c1.png" alt="在这里插入图片描述"></p><p><strong>完整代码如下：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#angel</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://profile.csdnimg.cn/3/8/1/3_weixin_49918657&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;angel&quot;</span> /&gt;</span> </span><br><span class="line">  // 使用任意本地或在线图片</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 获取到图片</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> angel = $(<span class="string">&#x27;#angel&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 步骤1. 定义节流阀</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 绑定 mousemove 事件</span></span></span><br><span class="line"><span class="javascript">      $(<span class="built_in">document</span>).on(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 步骤3：判断节流阀是否为空</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (timer) &#123; <span class="keyword">return</span> &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3. 设置图片的位置</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 步骤2：开启延时器</span></span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          $(angel).css(<span class="string">&#x27;top&#x27;</span>, e.pageY-<span class="number">50</span> + <span class="string">&#x27;px&#x27;</span>).css(<span class="string">&#x27;left&#x27;</span>, e.pageX-<span class="number">40</span> + <span class="string">&#x27;px&#x27;</span>)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;ok&#x27;</span>)</span></span><br><span class="line"><span class="javascript">          timer = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">16</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一多次踩坑的可视化图形不显示问题</title>
      <link href="/%E8%AE%B0%E4%B8%80%E5%A4%9A%E6%AC%A1%E8%B8%A9%E5%9D%91%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E5%BD%A2%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/%E8%AE%B0%E4%B8%80%E5%A4%9A%E6%AC%A1%E8%B8%A9%E5%9D%91%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E5%BD%A2%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><p><strong>问题综述：</strong> 不管是本文说的<strong>visjs</strong>还是<strong>echarts、highcharts…</strong> 我都遇到过一样的问题，但下次又忘了，这次就记下来，给大家提个醒，避免踩坑</p><p>因为本人公司业务的原因，经常和一些可视化的东西 “打交道”，避免不了就会出现各种各样的问题。<br>然而最烧脑无解的不亚于：一切按照既定要求去写代码，该引的js、css文件也引了，就是可视化的图形不出来，更纳闷的是控制台还不报错…….</p><p>这里以最近使用的visjs为例，展开简单说明一下，看图<br><img src="https://img-blog.csdnimg.cn/20210515174342536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>干净的不能再干净了，一点报错都没有，结构和js引入如下，也是一点问题都没有，完全按照 <a href="https://visjs.org/">visjs官网</a> 定义，如下：<br><img src="https://img-blog.csdnimg.cn/20210515174650987.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210515174745294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210515174756591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用的是最简单的那个例子，然而它愣是憋着不出来，给俺急坏了。</p><p><strong>解决办法：</strong><br><img src="https://img-blog.csdnimg.cn/20210515175221416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>灰常简单，修改执行此可视化的钩子，从<code>created</code>–&gt;<code>mounted</code>  问题顺利解决！<br><img src="https://img-blog.csdnimg.cn/202105151755098.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可算是憋出来了，图出来了，在出现什么问题也有地方可看了，至少不会盲人摸象…</p><p>谨以此篇文章记录一可视化坑，跳了不知多少次……</p><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原生JavaScript封装去除数组重复元素的去重函数</title>
      <link href="/%E5%8E%9F%E7%94%9FJavaScript%E5%B0%81%E8%A3%85%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E5%8E%BB%E9%87%8D%E5%87%BD%E6%95%B0/"/>
      <url>/%E5%8E%9F%E7%94%9FJavaScript%E5%B0%81%E8%A3%85%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E5%8E%BB%E9%87%8D%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>Header：</strong> 原创不易，还请大家不吝指导赐教，Code is never die！</p><p>ps：本着让更多人不止解决问题，更能够学到一点点方法的目的。</p><p>今天给大家分享一下 JavaScript 封装一个数组去重函数方法。</p><p><strong>题目：</strong> 要求去除数组中重复的元素</p><p><strong>① 思路：</strong> 把旧数组里面不重复的元素选取出来放到新数组中，重复的元素只保留一个，放到新数组中去重；</p><p><strong>② 核心算法：</strong> 我们遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面没有出现过，我们就添加，否则不添加；</p><p><strong>③ 常见疑问：</strong> 我们怎么知道该元素没有存在？利用新数组.indexOf(数组元素) ，如果返回时 - 1 就说明新数组里面没有改元素。</p><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装函数：去除数组重复元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (newArr.indexOf(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">newArr.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> demo1 = uniqueArr([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> demo2 = uniqueArr([<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(demo1); <span class="comment">// [&quot;c&quot;, &quot;a&quot;, &quot;z&quot;, &quot;x&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(demo2); <span class="comment">// [&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>Ending…</strong><br>好啦，简单明了，自己封装有时候也并不麻烦，相反还可以根据一些实际的特殊需求自己设计，刺激而满满的成就感。还望各位支持一下~~~</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原生JavaScript封装颠倒数组元素</title>
      <link href="/%E5%8E%9F%E7%94%9FJavaScript%E5%B0%81%E8%A3%85%E9%A2%A0%E5%80%92%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/"/>
      <url>/%E5%8E%9F%E7%94%9FJavaScript%E5%B0%81%E8%A3%85%E9%A2%A0%E5%80%92%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p><strong>Header：</strong> 原创不易，还请大家不吝指导赐教，Code is never die！</p><p>ps：本着让更多人不止解决问题，更能够学到一点点方法的目的。</p><p>今天给大家分享一下 JavaScript 原生代码封装 reverse()方法。<br>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用封装函数翻转任意数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">newArr[newArr.length] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = changeArr([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [9, 6, 4, 3, 1]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = changeArr([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [&quot;blue&quot;, &quot;purple&quot;, &quot;green&quot;, &quot;red&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>Ending…</strong><br>好啦，简单明了，自己封装有时候也并不麻烦，相反还可以根据一些实际的特殊需求自己设计，刺激而满满的成就感。还望各位支持一下~~~</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IP地址进行函数封装处理--常见的前端封装js函数</title>
      <link href="/IP%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%A4%84%E7%90%86--%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B0%81%E8%A3%85js%E5%87%BD%E6%95%B0/"/>
      <url>/IP%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%A4%84%E7%90%86--%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B0%81%E8%A3%85js%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die ！</strong></p><p>每日一小更，主要分享一下工作中遇到的一些小问题以及觉得比较 有用可以分享给大家都东西。</p><p>想必身为前端的你，也会经常遇到这样的问题吧，接班上一位 “优秀的前端工程师”，继续完成或者维护修改他的 “佳作”，那不堪入目的html、随处可放的css，不知哪里搞来一段js以及前后端交流商量出来的接口…  只有你想不到，没有它不敢出的…</p><p>废话不多说，进入正题！今天遇到的情况是对数据IP地址进行二次封装—-修改为    <strong>boss</strong> 想要的格式和混淆加密方式<br>如图：<br><img src="https://img-blog.csdnimg.cn/20210519113911723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210519113919374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要对ip进行一定规则的二次处理，这里就以一个规则为例。四组数的范围都为0~255（且不取到0、255），拿到正确的ip，四组数分别进行+5处理，比如：<code>myip：118.19.11.253</code>这是后台返回正确数据，处理之后变成了<code>myip：123.24.16.4</code>即为展现数据。</p><p>大眼一看，不同页面多个地方都有此类数据需要进行处理，果断选择封装一个函数处理（这里说明一下：我封装的不一定是最简单的，但却是真实的第一思路往下走的，重在遇到需求要有思路）<br>逻辑没有那么复杂，直接上代码，留存备用！</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">packIP</span>(<span class="params">ip</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> regexp =</span><br><span class="line">        <span class="regexp">/^([0-9]|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.([0-9]|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.([0-9]|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.([0-9]|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])$/</span>;</span><br><span class="line">      <span class="comment">//说明一下，由于实际业务的需求，可能会出现数据不是IP的情况，选择原封不动</span></span><br><span class="line">      <span class="keyword">var</span> res = regexp.test(ip);</span><br><span class="line">      <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里设置ip规则</span></span><br><span class="line">        <span class="keyword">var</span> newip = ip.split(<span class="string">&#x27;.&#x27;</span>);<span class="comment">//每个网段单独拿出来操作</span></span><br><span class="line">        <span class="keyword">var</span> resip = [];</span><br><span class="line">        newip.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;<span class="comment">//遍历+5</span></span><br><span class="line">          item = <span class="built_in">Number</span>(item);</span><br><span class="line">          <span class="keyword">if</span> (item + <span class="number">5</span> &gt;= <span class="number">255</span>) &#123;<span class="comment">//保证有效正确性</span></span><br><span class="line">            item = item - <span class="number">249</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            item = item + <span class="number">5</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          resip.push(item);</span><br><span class="line">        &#125;);</span><br><span class="line">        resip = resip.join(<span class="string">&#x27;.&#x27;</span>);<span class="comment">//以.分隔符再拼接到一块</span></span><br><span class="line">        <span class="keyword">return</span> resip;<span class="comment">//成功返回</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 这里直接还原无需操作的数据</span></span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PS:</strong><a href="https://rainux.top/"> 博主博客主页(Rainux)，精彩继续，欢迎来访！</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在html的js中获取外部js中的多个变量和数据</title>
      <link href="/%E5%9C%A8html%E7%9A%84js%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%A4%96%E9%83%A8js%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE/"/>
      <url>/%E5%9C%A8html%E7%9A%84js%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%A4%96%E9%83%A8js%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><p>通常如果数据过多，我们会将数据单独拉出来存储到一个单独的 js 文件中，然后通过外部 js 引入进来使用数据。</p><p>目前比较简单而且用的比较多的是 ES6 语法规范的<code>exports&amp;import</code>方法。<br>使用方法是：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 外部定义dataList.js</span></span><br><span class="line"><span class="built_in">exports</span>.dataList = &#123;</span><br><span class="line">  uname = <span class="string">&#x27;Rain&#x27;</span>,</span><br><span class="line">    uage = <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">    year = <span class="string">&#x27;2021-04-22 09:30&#x27;</span>,</span><br><span class="line">    hometown = <span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">使用数据的index.html文件</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; dataList &#125; <span class="keyword">from</span> <span class="string">&#x27;./data.js&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dataList);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当然在项目中使用完全没有任何问题，但是当你测试或者单独两个文件这样使用的话就会出现问题，因为这种方法是 ES6 语法规范下的方法，在普通的 JS 中是使用的 JavaScript 语法，所以肯定会出现“不适”的问题出现，就是下面这个啦！<br><img src="https://img-blog.csdnimg.cn/20210422100907549.png" alt="在这里插入图片描述"><br>“无法在模块外部使用 import 语句”，意思就是说导入文件是 ES6 模块化语法，而浏览器并不支持 ES6 语法。就是这个问题导致的错误。</p><p>看到网上很多人给出的解决方法是：在 script 标签中加入 type=”module”属性<br>然而，不管是看评论还是自己亲身测试发现，然而并没有什么用处，依然会报错！！！</p><p>其实刚刚开头也说了在项目中使用较多，为什么在项目中可以正常使用呢？其实这里所说的意思是，默认你的项目配置了 webpack 包，然后在 webpack 配置文件中初始化配置一下：<code>module.exports = &#123; mode: &#39;development&#39; // mode 用来指定构建模式 &#125;</code> 然后是启动 webpack 项目打包，将原本的 js 文件改为 dist 目录下的 main.js 文件使用，这里就可以正常使用<code>exports&amp;import</code>方法！</p><p>这是在项目中使用，当然不会有什么问题，但有人说了我自己测试一些数据，或者自己学习练习，小 demo 中使用，难道还得打包……那岂不是大材小用，这里讲一下原生 js、html 的方法：在 html 的 js 中获取外部 js 中的多个变量值。<br>首先上代码：<br>HTML 文件部分</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入定义数据的js文件 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./data.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 直接使用js文件方法获取数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> dataList = dataList();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(dataList);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>所引用的 data.js 文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> uname = <span class="string">&#x27;Rain&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> uage = <span class="string">&#x27;18&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="string">&#x27;2021-04-22 09:30&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> hometown = <span class="string">&#x27;China&#x27;</span>;</span><br><span class="line"><span class="comment">// 这里可以return两种类型数据：对象  数组 （按需求）</span></span><br><span class="line"><span class="keyword">return</span> &#123; uname, uage, year, hometown &#125;;</span><br><span class="line"><span class="comment">// return [uname, uage, year, hometown];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>展示下控制台分别打印的数据情况以及测试情况（大家见图即理解）<br>① 返回数组<br><img src="https://img-blog.csdnimg.cn/20210422102329101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>② 返回对象</p><p><img src="https://img-blog.csdnimg.cn/20210422102350124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图大家所见，可以对数据进行遍历等等等操作，方便大家测试，当然在正式项目中也可以使用呀，个人感觉不是特别麻烦，主要是不会报错啦！！！</p><p><strong>Ending：</strong> 坚持写下去，前端的魅力无法言说，努力做自己认为对的事！</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Uncaught TypeError_ Illegal invocation报错简单直接解决方案</title>
      <link href="/Uncaught%20TypeError_%20Illegal%20invocation%E6%8A%A5%E9%94%99%E7%AE%80%E5%8D%95%E7%9B%B4%E6%8E%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/Uncaught%20TypeError_%20Illegal%20invocation%E6%8A%A5%E9%94%99%E7%AE%80%E5%8D%95%E7%9B%B4%E6%8E%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p><strong>环境：</strong> jQuery、Ajax、formData；</p><p><strong>描述：</strong> 用于上传PDF、doc等文件时，文件POST请求需要通过使用<code>formData</code>作为<code>data</code>的属性值传入，这样才能正确的得到文件信息，但是今天出现了这个错误。</p><p><strong>解决：</strong><br>修改<code>ajax</code>请求的内容部分，增加下面两个属性：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 告诉jQuery不要设置Content-Type请求头，无分界符</span></span><br><span class="line"><span class="comment">// 默认true，有分界符，导致服务器无法正确识别文件起始位置</span></span><br><span class="line"><span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 告诉jQuery不要去处理发送的数据</span></span><br><span class="line"><span class="comment">// 默认为true，会将文件等数据转换为查询字符串</span></span><br><span class="line"><span class="attr">processData</span>: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>最常见的前端小案例---筛选商品</title>
      <link href="/%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B0%8F%E6%A1%88%E4%BE%8B---%E7%AD%9B%E9%80%89%E5%95%86%E5%93%81/"/>
      <url>/%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B0%8F%E6%A1%88%E4%BE%8B---%E7%AD%9B%E9%80%89%E5%95%86%E5%93%81/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h4 id="1-0-定义数组对象数据"><a href="#1-0-定义数组对象数据" class="headerlink" title="1.0 定义数组对象数据"></a>1.0 定义数组对象数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>，</span><br><span class="line">            <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>，</span><br><span class="line">            <span class="attr">price</span>: <span class="number">3999</span></span><br><span class="line">        &#125;， &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>，</span><br><span class="line">            <span class="attr">pname</span>: <span class="string">&#x27;苹果&#x27;</span>，</span><br><span class="line">            <span class="attr">price</span>: <span class="number">999</span></span><br><span class="line">        &#125;， &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">3</span>，</span><br><span class="line">            <span class="attr">pname</span>: <span class="string">&#x27;华强北&#x27;</span>，</span><br><span class="line">            <span class="attr">price</span>: <span class="number">1299</span></span><br><span class="line">        &#125;， &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">4</span>，</span><br><span class="line">            <span class="attr">pname</span>: <span class="string">&#x27;华为&#x27;</span>，</span><br><span class="line">            <span class="attr">price</span>: <span class="number">1999</span></span><br><span class="line">        &#125;， ];</span><br></pre></td></tr></table></figure><h4 id="2-0-使用-forEach-遍历数据并渲染到页面中"><a href="#2-0-使用-forEach-遍历数据并渲染到页面中" class="headerlink" title="2.0 使用 forEach 遍历数据并渲染到页面中"></a>2.0 使用 forEach 遍历数据并渲染到页面中</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">tr.innerHTML =</span><br><span class="line"><span class="string">&#x27;&lt;td&gt;&#x27;</span> + value.id + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + value.pname + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + value.price + <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">tbody.appendChild(tr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-0-根据价格筛选数据"><a href="#3-0-根据价格筛选数据" class="headerlink" title="3.0 根据价格筛选数据"></a>3.0 根据价格筛选数据</h4><ol><li><p>获取到搜索按钮并为其绑定点击事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">search_price.addEventListener(<span class="string">&#x27;click&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用 filter 将用户输入的价格信息筛选出来</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">search_price.addEventListener(<span class="string">&#x27;click&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> newDate = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//start.value是开始区间</span></span><br><span class="line">        <span class="comment">//end.value是结束的区间</span></span><br><span class="line">      <span class="keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(newDate);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>将筛选出来的数据重新渲染到表格中</p><ol><li><p>将渲染数据的逻辑封装到一个函数中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDate</span>(<span class="params">mydata</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 先清空原来tbody 里面的数据</span></span><br><span class="line">tbody.innerHTML = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">mydata.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">tr.innerHTML =</span><br><span class="line"><span class="string">&#x27;&lt;td&gt;&#x27;</span> + value.id + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + value.pname + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + value.price + <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">tbody.appendChild(tr);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将筛选之后的数据重新渲染</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> search_price.addEventListener(<span class="string">&#x27;click&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> newDate = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="built_in">console</span>.log(newDate);</span><br><span class="line">     <span class="comment">// 把筛选完之后的对象渲染到页面中</span></span><br><span class="line">     setDate(newDate);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="4-0-根据商品名称筛选"><a href="#4-0-根据商品名称筛选" class="headerlink" title="4.0 根据商品名称筛选"></a>4.0 根据商品名称筛选</h4><ol><li><p>获取用户输入的商品名称</p></li><li><p>为查询按钮绑定点击事件，将输入的商品名称与这个数据进行筛选</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> search_pro.addEventListener(<span class="string">&#x27;click&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> arr = [];</span><br><span class="line">     data.some(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (value.pname === product.value) &#123;</span><br><span class="line">         <span class="comment">// console.log(value);</span></span><br><span class="line">         arr.push(value);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// return 后面必须写true</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="comment">// 把拿到的数据渲染到页面中</span></span><br><span class="line">     setDate(arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>不得不知道的事儿---前端Gojs之去除水印</title>
      <link href="/%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E5%84%BF---%E5%89%8D%E7%AB%AFGojs%E4%B9%8B%E5%8E%BB%E9%99%A4%E6%B0%B4%E5%8D%B0/"/>
      <url>/%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E5%84%BF---%E5%89%8D%E7%AB%AFGojs%E4%B9%8B%E5%8E%BB%E9%99%A4%E6%B0%B4%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong><br>刚开始是这个样子的，带有水印，显得特别难看，太影响界面了吧 ！<img src="https://img-blog.csdnimg.cn/20210422215938389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开你项目引入的 go.js 文件，然后甭管其他的，直接<strong>ctrl+f</strong> 然后复制这段文字<code>5da73c80a36755dc038e4972187c3cae51fd22</code>，然后就能查找到图中所示位置了<br><img src="https://img-blog.csdnimg.cn/20210422220215420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时就是从 b[c]开始的内容，一直到 if(…)这里，全部注释掉！直接<strong>ctrl+s</strong>保存，本来将信将疑，然而奇迹般地就出现了下图：<br><img src="https://img-blog.csdnimg.cn/20210422220220523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>附记录：<br>今天发现这个地方可能长得不太一样，不过影响不大，都差不多，而且效果都能显示出来（以下亲测）<br><img src="https://img-blog.csdnimg.cn/202104241736355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐收藏：11招在手，各类表格需求——妈妈再也不用担心啦 ！</title>
      <link href="/%E6%8E%A8%E8%8D%90%E6%94%B6%E8%97%8F%EF%BC%9A11%E6%8B%9B%E5%9C%A8%E6%89%8B%EF%BC%8C%E5%90%84%E7%B1%BB%E8%A1%A8%E6%A0%BC%E9%9C%80%E6%B1%82%E2%80%94%E2%80%94%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E7%94%A8%E6%8B%85%E5%BF%83%E5%95%A6%20%EF%BC%81/"/>
      <url>/%E6%8E%A8%E8%8D%90%E6%94%B6%E8%97%8F%EF%BC%9A11%E6%8B%9B%E5%9C%A8%E6%89%8B%EF%BC%8C%E5%90%84%E7%B1%BB%E8%A1%A8%E6%A0%BC%E9%9C%80%E6%B1%82%E2%80%94%E2%80%94%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E7%94%A8%E6%8B%85%E5%BF%83%E5%95%A6%20%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p>JavaScript 表格控件可以操作大数据集的HTML表格，提供各种功能，如分页、排序、过滤以及行编辑。在本文中，我整理了 11 个最好的 JavaScript 表格插件分享给同为开发人员的大家，大家可以很容易地添加表格操作功能到Web应用程序中。</p><h3 id="1-DataTable"><a href="#1-DataTable" class="headerlink" title="1. DataTable"></a>1. DataTable</h3><p><img src="https://img-blog.csdnimg.cn/20210610172250961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong><a href="https://datatables.net/">DataTables</a></p><p>DataTables 是 jQuery、JavaScript 库的插件。它是一个高度灵活的工具，基于渐进增强的基础，并将向任何 HTML 表格添加高级交互控件。该库包括分页、即时搜索和多列排序，并支持几乎所有数据源，如 DOM、JavaScript、Ajax 和服务器端处理。</p><h3 id="2-Handsontable"><a href="#2-Handsontable" class="headerlink" title="2. Handsontable"></a>2. Handsontable</h3><p><img src="https://img-blog.csdnimg.cn/20210610172511310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong><a href="https://handsontable.com/">Handsontable</a></p><p>Handsontable 是用于创建出色应用程序的可扩展电子表格解决方案。这个开箱即用的解决方案带有 CLI 工具，因此您可以使用任意数量的插件构建您的作品。更重要的是，Handsontable 是一张空白画布，因此您可以创建自己的外观和感觉。</p><p>Handsontable 是用纯 JavaScript 编写的，也可用于 AngularJS 指令 和 Polymer 组件。</p><h3 id="3-JsGrid"><a href="#3-JsGrid" class="headerlink" title="3. JsGrid"></a>3. JsGrid</h3><p><img src="https://img-blog.csdnimg.cn/20210610172707883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong><a href="http://js-grid.com/">jsGrid</a></p><p>jsGrid 是一个基于 jQuery 的轻量级客户端数据网格控件。它支持基本的网格操作，如插入、过滤、编辑、删除、分页和排序。jsGrid 很灵活，允许自定义其外观和组件。</p><p>jsGrid 有一个灵活的分页器，允许在客户端和服务器端对数据进行分页。jsGrid 提供了不同的列类型：文本、数字、选择、复选框等。</p><h3 id="4-FancyGrid"><a href="#4-FancyGrid" class="headerlink" title="4. FancyGrid"></a>4. FancyGrid</h3><p><img src="https://img-blog.csdnimg.cn/20210610173128185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong> <a href="https://www.fancygrid.com/">FancyGrid</a></p><p>FancyGrid 是为您的 Web 应用程序创建网格的完整解决方案。FancyGrid 是一个带有图表集成 （highcharts 和 sparkling）、服务器通信和许多其他有用功能的网格库 。</p><p>该库包括超过 25 种以上的功能，如分页、排序、过滤、验证、Ajax 数据、文件数据、RESTful、触摸支持、Angular JS 指令等等。</p><p>FancyGrid 是一个无插件库，它没有依赖，但与 jQuery 和 AngularJS 集成。FancyGrid 还包括大量示例、专业支持、优雅的 API 以及易于使用的详细文档。</p><p>它还具有与 FancyGrid 集成的大表单模块（FancyForm）。</p><h3 id="5-AG-Grid"><a href="#5-AG-Grid" class="headerlink" title="5. AG Grid"></a>5. AG Grid</h3><p><img src="https://img-blog.csdnimg.cn/20210610173246583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong> <a href="https://www.ag-grid.com/">AG Grid</a><br>AG Grid是一个企业级 JavaScript 数据网格。AG Grid的目的是提供一个数据网格，企业软件可以使用它来构建应用程序，例如报告和数据分析、业务工作流和数据输入。作者花了数年时间用 C++、Java 和 JavaScript 构建应用程序，发现 JavaScript 中缺乏网格的选择，尤其是与其他语言框架中的网格相比。Ag Grid是将挫折转化为答案的结果，提供了一个值得企业发展的网格。</p><h3 id="6-jQWidgets"><a href="#6-jQWidgets" class="headerlink" title="6. jQWidgets"></a>6. jQWidgets</h3><p><img src="https://img-blog.csdnimg.cn/2021061017350222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong> <a href="https://www.jqwidgets.com/">jQwidget</a></p><p>jQWidgets 为构建专业网站和移动应用程序提供了全面的解决方案。它完全建立在开放标准和技术上，如 HTML5、CSS、JavaScript 和 jQuery。 jQWidgets 支持响应式 Web 开发，并帮助您创建在台式机、平板电脑和智能手机上看起来很漂亮的应用程序和网站。您可以将 jQWidgets 与 TypeScript、AngularJS、Angular 2、KnockoutJS 等流行框架以及 ASP.NET MVC、PHP、JSP 和 Node.js 等服务器端技术一起使用</p><p>jQWidgets 是一个功能完整的框架，具有专业的支持触摸的 jQuery 小部件、主题、输入验证、拖放插件、数据适配器、内置 WAI-ARIA 可访问性、国际化和 MVVM 支持。</p><h3 id="7-W2ui"><a href="#7-W2ui" class="headerlink" title="7.W2ui"></a>7.W2ui</h3><p><img src="https://img-blog.csdnimg.cn/20210610173709602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong> <a href="http://w2ui.com/web/demos/#/combo/2">w2ui</a></p><p>w2ui 库是一组相互关联的 jQuery 插件。它不是 jQuery 的临时端口，但最初是为 jQuery 开发的。不支持其他框架，例如原型或 dojo。w2layout 对象允许您创建最多 6 个面板的可拉伸和可调整大小的布局。面板是顶部、左侧、主要、预览、右侧和底部。您不必创建和初始化所有 6 个面板，而只需创建和初始化您应用程序中需要的面板。</p><p>开箱即用的 w2ui 库是多合一的解决方案。它包含所有最常见的 UI 小部件：布局、网格、侧边栏、选项卡、工具栏、弹出窗口、字段控件和表单。您不需要将一组不匹配的插件放在一起来实现您的目标。</p><h3 id="8-Ember-Table"><a href="#8-Ember-Table" class="headerlink" title="8. Ember Table"></a>8. Ember Table</h3><p><img src="https://img-blog.csdnimg.cn/20210610173911209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong> <a href="https://opensource.addepar.com/ember-table/docs/guides/header/columns">Ember Table</a></p><p>Ember Table 允许您通过仅渲染正在显示的行来处理非常大的数据集。它被编写为带有易于理解和扩展的 API 的 ember 组件。它包括延迟渲染并支持数百万行，支持列调整大小和重新排序，并且易于配置、可定制和可扩展。</p><h3 id="9-JavaScript-DataGrid-Widget"><a href="#9-JavaScript-DataGrid-Widget" class="headerlink" title="9. JavaScript DataGrid Widget"></a>9. JavaScript DataGrid Widget</h3><p><img src="https://img-blog.csdnimg.cn/20210610174256208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong> <a href="https://dhtmlx.com/docs/products/dhtmlxGrid/">JavaScript DataGrid Widget</a></p><p>JavaScript DataGrid Widget是一个功能齐全的 JavaScript 网格控件，可提供尖端的功能、强大的数据绑定以及对大型数据集的快速性能。丰富而直观的 JavaScript API 使网格高度可定制且易于使用。JavaScript DataGrid Widget可以从不同的数据源加载数据：XML（支持自定义格式）、JSON、CSV、JavaScript 数组和 HTML 表。</p><p>使用这个 js 网格视图组件，您可以轻松创建漂亮的、支持 Ajax 的表格，并具有丰富的单元格内编辑、内置过滤、搜索和分组功能。智能渲染和分页支持可确保即使使用庞大的数据集也能快速加载。许多事件处理程序允许您向网格添加必要的交互性。</p><h3 id="10-KingTable"><a href="#10-KingTable" class="headerlink" title="10. KingTable"></a>10. KingTable</h3><p><img src="https://img-blog.csdnimg.cn/20210610174121110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong> <a href="https://robertoprevato.github.io/demos/kingtable/colors.html">KingTable</a></p><p>KingTable是一个管理表的 jQuery 插件，可以根据输入数据自行构建。支持客户端和服务器端分页；客户端和服务器端搜索；自定义过滤器视图；用于隐藏和重新排序列的自动菜单并支持自定义工具。客户端导出功能为：csv、json 和 xml 格式。</p><h3 id="11-ApeendGrid"><a href="#11-ApeendGrid" class="headerlink" title="11.ApeendGrid"></a>11.ApeendGrid</h3><p><img src="https://img-blog.csdnimg.cn/20210610174836439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>地址：</strong> <a href="http://appendgrid.apphb.com/Demo/Manipulation">ApeendGrid</a></p><p>ApeendGrid允许您逐行输入结构化数据，例如填充电子表格。它允许您在网格中添加/删除/插入/删除行。生成的 input/select/textarea 控件被命名为用于提交到服务器端应用程序，例如 ASP.NET/PHP/JSP。多个选项和回调事件可用于适应各种情况。</p><p><strong>PS:</strong><a href="https://rainux.top/"> 博主博客主页(Rainux)，精彩继续，欢迎来访！</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端的小激动：Nodejs写简单接口教程</title>
      <link href="/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B0%8F%E6%BF%80%E5%8A%A8%EF%BC%9ANodejs%E5%86%99%E7%AE%80%E5%8D%95%E6%8E%A5%E5%8F%A3%E6%95%99%E7%A8%8B/"/>
      <url>/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B0%8F%E6%BF%80%E5%8A%A8%EF%BC%9ANodejs%E5%86%99%E7%AE%80%E5%8D%95%E6%8E%A5%E5%8F%A3%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><p>写前端的朋友不知道如何拓展自己在后端的能力，那么 nodejs 是你的不二选择，废话不多说，直接进入正题。</p><p>这里我演示的是 nodejs+mysql，别的数据库也类似。</p><p>首先我们需要做两件事，下载 nodejs 和 mysql 安装，这些基本知识略过。</p><p>接着新建一个文件夹，在此文件夹下打开 cms,或者 vscode 的终端，输入 node init 初始化一个项目，输入一些基本信息。</p><p>然后我们还需要安装以下包到–save 下<br><img src="https://img-blog.csdnimg.cn/20210421212539769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>express 和 mysql 这两个包是最主要的，稍后再讲其他包的作用。</p><p>在这里我要阐明一个事实，这里的 mysql 是操作 mysql 数据库的一个 js 插件，并不是数据库软件，npm 下载的包都是一些 js 的插件包。</p><p>好了，接下来和我一步步向下操作就可以了。</p><p>在文件夹下新建一个 index.js 文件，当然别的名字也可以，这个文件是你整个程序的入口。</p><p>键入以下代码：<br><img src="https://img-blog.csdnimg.cn/20210421212554444.png" alt="在这里插入图片描述"></p><p>80 代表的是你的端口号，然后在终端或者 cms 输入 node index.js，在浏览器里打开 localhost 就可以看到了，或者 127.0.0.1 也行，如果是别的端口号需要加上端口号，当然现在是什么也没有，因为我们还没有写接口。</p><p>接下来我们写一个 get 接口，返回一个‘hello world’字符串</p><p><img src="https://img-blog.csdnimg.cn/20210421212618745.png" alt="在这里插入图片描述"></p><p>res.json 这个方法是以 json 对象的形式返回去，还有以下方法</p><p>res.send 以页面的方式返回去</p><p>res.download 以文件的方式返回去，前端请求会下载此文件</p><p>别的方法这里就不在一一阐明了，可以打出 res.然后使用 vscode 的语法提醒查看下面的方法即可，或者查看文档看解释。</p><p>在这里插入图片描述</p><p>接下来我们返回一个页面：<br><img src="https://img-blog.csdnimg.cn/20210421212708273.png" alt="在这里插入图片描述"></p><p>可以看到 localhost 页面上出现了我们预期的结果</p><p><img src="https://img-blog.csdnimg.cn/20210421212720613.png" alt="在这里插入图片描述"></p><p>到了这里想必你们已经发现问题了，我每次改动一下都要重新跑程序，这不符合人体工程学，说的一点没错，我无法容忍，你萌呢？</p><p>想必你们在前面也发现了 pageage.json 里有这么一句话</p><p><img src="https://img-blog.csdnimg.cn/20210421212744222.png" alt="在这里插入图片描述"></p><p>scripts 的作用就是自己定义脚本命令，在这下面定义的所有命令都可以使用 npm run xxx 来运行，可以省略 run。里面运行的应该是 node index.js 才对，但是这里我们使用了一个插件，hotnode，这个插件可以让你的 node 程序热更新，要全局安装这个插件，不然找不到命令。</p><p>npm install -g hotnode</p><p>然后我们就可以 npm start 运行我们的程序了，所有基于 node 的程序跑起来都是两步，npm install,安装所有插件，npm start 运行程序，如果跑不起来，那么这个项目一定不是一个好项目，我通常如此告诫我的弟子，我们一定要站在巨人的肩上。</p><p>做到这里，我们接下来就可以愉快的开发了。</p><p>接下来我们试试 post 方法<br><img src="https://img-blog.csdnimg.cn/2021042121281019.png" alt="在这里插入图片描述"></p><p>post 不支持浏览器直接访问，这个时候要用 postman 软件</p><p><img src="https://img-blog.csdnimg.cn/20210421212952436.png" alt="在这里插入图片描述"></p><p>依然符合我们的预期。</p><p>可以把路径改为/login，/test 进行尝试，这里就不再演示了。</p><p>也可以试试 app.all 方法，这个方法支持所有请求方式，不必每个请求都写好几遍了。</p><p>想必大家已经想到了，我要做登录拦截难道每个接口里都要写一遍吗。</p><p>答案是当然不用的，接口的第一个参数可以用正则表达，我们这么写：</p><p><img src="https://img-blog.csdnimg.cn/20210421213005400.png" alt="在这里插入图片描述"></p><p>我们使用<em>来匹配所有路径，这个时候请求 test,会先经过</em>，被*拦截返回了***，</p><p>我们可以在内部判断来进行操作：</p><p><img src="https://img-blog.csdnimg.cn/20210421213057425.png" alt="在这里插入图片描述"></p><p>如果未登录，返回未登录，否则，继续向下匹配，回调函数接收三个参数，最后一个是 next,继续向下执行，*路径一定要写在最上面，不然会先被 test 捕捉到，test 没有执行 next,*就会捕捉不到请求。</p><p>这时候就可以设置 login 的值来看路径 localhost/test 下的返回值了。</p><p>那么有参数的情况呢，我们先引入一下中间件，如果没有安装可以先 npm 安装</p><p><img src="https://img-blog.csdnimg.cn/20210421213113364.png" alt="在这里插入图片描述">接下来我们请求一下<img src="https://img-blog.csdnimg.cn/20210421213239895.png" alt="在这里插入图片描述"></p><p>？后面的表单参数会放到 req.query 里，路径上的参数会放到 req.params 里，json 参数会放到 req.body 里，可以任意选择一种参数传递即可，路径以:开头表示此路径作为参数的意思。</p><p>前后端联调的时候经常碰到跨域的问题，我们可以使用 cors 插件解决，</p><p><img src="https://img-blog.csdnimg.cn/20210421213305263.png" alt="在这里插入图片描述"><br>以上提到的跨域和参数都可以自己进行处理，利用路径自己提取参数，在*路径的请求的请求体 req 里自己加上跨域允许的 header，但我希望你们可以使用插件，保证代码的简洁性，同时</p><p>我经常告诉我的弟子，我们一定要站在巨人的肩上。</p><p>好了，接下来我们开始连接数据库，从数据库里拿一条数据出来返回给前端。</p><p>引入 mysql 插件，我们先在 mysql 里新建一个表 students，存入以下数据：</p><p><img src="https://img-blog.csdnimg.cn/20210421213357899.png" alt="在这里插入图片描述"><br>然后使用 mysql 插件连接数据库</p><p><img src="https://img-blog.csdnimg.cn/20210421213432681.png" alt="在这里插入图片描述"></p><p>option 里都是连接数据库的基本配置，更多参数可以查看文档，我们请求一下 localhost/login 看看<br><img src="https://img-blog.csdnimg.cn/20210421213445548.png" alt="在这里插入图片描述"></p><p>真的返回了我们存在数据库的数据，我好激动啊，大业终于完成了。</p><p>是的，conn.query 就是执行一条 sql 语句，在回调函数里返回结果。</p><p>结果可以用构造函数封装，这样就不用每次都写一推没用的字段了。</p><p>如果你在此处这样做：</p><p><img src="https://img-blog.csdnimg.cn/20210421213459690.png" alt="在这里插入图片描述"><br>那么这个不妥的，第一次没有问题，第二次不行了，说是关闭了数据库无法继续查询，因为 connect()并不能重连数据库，你需要重新建立一条新连接，所以不建议使用 conn.end()断开数据库。</p><p>如果莫名其妙断了呢，我们就需要就重连机制，断了数据库会触发 error 事件，我们这样处理：<br><img src="https://img-blog.csdnimg.cn/20210421213510771.png" alt="在这里插入图片描述"><br>监听 error 事件，如果 err.code 返回了以上字符，那么我们就重新发起连接，直到连接成功。</p><p>做到这里，想必大家已经想到了，这是单线程的，并发量高的时候会不会顶不住，会的，所以我们要上连接池。</p><p>连接池与连接相似，做以下处理：<br><img src="https://img-blog.csdnimg.cn/20210421213526757.png" alt="在这里插入图片描述"></p><p>建立连接池比连接多了几个参数，这里罗列了常用的三个，其它参数可以查看文档。这个时候我们使用连接池处理请求。conn.release()的意思是释放连接池的意思，用完就要释放给别的请求使用，也可以直接使用连接池，具体区别我还不知道，我猜应该是直接使用连接池就是这个线程专门为这个请求服务，不用别的也不释放，可以用于常用接口，可以减少取连接池的操作。</p><p>做到这里我们大部分工作已经做完了，想必大家一定又想到了什么，我如果有一千个接口，难道要在一个文件里写一千个吗。</p><p>这当然是不妥的，比较难维护，所以我们要拆分模块，使用 express.Router()这个 api。</p><p>我们将连接数据库的文件单独抽离<br><img src="https://img-blog.csdnimg.cn/20210421213546143.png" alt="在这里插入图片描述"><br>导出常用的 pool,Result,router,app 模块，然后在子模块：<br><img src="https://img-blog.csdnimg.cn/2021042121371535.png" alt="在这里插入图片描述"><br>然后在入口：<br><img src="https://img-blog.csdnimg.cn/20210421213701140.png" alt="在这里插入图片描述"><br>看看是不是简洁多了，要注意一点，引入的子模块要放到全局监听<em>的下面，不然又会无法匹配到</em>，app.use 的第一个参数代表下发到那个目录，内部子模块的/相当于 app.use 的第一个参数，接下来请求一下/和/login 试试吧。</p><p><strong>Ending</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web&amp;Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gojs组件------前端图形化插件之利器</title>
      <link href="/Gojs%E7%BB%84%E4%BB%B6------%E5%89%8D%E7%AB%AF%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%88%A9%E5%99%A8/"/>
      <url>/Gojs%E7%BB%84%E4%BB%B6------%E5%89%8D%E7%AB%AF%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%88%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die！</strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用 jsPlumb 这个组件本身还不错，使用方便、入门简单、轻量级，但是使用一段时间下来，发现一些弊病，比如组件不太稳定，初始进入页面的时候连线的样式有时会乱掉，刷新页面之后才能恢复正常，而且连线样式比较单一，容易让人产生视觉疲劳，加之最近公司在大力推行所谓的“工业 4.0”，除了对自动化控制要求的提高之外，对这种图形化界面的要求也随之提高，所以单纯的 jsPlumb 组件效果已经不能满足日益发展的公司业务。基于以上种种，最终找到了 Gojs 组件，它效果强大、api 丰富，唯一的不足就是这个组件是一个收费组件，可是在天朝，嘘…这是个不能说的秘密！</p><h1 id="一、组件效果预览"><a href="#一、组件效果预览" class="headerlink" title="一、组件效果预览"></a>一、组件效果预览</h1><p>先来两个炫酷点的效果：<br><img src="https://img-blog.csdnimg.cn/20210420173655509.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420173716399.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420173731858.gif" alt="在这里插入图片描述"><br>就最下面两个效果而言，就是 jsPlumb 无法实现的，可是这种效果在 MES 系统里面是很吸引人的，尤其是一些流程性的业务，用这种效果实现让可以一眼就感觉高大上了。并且咋一眼看上去，你根本都不相信这是一个 web 页面的效果。</p><p>其他效果示例：<br><img src="https://img-blog.csdnimg.cn/20210420173759992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021042017381095.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可折叠的树：<br><img src="https://img-blog.csdnimg.cn/20210420173834649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是图片吗？<br><img src="https://img-blog.csdnimg.cn/2021042017384774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>竟然还可以生成图表！<br><img src="https://img-blog.csdnimg.cn/20210420173900441.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420173914283.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420173924320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>想抢 visio 的饭碗吗？<br><img src="https://img-blog.csdnimg.cn/20210420174031610.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420174050114.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420174101683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>更多示例可查看<a href="https://gojs.net/latest/samples/index.html">GoJS</a></p><h1 id="二、初次接触"><a href="#二、初次接触" class="headerlink" title="二、初次接触"></a>二、初次接触</h1><p>老规矩，还是先来个入门教程。</p><p>源码下载：<a href="https://github.com/NorthwoodsSoftware/GoJS">https://github.com/NorthwoodsSoftware/GoJS</a></p><p>api 详情：<a href="https://gojs.net/latest/api/index.html">https://gojs.net/latest/api/index.html</a></p><p>示例地址：<a href="https://gojs.net/latest/samples/index.html">https://gojs.net/latest/samples/index.html</a></p><h2 id="1、Gojs-简介"><a href="#1、Gojs-简介" class="headerlink" title="1、Gojs 简介"></a>1、Gojs 简介</h2><p>GoJS 是一个功能丰富的 JS 库，在 Web 浏览器和平台上可实现自定义交互图和复杂的可视化效果，它用自定义模板和布局组件简化了节点、链接和分组等复杂的 JS 图表，给用户交互提供了许多先进的功能，如拖拽、复制、粘贴、文本编辑、工具提示、上下文菜单、自动布局、模板、数据绑定和模型、事务状态和撤销管理、调色板、概述、事件处理程序、命令和自定义操作的扩展工具系统。无需切换服务器和插件，GoJS 就能实现用户互动并在浏览器中完全运行，呈现 HTML5 Canvas 元素或 SVG，也不用服务器端请求。 GoJS 不依赖于任何 JS 库或框架（例如 bootstrap、jquery 等），可与任何 HTML 或 JS 框架配合工作，甚至可以不用框架。</p><h2 id="2、使用入门"><a href="#2、使用入门" class="headerlink" title="2、使用入门"></a>2、使用入门</h2><p>（1）文件引用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;gojs/go-debug_ok.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以用 cdn 上面的最新版本，也可以引用本地 down 下来的文件。如果是开发，可以引用 debug 版本的 js，正式运行的时候引用正式的 js，这个无需多讲。</p><p>（2）创建画布</p><p>随便定义一个 html 元素，作为我们的画布</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;myDiagramDiv&quot;</span> style=<span class="string">&quot;margin:auto;width:300px; height:300px; background-color:#ddd;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后使用 gojs 的 api 初始化画布</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建画布</span></span><br><span class="line"><span class="keyword">var</span> objGo = go.GraphObject.make;</span><br><span class="line"><span class="keyword">var</span> myDiagram = objGo(go.Diagram, <span class="string">&#x27;myDiagramDiv&#x27;</span>, &#123;</span><br><span class="line"><span class="comment">//模型图的中心位置所在坐标</span></span><br><span class="line"><span class="attr">initialContentAlignment</span>: go.Spot.Center,</span><br><span class="line"></span><br><span class="line"><span class="comment">//允许用户操作图表的时候使用Ctrl-Z撤销和Ctrl-Y重做快捷键</span></span><br><span class="line"><span class="string">&#x27;undoManager.isEnabled&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//不运行用户改变图表的规模</span></span><br><span class="line"><span class="attr">allowZoom</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//画布上面是否出现网格</span></span><br><span class="line"><span class="string">&#x27;grid.visible&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//允许在画布上面双击的时候创建节点</span></span><br><span class="line"><span class="string">&#x27;clickCreatingTool.archetypeNodeData&#x27;</span>: &#123; <span class="attr">text</span>: <span class="string">&#x27;Node&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//允许使用ctrl+c、ctrl+v复制粘贴</span></span><br><span class="line"><span class="string">&#x27;commandHandler.copiesTree&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//允许使用delete键删除节点</span></span><br><span class="line"><span class="string">&#x27;commandHandler.deletesTree&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// dragging for both move and copy</span></span><br><span class="line"><span class="string">&#x27;draggingTool.dragsTree&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>官方示例用的<code>$</code>符号作为变量，博主觉得<code>$</code>符号太敏感，还是换个名字吧~以上几个参数都是博主摘选的，更多初始化画布的参数请参考官方 api 下图：<br><img src="https://img-blog.csdnimg.cn/20210420174518606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3）创建模型数据（Model）</p><p>接着上面的代码，我们增加如下几行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myModel = objGo(go.Model); <span class="comment">//创建Model对象</span></span><br><span class="line"><span class="comment">// model中的数据每一个js对象都代表着一个相应的模型图中的元素</span></span><br><span class="line">myModel.nodeDataArray = [&#123; <span class="attr">key</span>: <span class="string">&#x27;工厂&#x27;</span> &#125;, &#123; <span class="attr">key</span>: <span class="string">&#x27;车间&#x27;</span> &#125;, &#123; <span class="attr">key</span>: <span class="string">&#x27;工人&#x27;</span> &#125;, &#123; <span class="attr">key</span>: <span class="string">&#x27;岗位&#x27;</span> &#125;];</span><br><span class="line">myDiagram.model = myModel; <span class="comment">//将模型数据绑定到画布图上</span></span><br></pre></td></tr></table></figure><p>效果预览<img src="https://img-blog.csdnimg.cn/20210420174604965.gif" alt="在这里插入图片描述"><br>4）创建节点（Node）</p><p>上面有了画布和节点数据，只是有了一个雏形，但是还没有任何的图形化效果。我们加入一些效果试试</p><p>在 gojs 里面给我们提供了几种模型节点的可选项：</p><p><a href="https://gojs.net/latest/intro/shapes.html">Shape</a>:形状——Rectangle（矩形）、RoundedRectangle（圆角矩形），Ellipse（椭圆形），Triangle（三角形），Diamond（菱形），Circle（圆形）等<br><a href="https://gojs.net/latest/intro/textblocks.html">TextBlock</a>:文本域（可编辑）<br><a href="https://gojs.net/latest/intro/pictures.html">Picture</a>:图片<br><a href="https://gojs.net/latest/intro/panels.html">Panel</a>:容器来保存其他 Node 的集合<br>默认的节点模型代码只是由一个 TextBlock 组件构建成<br>我们增加如下一段代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个简单的节点模板</span></span><br><span class="line">myDiagram.nodeTemplate = objGo(</span><br><span class="line">go.Node,</span><br><span class="line"><span class="string">&#x27;Horizontal&#x27;</span>, <span class="comment">//横向布局的面板</span></span><br><span class="line"><span class="comment">// 节点淡蓝色背景</span></span><br><span class="line">&#123; <span class="attr">background</span>: <span class="string">&#x27;#44CCFF&#x27;</span> &#125;,</span><br><span class="line">objGo(</span><br><span class="line">go.Shape,</span><br><span class="line"><span class="string">&#x27;RoundedRectangle&#x27;</span>, <span class="comment">//定义形状，这是圆角矩形</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Shape的参数。宽高颜色等等*/</span> figure: <span class="string">&#x27;Club&#x27;</span>,</span><br><span class="line"><span class="attr">width</span>: <span class="number">40</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">60</span>,</span><br><span class="line"><span class="attr">margin</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">fill</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 绑定 Shape.figure属性为Node.data.fig的值，Model对象可以通过Node.data.fig 获取和设置Shape.figure（修改形状）</span></span><br><span class="line"><span class="keyword">new</span> go.Binding(<span class="string">&#x27;figure&#x27;</span>, <span class="string">&#x27;fig&#x27;</span>),</span><br><span class="line"><span class="keyword">new</span> go.Binding(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;fill2&#x27;</span>)</span><br><span class="line">),</span><br><span class="line">objGo(</span><br><span class="line">go.TextBlock,</span><br><span class="line"><span class="string">&#x27;Default Text&#x27;</span>, <span class="comment">// 默认文本</span></span><br><span class="line"><span class="comment">// 设置字体大小颜色以及边距</span></span><br><span class="line">&#123; <span class="attr">margin</span>: <span class="number">12</span>, <span class="attr">stroke</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">font</span>: <span class="string">&#x27;bold 16px sans-serif&#x27;</span> &#125;,</span><br><span class="line"><span class="comment">//绑定TextBlock.text 属性为Node.data.name的值，Model对象可以通过Node.data.name获取和设置TextBlock.text</span></span><br><span class="line"><span class="keyword">new</span> go.Binding(<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myModel = objGo(go.Model); <span class="comment">//创建Model对象</span></span><br><span class="line"><span class="comment">// model中的数据每一个js对象都代表着一个相应的模型图中的元素</span></span><br><span class="line">myModel.nodeDataArray = [</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;工厂&#x27;</span>, <span class="attr">fig</span>: <span class="string">&#x27;YinYang&#x27;</span>, <span class="attr">fill2</span>: <span class="string">&#x27;blue&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;车间&#x27;</span>, <span class="attr">fig</span>: <span class="string">&#x27;Peace&#x27;</span>, <span class="attr">fill2</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;工人&#x27;</span>, <span class="attr">fig</span>: <span class="string">&#x27;NotAllowed&#x27;</span>, <span class="attr">fill2</span>: <span class="string">&#x27;green&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;岗位&#x27;</span>, <span class="attr">fig</span>: <span class="string">&#x27;Fragile&#x27;</span>, <span class="attr">fill2</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;,</span><br><span class="line">];</span><br><span class="line">myDiagram.model = myModel; <span class="comment">//将模型数据绑定到画布图上</span></span><br></pre></td></tr></table></figure><p>代码释疑：以上我们给画布对象定义了两种节点模板，一种是文本节点，另一种是形状节点（Node）。在形状节点中，我们定义了数据模型的通用节点样式，就是这一段代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="comment">/* Shape的参数。宽高颜色等等*/</span>figure: <span class="string">&quot;Club&quot;</span>, <span class="attr">width</span>: <span class="number">40</span>, <span class="attr">height</span>: <span class="number">60</span>, <span class="attr">margin</span>: <span class="number">4</span>, <span class="attr">fill</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br></pre></td></tr></table></figure><p><strong>然后通过 <code>new go.Binding(&quot;figure&quot;, &quot;fig&quot;)</code>方法将模板里面的属性映射到数据实例中，比如这里模板里面的 figure 属性定义的是 Club，如果在我们的数据里面定义 fig 属性，那么它就会覆盖模板里面的 figure 的默认值。同样，fill 和 fill2 也是通过同样的原理去区别模板中的样式和实例中的实际样式的！</strong><br>注：更多 figure 属性的取值详见 <a href="https://gojs.net/latest/extensions/Figures.js">这里</a><br>效果如下：<br><img src="https://img-blog.csdnimg.cn/20210420175144453.gif" alt="在这里插入图片描述"><br>由此可见我们数据里面的属性会覆盖模板的原始属性，如果是新增的节点，由于没有自定义数据属性，所以呈现到界面上面的时候就是模板里面的原生样式！</p><p>（5）节点连线</p><p>有了上面的基础，我们可以在画布上面画出我们想要的图形效果了，可是还没有连线。我们知道连线是建立在节点模型的上面的，于是乎我们的 Model 又分为了以下三种类型：</p><p>Model：最基本的（不带连线，如上面的例子）<br>GraphLinksModel ：高级点的动态连线图<br>TreeModel：树形图的模型（从例子看好像用的不多）<br>GraphLinksModel 中为 model.nodeDataArray 提供 model.linkDataArray 为 node 节点连线保存数据模型信息，其实也是的一个 JSON 数组对象，每个线条都有两个属性 “to” 和 “from” 即 Node 节点的“key”值，两个属性代表两个 key 表示两个节点间的连线。</p><p>我们上面已经写过最基本的 Model 的例子了，我们再来个带连线的 Model 的示例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myModel = objGo(go.GraphLinksModel);</span><br><span class="line">myModel.nodeDataArray = [</span><br><span class="line">&#123; <span class="attr">key</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;工厂&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">key</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;车间&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">key</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;车间&#x27;</span> &#125;,</span><br><span class="line">];</span><br><span class="line">myModel.linkDataArray = [</span><br><span class="line">&#123; <span class="attr">from</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">from</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;ccc&#x27;</span> &#125;,</span><br><span class="line">];</span><br><span class="line">myDiagram.model = myModel;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20210420175221785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>学习了 Model、GraphLinksModel，还剩下一种 TreeModel 树节点的模型，这个博主不打算做详细介绍，有兴趣可以直接查看官网。</p><h1 id="三、综合效果"><a href="#三、综合效果" class="headerlink" title="三、综合效果"></a>三、综合效果</h1><p>关于综合效果，博主不打算将 gojs 的 api 逐个翻个遍了，这样太耗时间，伤不起，只是将官方示例中的部分源码截取出来供大家参考。有需要的再细究！</p><h2 id="1、自定义流程的使用"><a href="#1、自定义流程的使用" class="headerlink" title="1、自定义流程的使用"></a>1、自定义流程的使用</h2><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20210420175330889.gif" alt="在这里插入图片描述"><br>建议各位 copy 代码，在本地看到效果，然后再根据实际需求去研究它的 api，这样才不会太盲目而花费太多时间。</p><h2 id="2、工业流程图"><a href="#2、工业流程图" class="headerlink" title="2、工业流程图"></a>2、工业流程图</h2><p><img src="https://img-blog.csdnimg.cn/20210420175534446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>本文根据 js 的一些基础用法做了简单介绍，今天就先到这里，以后有问题了再来跟大家分享。如果你的项目里面也有这种业务需求，可以用起来试试！需要说明一点，如果您的公司不缺钱，建议使用正版授权的组件，毕竟尊重作者的劳动成果很重要！</p><p>本文原创出处：<a href="http://www.cnblogs.com/landeanfen/">http://www.cnblogs.com/landeanfen/</a></p><h1 id="五、附三中-①②-代码"><a href="#五、附三中-①②-代码" class="headerlink" title="五、附三中 ①② 代码"></a>五、附三中 ①② 代码</h1><p>①</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;title&gt;Draggable Link&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;Drag a link to reconnect it. Nodes have custom Adornments for selection, resizing, and reshaping.&quot; /&gt;</span><br><span class="line">&lt;!-- Copyright 1998-2017 by Northwoods Software Corporation. --&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;../../gojs/go-debug.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script id=&quot;code&quot;&gt;</span><br><span class="line">  function init() &#123;</span><br><span class="line">    if (window.goSamples) goSamples();  // init for these samples -- you don&#x27;t need to call this</span><br><span class="line">    var objGo = go.GraphObject.make;  // for conciseness in defining templates</span><br><span class="line"></span><br><span class="line">    myDiagram =</span><br><span class="line">      objGo(go.Diagram, &quot;myDiagramDiv&quot;,  // must name or refer to the DIV HTML element</span><br><span class="line">        &#123;</span><br><span class="line">          grid: objGo(go.Panel, &quot;Grid&quot;,</span><br><span class="line">                  objGo(go.Shape, &quot;LineH&quot;, &#123; stroke: &quot;lightgray&quot;, strokeWidth: 0.5 &#125;),</span><br><span class="line">                  objGo(go.Shape, &quot;LineH&quot;, &#123; stroke: &quot;gray&quot;, strokeWidth: 0.5, interval: 10 &#125;),</span><br><span class="line">                  objGo(go.Shape, &quot;LineV&quot;, &#123; stroke: &quot;lightgray&quot;, strokeWidth: 0.5 &#125;),</span><br><span class="line">                  objGo(go.Shape, &quot;LineV&quot;, &#123; stroke: &quot;gray&quot;, strokeWidth: 0.5, interval: 10 &#125;)</span><br><span class="line">                ),</span><br><span class="line">          allowDrop: true,  // must be true to accept drops from the Palette</span><br><span class="line">          &quot;draggingTool.dragsLink&quot;: true,</span><br><span class="line">          &quot;draggingTool.isGridSnapEnabled&quot;: true,</span><br><span class="line">          &quot;linkingTool.isUnconnectedLinkValid&quot;: true,</span><br><span class="line">          &quot;linkingTool.portGravity&quot;: 20,</span><br><span class="line">          &quot;relinkingTool.isUnconnectedLinkValid&quot;: true,</span><br><span class="line">          &quot;relinkingTool.portGravity&quot;: 20,</span><br><span class="line">          &quot;relinkingTool.fromHandleArchetype&quot;:</span><br><span class="line">            objGo(go.Shape, &quot;Diamond&quot;, &#123; segmentIndex: 0, cursor: &quot;pointer&quot;, desiredSize: new go.Size(8, 8), fill: &quot;tomato&quot;, stroke: &quot;darkred&quot; &#125;),</span><br><span class="line">          &quot;relinkingTool.toHandleArchetype&quot;:</span><br><span class="line">            objGo(go.Shape, &quot;Diamond&quot;, &#123; segmentIndex: -1, cursor: &quot;pointer&quot;, desiredSize: new go.Size(8, 8), fill: &quot;darkred&quot;, stroke: &quot;tomato&quot; &#125;),</span><br><span class="line">          &quot;linkReshapingTool.handleArchetype&quot;:</span><br><span class="line">            objGo(go.Shape, &quot;Diamond&quot;, &#123; desiredSize: new go.Size(7, 7), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line">          rotatingTool: objGo(TopRotatingTool),  // defined below</span><br><span class="line">          &quot;rotatingTool.snapAngleMultiple&quot;: 15,</span><br><span class="line">          &quot;rotatingTool.snapAngleEpsilon&quot;: 15,</span><br><span class="line">          &quot;undoManager.isEnabled&quot;: true</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    // when the document is modified, add a &quot;*&quot; to the title and enable the &quot;Save&quot; button</span><br><span class="line">    myDiagram.addDiagramListener(&quot;Modified&quot;, function(e) &#123;</span><br><span class="line">      var button = document.getElementById(&quot;SaveButton&quot;);</span><br><span class="line">      if (button) button.disabled = !myDiagram.isModified;</span><br><span class="line">      var idx = document.title.indexOf(&quot;*&quot;);</span><br><span class="line">      if (myDiagram.isModified) &#123;</span><br><span class="line">        if (idx &lt; 0) document.title += &quot;*&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (idx &gt;= 0) document.title = document.title.substr(0, idx);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // Define a function for creating a &quot;port&quot; that is normally transparent.</span><br><span class="line">    // The &quot;name&quot; is used as the GraphObject.portId, the &quot;spot&quot; is used to control how links connect</span><br><span class="line">    // and where the port is positioned on the node, and the boolean &quot;output&quot; and &quot;input&quot; arguments</span><br><span class="line">    // control whether the user can draw links from or to the port.</span><br><span class="line">    function makePort(name, spot, output, input) &#123;</span><br><span class="line">      // the port is basically just a small transparent square</span><br><span class="line">      return objGo(go.Shape, &quot;Circle&quot;,</span><br><span class="line">               &#123;</span><br><span class="line">                  fill: null,  // not seen, by default; set to a translucent gray by showSmallPorts, defined below</span><br><span class="line">                  stroke: null,</span><br><span class="line">                  desiredSize: new go.Size(7, 7),</span><br><span class="line">                  alignment: spot,  // align the port on the main Shape</span><br><span class="line">                  alignmentFocus: spot,  // just inside the Shape</span><br><span class="line">                  portId: name,  // declare this object to be a &quot;port&quot;</span><br><span class="line">                  fromSpot: spot, toSpot: spot,  // declare where links may connect at this port</span><br><span class="line">                  fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here</span><br><span class="line">                  cursor: &quot;pointer&quot;  // show a different cursor to indicate potential link point</span><br><span class="line">               &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var nodeSelectionAdornmentTemplate =</span><br><span class="line">      objGo(go.Adornment, &quot;Auto&quot;,</span><br><span class="line">        objGo(go.Shape, &#123; fill: null, stroke: &quot;deepskyblue&quot;, strokeWidth: 1.5, strokeDashArray: [4, 2] &#125;),</span><br><span class="line">        objGo(go.Placeholder)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    var nodeResizeAdornmentTemplate =</span><br><span class="line">      objGo(go.Adornment, &quot;Spot&quot;,</span><br><span class="line">        &#123; locationSpot: go.Spot.Right &#125;,</span><br><span class="line">        objGo(go.Placeholder),</span><br><span class="line">        objGo(go.Shape, &#123; alignment: go.Spot.TopLeft, cursor: &quot;nw-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line">        objGo(go.Shape, &#123; alignment: go.Spot.Top, cursor: &quot;n-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line">        objGo(go.Shape, &#123; alignment: go.Spot.TopRight, cursor: &quot;ne-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line"></span><br><span class="line">        objGo(go.Shape, &#123; alignment: go.Spot.Left, cursor: &quot;w-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line">        objGo(go.Shape, &#123; alignment: go.Spot.Right, cursor: &quot;e-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line"></span><br><span class="line">        objGo(go.Shape, &#123; alignment: go.Spot.BottomLeft, cursor: &quot;se-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line">        objGo(go.Shape, &#123; alignment: go.Spot.Bottom, cursor: &quot;s-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line">        objGo(go.Shape, &#123; alignment: go.Spot.BottomRight, cursor: &quot;sw-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    var nodeRotateAdornmentTemplate =</span><br><span class="line">      objGo(go.Adornment,</span><br><span class="line">        &#123; locationSpot: go.Spot.Center, locationObjectName: &quot;CIRCLE&quot; &#125;,</span><br><span class="line">        objGo(go.Shape, &quot;Circle&quot;, &#123; name: &quot;CIRCLE&quot;, cursor: &quot;pointer&quot;, desiredSize: new go.Size(7, 7), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),</span><br><span class="line">        objGo(go.Shape, &#123; geometryString: &quot;M3.5 7 L3.5 30&quot;, isGeometryPositioned: true, stroke: &quot;deepskyblue&quot;, strokeWidth: 1.5, strokeDashArray: [4, 2] &#125;)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    myDiagram.nodeTemplate =</span><br><span class="line">      objGo(go.Node, &quot;Spot&quot;,</span><br><span class="line">        &#123; locationSpot: go.Spot.Center &#125;,</span><br><span class="line">        new go.Binding(&quot;location&quot;, &quot;loc&quot;, go.Point.parse).makeTwoWay(go.Point.stringify),</span><br><span class="line">        &#123; selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate &#125;,</span><br><span class="line">        &#123; resizable: true, resizeObjectName: &quot;PANEL&quot;, resizeAdornmentTemplate: nodeResizeAdornmentTemplate &#125;,</span><br><span class="line">        &#123; rotatable: true, rotateAdornmentTemplate: nodeRotateAdornmentTemplate &#125;,</span><br><span class="line">        new go.Binding(&quot;angle&quot;).makeTwoWay(),</span><br><span class="line">        // the main object is a Panel that surrounds a TextBlock with a Shape</span><br><span class="line">        objGo(go.Panel, &quot;Auto&quot;,</span><br><span class="line">          &#123; name: &quot;PANEL&quot; &#125;,</span><br><span class="line">          new go.Binding(&quot;desiredSize&quot;, &quot;size&quot;, go.Size.parse).makeTwoWay(go.Size.stringify),</span><br><span class="line">          objGo(go.Shape, &quot;Rectangle&quot;,  // default figure</span><br><span class="line">            &#123;</span><br><span class="line">              portId: &quot;&quot;, // the default port: if no spot on link data, use closest side</span><br><span class="line">              fromLinkable: true, toLinkable: true, cursor: &quot;pointer&quot;,</span><br><span class="line">              fill: &quot;white&quot;,  // default color</span><br><span class="line">              strokeWidth: 2</span><br><span class="line">            &#125;,</span><br><span class="line">            new go.Binding(&quot;figure&quot;),</span><br><span class="line">            new go.Binding(&quot;fill&quot;)),</span><br><span class="line">          objGo(go.TextBlock,</span><br><span class="line">            &#123;</span><br><span class="line">              font: &quot;bold 11pt Helvetica, Arial, sans-serif&quot;,</span><br><span class="line">              margin: 8,</span><br><span class="line">              maxSize: new go.Size(160, NaN),</span><br><span class="line">              wrap: go.TextBlock.WrapFit,</span><br><span class="line">              editable: true</span><br><span class="line">            &#125;,</span><br><span class="line">            new go.Binding(&quot;text&quot;).makeTwoWay())</span><br><span class="line">        ),</span><br><span class="line">        // four small named ports, one on each side:</span><br><span class="line">        makePort(&quot;T&quot;, go.Spot.Top, false, true),</span><br><span class="line">        makePort(&quot;L&quot;, go.Spot.Left, true, true),</span><br><span class="line">        makePort(&quot;R&quot;, go.Spot.Right, true, true),</span><br><span class="line">        makePort(&quot;B&quot;, go.Spot.Bottom, true, false),</span><br><span class="line">        &#123; // handle mouse enter/leave events to show/hide the ports</span><br><span class="line">          mouseEnter: function(e, node) &#123; showSmallPorts(node, true); &#125;,</span><br><span class="line">          mouseLeave: function(e, node) &#123; showSmallPorts(node, false); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    function showSmallPorts(node, show) &#123;</span><br><span class="line">      node.ports.each(function(port) &#123;</span><br><span class="line">        if (port.portId !== &quot;&quot;) &#123;  // don&#x27;t change the default port, which is the big shape</span><br><span class="line">          port.fill = show ? &quot;rgba(0,0,0,.3)&quot; : null;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var linkSelectionAdornmentTemplate =</span><br><span class="line">      objGo(go.Adornment, &quot;Link&quot;,</span><br><span class="line">        objGo(go.Shape,</span><br><span class="line">          // isPanelMain declares that this Shape shares the Link.geometry</span><br><span class="line">          &#123; isPanelMain: true, fill: null, stroke: &quot;deepskyblue&quot;, strokeWidth: 0 &#125;)  // use selection object&#x27;s strokeWidth</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    myDiagram.linkTemplate =</span><br><span class="line">      objGo(go.Link,  // the whole link panel</span><br><span class="line">        &#123; selectable: true, selectionAdornmentTemplate: linkSelectionAdornmentTemplate &#125;,</span><br><span class="line">        &#123; relinkableFrom: true, relinkableTo: true, reshapable: true &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          routing: go.Link.AvoidsNodes,</span><br><span class="line">          curve: go.Link.JumpOver,</span><br><span class="line">          corner: 5,</span><br><span class="line">          toShortLength: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        new go.Binding(&quot;points&quot;).makeTwoWay(),</span><br><span class="line">        objGo(go.Shape,  // the link path shape</span><br><span class="line">          &#123; isPanelMain: true, strokeWidth: 2 &#125;),</span><br><span class="line">        objGo(go.Shape,  // the arrowhead</span><br><span class="line">          &#123; toArrow: &quot;Standard&quot;, stroke: null &#125;),</span><br><span class="line">        objGo(go.Panel, &quot;Auto&quot;,</span><br><span class="line">          new go.Binding(&quot;visible&quot;, &quot;isSelected&quot;).ofObject(),</span><br><span class="line">          objGo(go.Shape, &quot;RoundedRectangle&quot;,  // the link shape</span><br><span class="line">            &#123; fill: &quot;#F8F8F8&quot;, stroke: null &#125;),</span><br><span class="line">          objGo(go.TextBlock,</span><br><span class="line">            &#123;</span><br><span class="line">              textAlign: &quot;center&quot;,</span><br><span class="line">              font: &quot;10pt helvetica, arial, sans-serif&quot;,</span><br><span class="line">              stroke: &quot;#919191&quot;,</span><br><span class="line">              margin: 2,</span><br><span class="line">              minSize: new go.Size(10, NaN),</span><br><span class="line">              editable: true</span><br><span class="line">            &#125;,</span><br><span class="line">            new go.Binding(&quot;text&quot;).makeTwoWay())</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    load();  // load an initial diagram from some JSON text</span><br><span class="line"></span><br><span class="line">    // initialize the Palette that is on the left side of the page</span><br><span class="line">    myPalette =</span><br><span class="line">      objGo(go.Palette, &quot;myPaletteDiv&quot;,  // must name or refer to the DIV HTML element</span><br><span class="line">        &#123;</span><br><span class="line">          maxSelectionCount: 1,</span><br><span class="line">          nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram</span><br><span class="line">          linkTemplate: // simplify the link template, just in this Palette</span><br><span class="line">            objGo(go.Link,</span><br><span class="line">              &#123; // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,</span><br><span class="line">                // to line up the Link in the same manner we have to pretend the Link has the same location spot</span><br><span class="line">                locationSpot: go.Spot.Center,</span><br><span class="line">                selectionAdornmentTemplate:</span><br><span class="line">                  objGo(go.Adornment, &quot;Link&quot;,</span><br><span class="line">                    &#123; locationSpot: go.Spot.Center &#125;,</span><br><span class="line">                    objGo(go.Shape,</span><br><span class="line">                      &#123; isPanelMain: true, fill: null, stroke: &quot;deepskyblue&quot;, strokeWidth: 0 &#125;),</span><br><span class="line">                    objGo(go.Shape,  // the arrowhead</span><br><span class="line">                      &#123; toArrow: &quot;Standard&quot;, stroke: null &#125;)</span><br><span class="line">                  )</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                routing: go.Link.AvoidsNodes,</span><br><span class="line">                curve: go.Link.JumpOver,</span><br><span class="line">                corner: 5,</span><br><span class="line">                toShortLength: 4</span><br><span class="line">              &#125;,</span><br><span class="line">              new go.Binding(&quot;points&quot;),</span><br><span class="line">              objGo(go.Shape,  // the link path shape</span><br><span class="line">                &#123; isPanelMain: true, strokeWidth: 2 &#125;),</span><br><span class="line">              objGo(go.Shape,  // the arrowhead</span><br><span class="line">                &#123; toArrow: &quot;Standard&quot;, stroke: null &#125;)</span><br><span class="line">            ),</span><br><span class="line">          model: new go.GraphLinksModel([  // specify the contents of the Palette</span><br><span class="line">            &#123; text: &quot;Start&quot;, figure: &quot;Circle&quot;, fill: &quot;#00AD5F&quot; &#125;,</span><br><span class="line">            &#123; text: &quot;Step&quot; &#125;,</span><br><span class="line">            &#123; text: &quot;DB&quot;, figure: &quot;Database&quot;, fill: &quot;lightgray&quot; &#125;,</span><br><span class="line">            &#123; text: &quot;???&quot;, figure: &quot;Diamond&quot;, fill: &quot;lightskyblue&quot; &#125;,</span><br><span class="line">            &#123; text: &quot;End&quot;, figure: &quot;Circle&quot;, fill: &quot;#CE0620&quot; &#125;,</span><br><span class="line">            &#123; text: &quot;Comment&quot;, figure: &quot;RoundedRectangle&quot;, fill: &quot;lightyellow&quot; &#125;</span><br><span class="line">          ], [</span><br><span class="line">            // the Palette also has a disconnected Link, which the user can drag-and-drop</span><br><span class="line">            &#123; points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) &#125;</span><br><span class="line">          ])</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  function TopRotatingTool() &#123;</span><br><span class="line">    go.RotatingTool.call(this);</span><br><span class="line">  &#125;</span><br><span class="line">  go.Diagram.inherit(TopRotatingTool, go.RotatingTool);</span><br><span class="line"></span><br><span class="line">  /** @override */</span><br><span class="line">  TopRotatingTool.prototype.updateAdornments = function(part) &#123;</span><br><span class="line">    go.RotatingTool.prototype.updateAdornments.call(this, part);</span><br><span class="line">    var adornment = part.findAdornment(&quot;Rotating&quot;);</span><br><span class="line">    if (adornment !== null) &#123;</span><br><span class="line">      adornment.location = part.rotateObject.getDocumentPoint(new go.Spot(0.5, 0, 0, -30));  // above middle top</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  /** @override */</span><br><span class="line">  TopRotatingTool.prototype.rotate = function(newangle) &#123;</span><br><span class="line">    go.RotatingTool.prototype.rotate.call(this, newangle + 90);</span><br><span class="line">  &#125;;</span><br><span class="line">  // end of TopRotatingTool class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // Show the diagram&#x27;s model in JSON format that the user may edit</span><br><span class="line">  function save() &#123;</span><br><span class="line">    saveDiagramProperties();  // do this first, before writing to JSON</span><br><span class="line">    document.getElementById(&quot;mySavedModel&quot;).value = myDiagram.model.toJson();</span><br><span class="line">    myDiagram.isModified = false;</span><br><span class="line">  &#125;</span><br><span class="line">  function load() &#123;</span><br><span class="line">    myDiagram.model = go.Model.fromJson(document.getElementById(&quot;mySavedModel&quot;).value);</span><br><span class="line">    loadDiagramProperties();  // do this after the Model.modelData has been brought into memory</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function saveDiagramProperties() &#123;</span><br><span class="line">    myDiagram.model.modelData.position = go.Point.stringify(myDiagram.position);</span><br><span class="line">  &#125;</span><br><span class="line">  function loadDiagramProperties(e) &#123;</span><br><span class="line">    // set Diagram.initialPosition, not Diagram.position, to handle initialization side-effects</span><br><span class="line">    var pos = myDiagram.model.modelData.position;</span><br><span class="line">    if (pos) myDiagram.initialPosition = go.Point.parse(pos);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body onload=&quot;init()&quot;&gt;</span><br><span class="line">&lt;div id=&quot;sample&quot;&gt;</span><br><span class="line">  &lt;div style=&quot;width:100%; white-space:nowrap;&quot;&gt;</span><br><span class="line">    &lt;span style=&quot;display: inline-block; vertical-align: top; width:105px&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;myPaletteDiv&quot; style=&quot;border: solid 1px black; height: 620px&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span style=&quot;display: inline-block; vertical-align: top; width:80%&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;myDiagramDiv&quot; style=&quot;border: solid 1px black; height: 620px&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    This sample demonstrates the ability for the user to drag around a Link as if it were a Node.</span><br><span class="line">    When either end of the link passes over a valid port, the port is highlighted.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    The link-dragging functionality is enabled by setting some or all of the following properties:</span><br><span class="line">    &lt;a&gt;DraggingTool.dragsLink&lt;/a&gt;, &lt;a&gt;LinkingTool.isUnconnectedLinkValid&lt;/a&gt;, and</span><br><span class="line">    &lt;a&gt;RelinkingTool.isUnconnectedLinkValid&lt;/a&gt;.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    Note that a Link is present in the &lt;a&gt;Palette&lt;/a&gt; so that it too can be dragged out and onto</span><br><span class="line">    the main Diagram.  Because links are not automatically routed when either end is not connected</span><br><span class="line">    with a Node, the route is provided explicitly when that Palette item is defined.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    This also demonstrates several custom Adornments:</span><br><span class="line">    &lt;a&gt;Part.selectionAdornmentTemplate&lt;/a&gt;, &lt;a&gt;Part.resizeAdornmentTemplate&lt;/a&gt;, and</span><br><span class="line">    &lt;a&gt;Part.rotateAdornmentTemplate&lt;/a&gt;.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    Finally this sample demonstrates saving and restoring the &lt;a&gt;Diagram.position&lt;/a&gt; as a property</span><br><span class="line">    on the &lt;a&gt;Model.modelData&lt;/a&gt; object that is automatically saved and restored when calling &lt;a&gt;Model.toJson&lt;/a&gt;</span><br><span class="line">    and &lt;a&gt;Model.fromJson&lt;/a&gt;.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button id=&quot;SaveButton&quot; onclick=&quot;save()&quot;&gt;Save&lt;/button&gt;</span><br><span class="line">      &lt;button onclick=&quot;load()&quot;&gt;Load&lt;/button&gt;</span><br><span class="line">      Diagram Model saved in JSON format:</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;textarea id=&quot;mySavedModel&quot; style=&quot;width:100%;height:300px&quot;&gt;</span><br><span class="line">&#123; &quot;class&quot;: &quot;go.GraphLinksModel&quot;,</span><br><span class="line">  &quot;linkFromPortIdProperty&quot;: &quot;fromPort&quot;,</span><br><span class="line">  &quot;linkToPortIdProperty&quot;: &quot;toPort&quot;,</span><br><span class="line">  &quot;nodeDataArray&quot;: [</span><br><span class="line"> ],</span><br><span class="line">  &quot;linkDataArray&quot;: [</span><br><span class="line"> ]&#125;</span><br><span class="line">    &lt;/textarea&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>②</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;title&gt;Process Flow&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;A simple process flow or SCADA diagram editor, simulating equipment monitoring and control.&quot; /&gt;</span><br><span class="line">&lt;!-- Copyright 1998-2017 by Northwoods Software Corporation. --&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;../../gojs/go-debug.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script id=&quot;code&quot;&gt;</span><br><span class="line">  function init() &#123;</span><br><span class="line">    if (window.goSamples) goSamples();  // init for these samples -- you don&#x27;t need to call this</span><br><span class="line">    var $ = go.GraphObject.make;  // for more concise visual tree definitions</span><br><span class="line"></span><br><span class="line">    myDiagram =</span><br><span class="line">      $(go.Diagram, &quot;myDiagramDiv&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;grid.visible&quot;: true,</span><br><span class="line">          &quot;grid.gridCellSize&quot;: new go.Size(30, 20),</span><br><span class="line">          &quot;draggingTool.isGridSnapEnabled&quot;: true,</span><br><span class="line">          &quot;resizingTool.isGridSnapEnabled&quot;: true,</span><br><span class="line">          &quot;rotatingTool.snapAngleMultiple&quot;: 90,</span><br><span class="line">          &quot;rotatingTool.snapAngleEpsilon&quot;: 45,</span><br><span class="line">          &quot;undoManager.isEnabled&quot;: true</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    // when the document is modified, add a &quot;*&quot; to the title and enable the &quot;Save&quot; button</span><br><span class="line">    myDiagram.addDiagramListener(&quot;Modified&quot;, function(e) &#123;</span><br><span class="line">      var button = document.getElementById(&quot;SaveButton&quot;);</span><br><span class="line">      if (button) button.disabled = !myDiagram.isModified;</span><br><span class="line">      var idx = document.title.indexOf(&quot;*&quot;);</span><br><span class="line">      if (myDiagram.isModified) &#123;</span><br><span class="line">        if (idx &lt; 0) document.title += &quot;*&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (idx &gt;= 0) document.title = document.title.substr(0, idx);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    myDiagram.nodeTemplateMap.add(&quot;Process&quot;,</span><br><span class="line">      $(go.Node, &quot;Auto&quot;,</span><br><span class="line">        &#123; locationSpot: new go.Spot(0.5, 0.5), locationObjectName: &quot;SHAPE&quot;,</span><br><span class="line">          resizable: true, resizeObjectName: &quot;SHAPE&quot; &#125;,</span><br><span class="line">        new go.Binding(&quot;location&quot;, &quot;pos&quot;, go.Point.parse).makeTwoWay(go.Point.stringify),</span><br><span class="line">        $(go.Shape, &quot;Cylinder1&quot;,</span><br><span class="line">          &#123; name: &quot;SHAPE&quot;,</span><br><span class="line">            strokeWidth: 2,</span><br><span class="line">            fill: $(go.Brush, &quot;Linear&quot;,</span><br><span class="line">                    &#123; start: go.Spot.Left, end: go.Spot.Right,</span><br><span class="line">                      0: &quot;gray&quot;, 0.5: &quot;white&quot;, 1: &quot;gray&quot; &#125;),</span><br><span class="line">            minSize: new go.Size(50, 50),</span><br><span class="line">            portId: &quot;&quot;, fromSpot: go.Spot.AllSides, toSpot: go.Spot.AllSides</span><br><span class="line">          &#125;,</span><br><span class="line">          new go.Binding(&quot;desiredSize&quot;, &quot;size&quot;, go.Size.parse).makeTwoWay(go.Size.stringify)),</span><br><span class="line">        $(go.TextBlock,</span><br><span class="line">          &#123; alignment: go.Spot.Center, textAlign: &quot;center&quot;, margin: 5,</span><br><span class="line">            editable: true &#125;,</span><br><span class="line">          new go.Binding(&quot;text&quot;).makeTwoWay())</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    myDiagram.nodeTemplateMap.add(&quot;Valve&quot;,</span><br><span class="line">      $(go.Node, &quot;Vertical&quot;,</span><br><span class="line">        &#123; locationSpot: new go.Spot(0.5, 1, 0, -21), locationObjectName: &quot;SHAPE&quot;,</span><br><span class="line">          selectionObjectName: &quot;SHAPE&quot;, rotatable: true &#125;,</span><br><span class="line">        new go.Binding(&quot;angle&quot;).makeTwoWay(),</span><br><span class="line">        new go.Binding(&quot;location&quot;, &quot;pos&quot;, go.Point.parse).makeTwoWay(go.Point.stringify),</span><br><span class="line">        $(go.TextBlock,</span><br><span class="line">          &#123; alignment: go.Spot.Center, textAlign: &quot;center&quot;, margin: 5, editable: true &#125;,</span><br><span class="line">          new go.Binding(&quot;text&quot;).makeTwoWay(),</span><br><span class="line">          // keep the text upright, even when the whole node has been rotated upside down</span><br><span class="line">          new go.Binding(&quot;angle&quot;, &quot;angle&quot;, function(a) &#123; return a === 180 ? 180 : 0; &#125;).ofObject()),</span><br><span class="line">        $(go.Shape,</span><br><span class="line">          &#123; name: &quot;SHAPE&quot;,</span><br><span class="line">            geometryString: &quot;F1 M0 0 L40 20 40 0 0 20z M20 10 L20 30 M12 30 L28 30&quot;,</span><br><span class="line">            strokeWidth: 2,</span><br><span class="line">            fill: $(go.Brush, &quot;Linear&quot;, &#123; 0: &quot;gray&quot;, 0.35: &quot;white&quot;, 0.7: &quot;gray&quot; &#125;),</span><br><span class="line">            portId: &quot;&quot;, fromSpot: new go.Spot(1, 0.35), toSpot: new go.Spot(0, 0.35) &#125;)</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    myDiagram.linkTemplate =</span><br><span class="line">      $(go.Link,</span><br><span class="line">        &#123; routing: go.Link.AvoidsNodes, curve: go.Link.JumpGap, corner: 10, reshapable: true, toShortLength: 7 &#125;,</span><br><span class="line">        new go.Binding(&quot;points&quot;).makeTwoWay(),</span><br><span class="line">        // mark each Shape to get the link geometry with isPanelMain: true</span><br><span class="line">        $(go.Shape, &#123; isPanelMain: true, stroke: &quot;black&quot;, strokeWidth: 5 &#125;),</span><br><span class="line">        $(go.Shape, &#123; isPanelMain: true, stroke: &quot;gray&quot;, strokeWidth: 3 &#125;),</span><br><span class="line">        $(go.Shape, &#123; isPanelMain: true, stroke: &quot;white&quot;, strokeWidth: 1, name: &quot;PIPE&quot;, strokeDashArray: [10, 10] &#125;),</span><br><span class="line">        $(go.Shape, &#123; toArrow: &quot;Triangle&quot;, fill: &quot;black&quot;, stroke: null &#125;)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    load();</span><br><span class="line"></span><br><span class="line">    loop();  // animate some flow through the pipes</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function loop() &#123;</span><br><span class="line">    var diagram = myDiagram;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">      var oldskips = diagram.skipsUndoManager;</span><br><span class="line">      diagram.skipsUndoManager = true;</span><br><span class="line">      diagram.links.each(function(link) &#123;</span><br><span class="line">          var shape = link.findObject(&quot;PIPE&quot;);</span><br><span class="line">          var off = shape.strokeDashOffset - 2;</span><br><span class="line">          shape.strokeDashOffset = (off &lt;= 0) ? 20 : off;</span><br><span class="line">        &#125;);</span><br><span class="line">      diagram.skipsUndoManager = oldskips;</span><br><span class="line">      loop();</span><br><span class="line">    &#125;, 100);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function save() &#123;</span><br><span class="line">    document.getElementById(&quot;mySavedModel&quot;).value = myDiagram.model.toJson();</span><br><span class="line">    myDiagram.isModified = false;</span><br><span class="line">  &#125;</span><br><span class="line">  function load() &#123;</span><br><span class="line">    myDiagram.model = go.Model.fromJson(document.getElementById(&quot;mySavedModel&quot;).value);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body onload=&quot;init()&quot;&gt;</span><br><span class="line">&lt;div id=&quot;sample&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;myDiagramDiv&quot; style=&quot;border: solid 1px black; width:100%; height:500px&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    A &lt;em&gt;process flow diagram&lt;/em&gt; is commonly used in chemical and process engineering to indicate the general flow of plant processes and equipment.</span><br><span class="line">    A simple SCADA diagram, with animation of the flow along the pipes, is implemented here.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    The diagram displays the background grid layer by setting &lt;b&gt;grid.visible&lt;/b&gt; to true,</span><br><span class="line">    and also allows snapping to the grid using &lt;a&gt;DraggingTool.isGridSnapEnabled&lt;/a&gt;,</span><br><span class="line">    &lt;a&gt;ResizingTool.isGridSnapEnabled&lt;/a&gt;, and &lt;a&gt;RotatingTool.snapAngleMultiple&lt;/a&gt; alongside &lt;a&gt;RotatingTool.snapAngleEpsilon&lt;/a&gt;.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    The diagram also uses the &lt;b&gt;loop&lt;/b&gt; function to animate the links by adjusting the &lt;a&gt;Shape.strokeDashOffset&lt;/a&gt; every 100 ms.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button id=&quot;SaveButton&quot; onclick=&quot;save()&quot;&gt;Save&lt;/button&gt;</span><br><span class="line">      &lt;button onclick=&quot;load()&quot;&gt;Load&lt;/button&gt;</span><br><span class="line">      Diagram Model saved in JSON format:</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;textarea id=&quot;mySavedModel&quot; style=&quot;width:100%;height:300px&quot;&gt;</span><br><span class="line">&#123; &quot;class&quot;: &quot;go.GraphLinksModel&quot;,</span><br><span class="line">  &quot;nodeDataArray&quot;: [</span><br><span class="line">&#123;&quot;key&quot;:&quot;P1&quot;, &quot;category&quot;:&quot;Process&quot;, &quot;pos&quot;:&quot;150 120&quot;, &quot;text&quot;:&quot;Process&quot;&#125;,</span><br><span class="line">&#123;&quot;key&quot;:&quot;P2&quot;, &quot;category&quot;:&quot;Process&quot;, &quot;pos&quot;:&quot;330 320&quot;, &quot;text&quot;:&quot;Tank&quot;&#125;,</span><br><span class="line">&#123;&quot;key&quot;:&quot;V1&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;270 120&quot;, &quot;text&quot;:&quot;V1&quot;&#125;,</span><br><span class="line">&#123;&quot;key&quot;:&quot;P3&quot;, &quot;category&quot;:&quot;Process&quot;, &quot;pos&quot;:&quot;150 420&quot;, &quot;text&quot;:&quot;Pump&quot;&#125;,</span><br><span class="line">&#123;&quot;key&quot;:&quot;V2&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;150 280&quot;, &quot;text&quot;:&quot;VM&quot;, &quot;angle&quot;:270&#125;,</span><br><span class="line">&#123;&quot;key&quot;:&quot;V3&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;270 420&quot;, &quot;text&quot;:&quot;V2&quot;, &quot;angle&quot;:180&#125;,</span><br><span class="line">&#123;&quot;key&quot;:&quot;P4&quot;, &quot;category&quot;:&quot;Process&quot;, &quot;pos&quot;:&quot;450 140&quot;, &quot;text&quot;:&quot;Reserve Tank&quot;&#125;,</span><br><span class="line">&#123;&quot;key&quot;:&quot;V4&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;390 60&quot;, &quot;text&quot;:&quot;VA&quot;&#125;,</span><br><span class="line">&#123;&quot;key&quot;:&quot;V5&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;450 260&quot;, &quot;text&quot;:&quot;VB&quot;, &quot;angle&quot;:90&#125;</span><br><span class="line"> ],</span><br><span class="line">  &quot;linkDataArray&quot;: [</span><br><span class="line">&#123;&quot;from&quot;:&quot;P1&quot;, &quot;to&quot;:&quot;V1&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;P3&quot;, &quot;to&quot;:&quot;V2&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;V2&quot;, &quot;to&quot;:&quot;P1&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;P2&quot;, &quot;to&quot;:&quot;V3&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;V3&quot;, &quot;to&quot;:&quot;P3&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;V1&quot;, &quot;to&quot;:&quot;V4&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;V4&quot;, &quot;to&quot;:&quot;P4&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;V1&quot;, &quot;to&quot;:&quot;P2&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;P4&quot;, &quot;to&quot;:&quot;V5&quot;&#125;,</span><br><span class="line">&#123;&quot;from&quot;:&quot;V5&quot;, &quot;to&quot;:&quot;P2&quot;&#125;</span><br><span class="line"> ]&#125;</span><br><span class="line">    &lt;/textarea&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>追光者-再相会_材料1703</title>
      <link href="/%E8%BF%BD%E5%85%89%E8%80%85-%E5%86%8D%E7%9B%B8%E4%BC%9A_%E6%9D%90%E6%96%991703/"/>
      <url>/%E8%BF%BD%E5%85%89%E8%80%85-%E5%86%8D%E7%9B%B8%E4%BC%9A_%E6%9D%90%E6%96%991703/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=1392908905&auto=1&height=32"></iframe><p><strong>PS:听个歌吧！原谅我，Blog 的网站记录生活确实样式难看了些，后续持续改进哈，变得漂漂亮亮的，希望有个地方能够记录我们大学的点滴，收录了部分<a href="https://rainux.top/Gallery/">照片相册</a>，大家留存的可以发给我保存下来大家一起回忆！</strong></p><p><strong>曾经毕业季我们是过客，现在毕业季我们是主角。</strong></p><p><strong><img src="https://img-blog.csdnimg.cn/20210618202100839.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="材料1703_forever"></strong></p><p><strong>2017 年夏，如果说，你是海上的烟火，我是浪花的泡沫…… 伴随着烟火，我们都是追光者，来到了这座有光的大学——河南工业大学，郑州，河南。</strong></p><p><strong>故事的开始在进入群聊那一刻，注定未来的四年你是甩不掉我们滴。我们四年的相爱相杀拉开序幕。</strong></p><p><strong>第一次聚餐，座无虚席，单纯而简单，若老友相聚，真挚美好，结伴而归；</strong></p><p><strong>第一次荣誉，心理趣味运动会，感动亦感谢，一群最可爱的人儿；</strong><br><strong><img src="https://img-blog.csdnimg.cn/20210618202213188.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="趣味运动会"></strong></p><p><strong>第一次上课，慌乱寻不见教室，时间尚早不要慌，答抢不到首排座位，那时的我们简单而可爱；</strong></p><p><strong>第一次过圣诞节，这是我最有心的一次了，大爱你们！</strong></p><p><strong><img src="https://7.dusays.com/2021/06/22/cd7992d632323.jpg" alt="圣诞节小卡片小袜子"></strong></p><p><strong>第一次烧烤，没有助攻，全是主攻，耀哥的”灵魂烤串王“，天在喷火，但快乐最大；</strong></p><p><strong>第一次 DIY 轰趴，玉杰的酸奶水果捞、炸虾片，一起看《千与千寻》，一起吃火锅……</strong><br><strong><img src="https://img-blog.csdnimg.cn/20210618203637116.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="火锅大集结，太开心了"></strong><br><strong><img src="https://7.dusays.com/2021/06/21/f66f2275755ae.jpg" alt="这是什么鬼"></strong></p><p><strong>第一次上榜共青团中央的团日活动，激动了好一会，”人人喂我，我为人人“；</strong></p><p><strong><img src="https://img-blog.csdnimg.cn/20210618202755539.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="人人喂我"></strong></p><p><strong>第一次操场，零食遍布，盘腿游戏，享受运动会后的安静与释放，材三寂寞，无人能懂；</strong></p><p><strong>第一次饺子宴，哦不对，也不知道是饺子还是包子了，大家仿佛对面粉敷脸情有独钟，偷吃了几个”饺子包“，哈哈哈；</strong></p><p><strong><img src="https://img-blog.csdnimg.cn/20210618203325343.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="这饺子真&quot;包&quot;"></strong><br><strong><img src="https://img-blog.csdnimg.cn/20210618203359999.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="认真的包子，呸，饺子"></strong></p><p><strong>第一次金工实习，仿佛发现了宝藏，左转转，又瞧瞧，充满了未知感，传说中的“造锤子”终于来了；</strong><br><strong><img src="https://img-blog.csdnimg.cn/20210618202451420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="锤子大角逐"></strong></p><p><strong>第一次领毕业学位证，心里莫名泪下，我们人已然聚不齐了……</strong></p><p><strong>不知何时起，我们高数课齐刷刷地赶到了第一排，铃声响了，抬头只能看到一群“伏桌魔”，上课那不听使唤的头老被地心引力所影响，开始了梦幻般的现实与梦境的自由切换；</strong></p><p><strong>不知何时起，上课习惯性地走到了最后排，四顾望望，然后中意倒二排，正如某某某说的“咱就是那低调的人，没办法呀”。</strong></p><p><strong>太多了，多到我想去回忆，却害怕转眼间飘散如烟。一起压过的马路，一起吃过的”辣八块“，一起住过的”南公寓豪华大间“，一起搬过的宿舍，一起过圣诞，一起造锤子，一起新生篮球赛，一起期末疯狂找资料，图书馆天天见……</strong></p><p><strong>是否勾起了你的记忆，如果你的眼睛不知怎的模糊湿润了，不要纳闷，那是三班的回忆在和你打招呼，我们不善表达，孰不知情谊多深。我想说也期望：我们以后肯定会在街上开着宝马相撞，然后骂骂咧咧一场，再去吃饭！</strong></p><p><strong>都是头一次上大学，凭什么让着你！同样地，我也不想我们输给其他班级，想给班级争来荣誉，却丢掉了最宝贵的陪伴与欢笑。曾经班长，有过荣誉、有过欢笑、有过失败、有过嘲笑、有过质疑、有过无视，从未辩解，若重来，仍然为班级争来荣誉，但更多的是争来朝夕的陪伴与欢笑。</strong></p><p><strong>我有三愿，也定会实现。</strong></p><p><strong>一愿四年情谊永驻心田，欢声笑语永珍藏；二愿各放异彩，遍布中华；三愿常常相聚，勿忘四年情。</strong><br><strong><img src="https://img-blog.csdnimg.cn/20210618203718768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="找你们蹭吃蹭喝！"></strong></p>]]></content>
      
      
      <categories>
          
          <category> 大学往事&amp;毕业季 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Js高级---你所不知道的函数的定义和调用！</title>
      <link href="/Js%E9%AB%98%E7%BA%A7---%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8%EF%BC%81/"/>
      <url>/Js%E9%AB%98%E7%BA%A7---%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-0-函数的定义方式"><a href="#1-0-函数的定义方式" class="headerlink" title="1.0 函数的定义方式"></a>1.0 函数的定义方式</h3><ul><li><p>方式1： 函数声明方式 function 关键字 (命名函数)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式2： 函数表达式(匿名函数)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式3： new Function()  （函数也是对象，所以可以new）（了解）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;console.log(a + b)&#x27;</span>);</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>..., <span class="string">&#x27;函数体&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>Function 里面参数都必须是字符串格式</li><li>第三种方式执行效率低，也不方便书写，因此较少使用</li><li>所有函数都是 Function 的实例(对象)  </li><li>函数也属于对象</li></ul></li></ul><h3 id="2-0-函数的调用"><a href="#2-0-函数的调用" class="headerlink" title="2.0 函数的调用"></a>2.0 函数的调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. 普通函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> fn(); </span><br><span class="line"><span class="comment">/* 2. 对象的方法 */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.sayHi();</span><br><span class="line"><span class="comment">/* 3. 构造函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> Star();</span><br><span class="line"><span class="comment">/* 4. 绑定事件函数*/</span></span><br><span class="line"> btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;   <span class="comment">// 点击了按钮就可以调用这个函数</span></span><br><span class="line"><span class="comment">/* 5. 定时器函数*/</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="number">1000</span>);  这个函数是定时器自动<span class="number">1</span>秒钟调用一次</span><br><span class="line"><span class="comment">/* 6. 立即执行函数(自调用函数)*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>reverse()使用方法及常见问题</title>
      <link href="/reverse()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/reverse()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>Header：</strong> 原创不易，还请大家不吝指导赐教，Code is never die！</p><p>ps：本着让更多人不止解决问题，更能够学到一点点方法的目的。</p><p>今天给大家分享一下 JavaScript 中最实用的方法之一——reverse()。</p><h4 id="一、简单用法"><a href="#一、简单用法" class="headerlink" title="一、简单用法"></a>一、简单用法</h4><p>相信身为前端工程师或者正在成为前端工程师的小伙伴都对它并不陌生，甚至非常熟悉，主要作用就是用于颠倒数组中元素的顺序，这里举个例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrData = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;your&#x27;</span>, <span class="string">&#x27;voice&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arrData); <span class="comment">// [&quot;I&quot;,&quot;like&quot;,&quot;your&quot;,&quot;voice&quot;]</span></span><br><span class="line"><span class="keyword">var</span> arrData2 = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;your&#x27;</span>, <span class="string">&#x27;voice&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arrData2.reverse()); <span class="comment">// [&quot;voice&quot;,&quot;your&quot;,&quot;like&quot;,&quot;I&quot;,]</span></span><br></pre></td></tr></table></figure><p>这就是最简单的例子，能够使数组元素顺序发生变化，从而满足前端项目的需要。</p><h4 id="二、理解含义"><a href="#二、理解含义" class="headerlink" title="二、理解含义"></a>二、理解含义</h4><p>当然本篇小记并不是简单记一下流水账，说一下定义而已。重点在于讲一下颠倒数组元素之后发生的那些事儿。且听后面慢慢分析~~<br>接着上面的这个例子来说，</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrData = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;your&#x27;</span>, <span class="string">&#x27;voice&#x27;</span>];</span><br><span class="line"><span class="comment">//第一次 arrData</span></span><br><span class="line"><span class="built_in">console</span>.log(arrData); <span class="comment">// [&quot;I&quot;,&quot;like&quot;,&quot;your&quot;,&quot;voice&quot;]</span></span><br><span class="line"><span class="comment">//reverse()</span></span><br><span class="line"><span class="built_in">console</span>.log(arrData.reverse()); <span class="comment">// [&quot;voice&quot;,&quot;your&quot;,&quot;like&quot;,&quot;I&quot;]</span></span><br><span class="line"><span class="comment">//第一次 arrData</span></span><br><span class="line"><span class="built_in">console</span>.log(arrData); <span class="comment">// [&quot;voice&quot;,&quot;your&quot;,&quot;like&quot;,&quot;I&quot;]</span></span><br></pre></td></tr></table></figure><p>如前面所述，定义了两个变量分别单独打印原变量和<code>reverse()</code>后的数据都是正常的，但这里，打印同一个数据时就出现了“意外惊喜”，为什么第一次打印的<code>arrData</code>和第二次打印的<code>arrData</code>不一样呢？原因就在于：reverse()方法改变原数组，而不创建新数组。什么意思呢，我们分析一下整个过程：</p><p>① 第一次正常打印<code>arrData</code>数据，也就是定义的值；</p><p>② 第二步打印<code>arrData.reverse()</code>，同样是正常的颠倒数组元素打印。这里颠倒所发生的行为是颠倒然后打印出来，<strong>但是</strong> 随之改变的是 <code>arrData = [&quot;voice&quot;,&quot;your&quot;,&quot;like&quot;,&quot;I&quot;]</code>；</p><p>③ 第二次打印 arrData，不言而喻，上一步<code>arrData.reverse()</code>已然改变了数据，故第二次打印的是改变后的数据。</p><h4 id="三、深入使用"><a href="#三、深入使用" class="headerlink" title="三、深入使用"></a>三、深入使用</h4><p>代码的世界如此美妙。接下来再进一步升华用法，不要走开，依然精彩…</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrData = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;your&#x27;</span>, <span class="string">&#x27;voice&#x27;</span>];</span><br><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="built_in">console</span>.log(arrData + arrData.reverse()); <span class="comment">// voice,your,like,Ivoice,your,like,I</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrData2 = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;your&#x27;</span>, <span class="string">&#x27;voice&#x27;</span>];</span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="built_in">console</span>.log(arrData2 + <span class="string">&#x27;~&#x27;</span> + arrData2.reverse()); <span class="comment">// I,like,your,voice~voice,your,like,I</span></span><br></pre></td></tr></table></figure><p>我只是简单的在中间多加了一个字符串<code>~</code>，出现了两种截然不同的结果是为什么呢？其实还是万变不离其宗，深入理解：<strong>reverse()方法改变原数组，而不创建新数组</strong> 接下来逐个分析</p><p>第一种方式：定义 arrData，打印时拿到变量 arrData，然后再拿到变量 arrData.reverse()，此时会修改原定义的 arrData，所以打印时的变量 arrData 就随之改变，此时<code>+</code>两边都是数组会被强制转换为字符串，然后拼接，最后一起打印出来，即出现代码中所示结果；</p><p>第二种方式：定义 arrData，打印括号内拿到变量 arrData，然后执行<code>+&quot;~&quot;</code>(这里需要知道，代码执行顺序都是从左至右)，这里变量 arrData 会被强制转化为字符串 String 类型，然后再拿到变量 arrData.reverse()（此时前面已经被强制转化 String 类型，所以不会再受后面影响），接下来就是字符串<code>&quot;I,like,your,voice~&quot;+arrData.reverse()</code>，也会转化为字符串然后拼接，最后打印出来。</p><p><strong>总结：</strong> 字符串不会被“策反”而发生改变，而变量会随变量值是什么，它就跟着是什么。</p><p><strong>Ending…</strong><br>好啦，又一次地怀着激动的心啰里啰唆竟然码了 2k，主要的是想要给大家分享拿到问题的整个流程和想法，咱们讨论区相互学习，还望各位支持一下~~~</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试基本---理解 “类“和 “对象“</title>
      <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E7%90%86%E8%A7%A3%20%E2%80%9C%E7%B1%BB%E2%80%9C%E5%92%8C%20%E2%80%9C%E5%AF%B9%E8%B1%A1%E2%80%9C/"/>
      <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E7%90%86%E8%A7%A3%20%E2%80%9C%E7%B1%BB%E2%80%9C%E5%92%8C%20%E2%80%9C%E5%AF%B9%E8%B1%A1%E2%80%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h3 id="2-类"><a href="#2-类" class="headerlink" title="2. 类"></a>2. 类</h3><h4 id="2-1-类介绍"><a href="#2-1-类介绍" class="headerlink" title="2.1 类介绍"></a>2.1 类介绍</h4><ul><li><p>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</p></li><li><p>类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</p></li><li><p>类，对象，面向对象<strong>总结：</strong></p><p><strong>类</strong>抽象了对象的公共部分，它泛指某一大类（class）</p><p><strong>对象</strong>特指某一个，通过类实例化一个具体的对象</p><p><strong>面向对象</strong>的思维特点:</p><ol><li>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板)</li><li>对类进行实例化, 获取类的对象<ol><li>实例：实际的例子，对象</li><li>实例化：通过类的构造函数，来创建对象，实例</li></ol></li></ol></li></ul><h4 id="2-2-创建类"><a href="#2-2-创建类" class="headerlink" title="2.2 创建类"></a>2.2 创建类</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//步骤1 定义类：使用class关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span> </span>&#123;</span><br><span class="line"><span class="comment">// class body</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//步骤2 创建实例：使用定义的类创建实例  注意new关键字</span></span><br><span class="line"><span class="keyword">var</span> xx = <span class="keyword">new</span> name();</span><br><span class="line"></span><br><span class="line"><span class="comment">// *****例子：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star();</span><br></pre></td></tr></table></figure><p>问题：</p><p>但是这么创建的对象，没有属性和方法呀，怎么办？</p><p>需要用到<strong>构造函数</strong>。</p><h4 id="2-3-类创建添加属性和方法"><a href="#2-3-类创建添加属性和方法" class="headerlink" title="2.3 类创建添加属性和方法"></a>2.3 类创建添加属性和方法</h4><h5 id="1-构造函数介绍"><a href="#1-构造函数介绍" class="headerlink" title="1. 构造函数介绍"></a>1. 构造函数介绍</h5><ul><li>constructor() 方法是类的构造函数(默认方法)，用于传递参数,返回实例对象</li><li>通过 new 命令生成对象实例时，自动调用该方法</li><li>如果没有显示定义, 类内部会自动给我们创建一个 constructor()</li><li><strong>构造函数的作用：给对象添加（构造）属性</strong></li></ul><h5 id="2-构造函数添加属性"><a href="#2-构造函数添加属性" class="headerlink" title="2. 构造函数添加属性"></a>2. 构造函数添加属性</h5><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//步骤1 在类中定义构造函数constructor，函数名固定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line"><span class="comment">//定义形参</span></span><br><span class="line"><span class="built_in">this</span>.name = name; <span class="comment">//将形参赋值给this对象的对应属性</span></span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤2 在实例化对象的时候，传递实参</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Person(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>); <span class="comment">//这里的实参默认传递给Person类中的constructor</span></span><br><span class="line"><span class="built_in">console</span>.log(ldh.name); <span class="comment">//刘德华</span></span><br></pre></td></tr></table></figure><p><strong>注意事项:</strong></p><ol><li>通过 class 关键字创建类，类名我们还是习惯性定义首字母大写</li><li>类里面有个 constructor 函数，可以接受传递过来的参数，同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时，就会自动调用这个函数，如果我们不写这个函数,类也会自动生成这个函数</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加 function</li></ol><h5 id="3-类中添加方法"><a href="#3-类中添加方法" class="headerlink" title="3. 类中添加方法"></a>3. 类中添加方法</h5><ul><li>语法</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//步骤1 添加普通方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">      <span class="built_in">this</span>.btn = ...</span><br><span class="line">      <span class="built_in">this</span>.btn.onclick = <span class="built_in">this</span>.say;</span><br><span class="line">      <span class="comment">// this.btn.onclick(); --- this.btn.say()</span></span><br><span class="line">       <span class="built_in">this</span>.btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="comment">//-------------------------------------------&gt;注意,方法与方法之间不需要添加逗号</span></span><br><span class="line">   <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">var</span> say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤2  通过对象调用方法</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Person(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">ldh.say()</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>我们类里面所有的函数不需要写 function</li><li><strong>多个函数方法之间不需要添加逗号分隔</strong></li></ol><h4 id="2-4-类的继承"><a href="#2-4-类的继承" class="headerlink" title="2.4 类的继承"></a>2.4 类的继承</h4><ul><li>现实中的继承：子承父业，比如我们都继承了父亲的姓。</li><li>程序中的继承：子类可以继承父类的一些属性和方法。</li><li><strong>类的继承：为了复用代码</strong></li><li>语法</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">surname</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.surname = surname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;你的姓是&#x27;</span> + <span class="built_in">this</span>.surname);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> damao = <span class="keyword">new</span> Son(<span class="string">&#x27;刘&#x27;</span>);</span><br><span class="line">damao.say(); <span class="comment">//结果为 你的姓是刘</span></span><br></pre></td></tr></table></figure><ul><li>补充：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Son如果只是要继承父类的方法，什么都不用写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="title">money</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.money();</span><br><span class="line"><span class="comment">// 2. Son如果要在父类的基础之上做扩展，就可以重写方法（重新书写）</span></span><br><span class="line"><span class="comment">// Son可以扩展属性，也可以扩展方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.x = x;</span><br><span class="line"><span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.x + <span class="built_in">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="comment">// (1)重写父类的构造函数 (主要是为了扩展属性)</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">x, y, z</span>)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(x, y); <span class="comment">//调用了父类中的构造函数</span></span><br><span class="line"><span class="comment">//相当于：</span></span><br><span class="line"><span class="comment">// Father(x,y);</span></span><br><span class="line"><span class="comment">//相当于：</span></span><br><span class="line"><span class="comment">// this.x = x; //调用父类的构造函数，让父类帮助Son添加x，y属性</span></span><br><span class="line"><span class="comment">// this.y = y;</span></span><br><span class="line"><span class="built_in">this</span>.z = z; <span class="comment">// son新增的属性，需要自己处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//（2） 自己新增的方法</span></span><br><span class="line"><span class="function"><span class="title">sum2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.x + <span class="built_in">this</span>.y + <span class="built_in">this</span>.z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//（3）重写父类的普通方法</span></span><br><span class="line"><span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="comment">// console.log(this.x + this.y);</span></span><br><span class="line"><span class="comment">//既然要重写，肯定是要与父亲不一样，所以，改为以下需求</span></span><br><span class="line"><span class="comment">//求 x  到 y 的和</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">son.sum2();</span><br><span class="line">son.sum();</span><br></pre></td></tr></table></figure><ul><li>重写：<ul><li>什么是重写：重新定义父类继承过来的方法</li><li>什么时候重写：子类要对父类方法进行扩展时，就可以重写方法</li></ul></li></ul><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-element el-table点击行展开，并且收起其他行</title>
      <link href="/vue-element%20el-table%E7%82%B9%E5%87%BB%E8%A1%8C%E5%B1%95%E5%BC%80%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%94%B6%E8%B5%B7%E5%85%B6%E4%BB%96%E8%A1%8C/"/>
      <url>/vue-element%20el-table%E7%82%B9%E5%87%BB%E8%A1%8C%E5%B1%95%E5%BC%80%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%94%B6%E8%B5%B7%E5%85%B6%E4%BB%96%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p>代码行中已标注实现点击行展开，并且自动收起其他行的相关设置和代码。</p><p>el-table表格是绑定在<strong>vue实例</strong>上的，<strong>相关配置、绑定数据、事件</strong> 将这三部分可以直接<strong>Copy</strong>到自己的项目相关位置，无需修改可以直接使用 !</p><p><strong>1. el-table 相关配置</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:row-key=<span class="string">&quot;getRowKeys&quot;</span> <span class="comment">// 每一行的唯一key值</span></span><br><span class="line"></span><br><span class="line">:expand-row-keys=<span class="string">&quot;expands&quot;</span> <span class="comment">// 设置目前的展开行(须同时设置row-key)</span></span><br><span class="line"></span><br><span class="line">@expand-change=<span class="string">&quot;expandSelect&quot;</span> <span class="comment">// 对某行展开/关闭触发</span></span><br><span class="line"></span><br><span class="line">@row-click=<span class="string">&quot;clickTable&quot;</span> <span class="comment">// 点击单行事件</span></span><br></pre></td></tr></table></figure><p><strong>2.  绑定数据</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 展开行,数组形式</span></span><br><span class="line"><span class="attr">expands</span>: [],</span><br><span class="line"><span class="comment">// 每行的唯一key值 用其id表示</span></span><br><span class="line"><span class="function"><span class="title">getRowKeys</span>(<span class="params">row</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> row.id;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>3.  点击行与展开事件</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击行展开事件</span></span><br><span class="line">   <span class="function"><span class="title">clickTable</span>(<span class="params">row, index, e</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.$refs.refTable.toggleRowExpansion(row);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 折叠面板每次只能展开一行</span></span><br><span class="line">   <span class="function"><span class="title">expandSelect</span>(<span class="params">row, expandedRows</span>)</span> &#123;</span><br><span class="line">     <span class="comment">// console.log(&#x27;expandedRows&#x27;, expandedRows)</span></span><br><span class="line">     <span class="comment">// console.log(&#x27;row&#x27;, row)</span></span><br><span class="line">     <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">     <span class="keyword">if</span> (expandedRows.length) &#123;</span><br><span class="line">       that.expands = [];</span><br><span class="line">       <span class="keyword">if</span> (row) &#123;</span><br><span class="line">         that.expands.push(row.id); <span class="comment">// 每次push进去的是每行的ID</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       that.expands = []; <span class="comment">// 默认不展开</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p><strong>完整代码提供参考</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag"><span class="attr">:row-key</span>=<span class="string">&quot;getRowKeys&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">:expand-row-keys</span>=<span class="string">&quot;expands&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">expand-change</span>=<span class="string">&quot;expandSelect&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">row-click</span>=<span class="string">&quot;clickTable&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">element-loading-text</span>=<span class="string">&quot;拼命加载中&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">element-loading-spinner</span>=<span class="string">&quot;el-icon-loading&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">element-loading-background</span>=<span class="string">&quot;rgba(0, 0, 0, 0.8)&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">:data</span>=<span class="string">&quot;typeList&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">ref</span>=<span class="string">&quot;refTable&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;expand&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag"><span class="attr">:data</span>=<span class="string">&quot;handleData(holeData,outer.row)&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">width: 100%;</span></span></span><br><span class="line"><span class="string"><span class="tag">margin: 0 auto;</span></span></span><br><span class="line"><span class="string"><span class="tag">border: 1px solid;</span></span></span><br><span class="line"><span class="string"><span class="tag">border-color: #00a1d6;</span></span></span><br><span class="line"><span class="string"><span class="tag">border-top-left-radius: 5px;</span></span></span><br><span class="line"><span class="string"><span class="tag">border-top-right-radius: 5px;</span></span></span><br><span class="line"><span class="string"><span class="tag">border-bottom-color: transparent;</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;IP&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;props.row.ip&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;端口&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;props.row.duankou&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-on:click</span>=<span class="string">&quot;selectconnect(props.row,outer.row)&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">icon</span>=<span class="string">&quot;el-icon-s-data&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>弱口令破解&lt;/el-button</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;类型&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;props.row.netType&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> testarea = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#workspace&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">expands</span>: [],</span><br><span class="line">    <span class="function"><span class="title">getRowKeys</span>(<span class="params">row</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> row.id;</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 点击行展开事件</span></span><br><span class="line">    <span class="function"><span class="title">clickTable</span>(<span class="params">row, index, e</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$refs.refTable.toggleRowExpansion(row);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 折叠面板每次只能展开一行</span></span><br><span class="line">    <span class="function"><span class="title">expandSelect</span>(<span class="params">row, expandedRows</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;expandedRows&#x27;, expandedRows)</span></span><br><span class="line">      <span class="comment">// console.log(&#x27;row&#x27;, row)</span></span><br><span class="line">      <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (expandedRows.length) &#123;</span><br><span class="line">        that.expands = [];</span><br><span class="line">        <span class="keyword">if</span> (row) &#123;</span><br><span class="line">          that.expands.push(row.id); <span class="comment">// 每次push进去的是每行的ID</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        that.expands = []; <span class="comment">// 默认不展开</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>PS:</strong><a href="https://rainux.top/"> 博主博客主页(Rainux)，精彩继续，欢迎来访！</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeError_ util.print is not a function 用node.js安装hotnode后启动报错</title>
      <link href="/TypeError_%20util.print%20is%20not%20a%20function%20%E7%94%A8node.js%E5%AE%89%E8%A3%85hotnode%E5%90%8E%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/"/>
      <url>/TypeError_%20util.print%20is%20not%20a%20function%20%E7%94%A8node.js%E5%AE%89%E8%A3%85hotnode%E5%90%8E%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//终端安装插件</span></span><br><span class="line">npm install -g hotnode</span><br></pre></td></tr></table></figure><p>直接展示错误地方：<br><img src="https://img-blog.csdnimg.cn/2021042019323395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击下划线处部分进入 hotloader.js 中（长按 ctrl+鼠标点击）进入自动定位到下方位置<br>修改代码<code>util.print -&gt;console.log</code>保存，重新跑项目<br><img src="https://img-blog.csdnimg.cn/20210420193304705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最终成功跑项目：<br><img src="https://img-blog.csdnimg.cn/2021042019332219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Js高级---你所不知道的正则表达式的神秘！</title>
      <link href="/Js%E9%AB%98%E7%BA%A7---%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%A5%9E%E7%A7%98%EF%BC%81/"/>
      <url>/Js%E9%AB%98%E7%BA%A7---%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%A5%9E%E7%A7%98%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die ！</strong></p><p>今天我们一起揭开JS中正则表达式的神秘面纱！</p><h2 id="1-正则表达式概述"><a href="#1-正则表达式概述" class="headerlink" title="1. 正则表达式概述"></a>1. 正则表达式概述</h2><h3 id="1-1-什么是正则表达式"><a href="#1-1-什么是正则表达式" class="headerlink" title="1.1 什么是正则表达式"></a>1.1 什么是正则表达式</h3><ul><li>正则表达式（ Regular Expression ）是<strong>用于匹配字符串中字符组合的模式</strong></li><li>在JavaScript中，正则表达式也是对象</li><li>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，<ul><li>例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(<strong>匹配</strong>)。</li><li>此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(<strong>替换</strong>)，或从字符串中获取我们想要的特定部分(<strong>提取</strong>)等 。</li></ul></li><li>其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。</li><li>总结：正则表达式：<strong>是由特殊字符组成的式子，用于匹配字符串</strong>。</li></ul><h3 id="1-2-正则表达式的特点"><a href="#1-2-正则表达式的特点" class="headerlink" title="1.2 正则表达式的特点"></a>1.2 正则表达式的特点</h3><ol><li>灵活性、逻辑性和功能性非常的强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂。比如：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$</li><li>实际开发，一般都是<strong>直接复制写好的正则表达式。</strong> 但是要求会使用正则表达式并且根据实际情况修改正则表达式比如用户名:   /^[a-z0-9_-]{3,16}$/</li></ol><h2 id="2-正则表达式在js中的使用"><a href="#2-正则表达式在js中的使用" class="headerlink" title="2. 正则表达式在js中的使用"></a>2. 正则表达式在js中的使用</h2><h3 id="2-1-正则表达式的创建"><a href="#2-1-正则表达式的创建" class="headerlink" title="2.1 正则表达式的创建"></a>2.1 正则表达式的创建</h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p>方式一：通过<strong>调用RegExp对象的构造函数创建</strong> </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(regexp);</span><br></pre></td></tr></table></figure><p>方式二：利用<strong>字面量创建 正则表达式</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-测试正则表达式"><a href="#2-2-测试正则表达式" class="headerlink" title="2.2 测试正则表达式"></a>2.2 测试正则表达式</h3><ul><li>test() 正则对象方法，用于检测字符串是否符合该规则</li><li>该对象会返回 true 或 false，其参数是测试字符串</li><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">regexObj.test(str)</span><br></pre></td></tr></table></figure><ol><li>regexObj 是写的正则表达式</li><li>str 我们要测试的文本</li><li>就是检测str文本是否符合我们写的正则表达式规范</li></ol><ul><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="number">123</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="3-正则表达式中的特殊字符"><a href="#3-正则表达式中的特殊字符" class="headerlink" title="3. 正则表达式中的特殊字符"></a>3. 正则表达式中的特殊字符</h2><h3 id="3-1-正则表达式的组成"><a href="#3-1-正则表达式的组成" class="headerlink" title="3.1 正则表达式的组成"></a>3.1 正则表达式的组成</h3><ul><li><p>一个正则表达式可以<strong>由简单的字符构成</strong>，比如 /abc/</p></li><li><p><strong>也可以是简单和特殊字符的组合</strong>，比如 /ab*c/ </p></li><li><p>其中<strong>特殊字符也被称为元字符</strong>，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等</p></li><li><p>特殊字符非常多，可以参考： </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><p>jQuery 手册：正则表达式部分</p><p><a href="http://tool.oschina.net/regex">正则测试工具</a></p></li></ul><h3 id="3-2-边界符"><a href="#3-2-边界符" class="headerlink" title="3.2 边界符"></a>3.2 边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 ^和 $ 在一起，表示必须是精确匹配。</p><p>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>; <span class="comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;abcd&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;aabcd&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---------------------------&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---------------------------&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^abc$/</span>; <span class="comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;abcabc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="3-3-字符类"><a href="#3-3-字符类" class="headerlink" title="3.3 字符类"></a>3.3 字符类</h3><ul><li>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了</li><li>所有可供选择的字符都放在方括号内</li></ul><h4 id="3-3-1-方括号"><a href="#3-3-1-方括号" class="headerlink" title="3.3.1 [ ] 方括号"></a>3.3.1 [ ] 方括号</h4><p>表示有一系列字符可供选择，只要匹配其中一个就可以了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>; <span class="comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;andy&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;baby&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;color&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;red&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>; <span class="comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;aa&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;b&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;c&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span> <span class="comment">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;z&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;A&#x27;</span>));<span class="comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//字符组合</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9]$/</span>; <span class="comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[^a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;B&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="number">8</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;!&#x27;</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>[ ]：区间符，只要在区间内，就匹配成功</li><li>-：到</li><li>[^]：取反符</li></ul><h4 id="3-3-2-量词符"><a href="#3-3-2-量词符" class="headerlink" title="3.3.2 量词符"></a>3.3.2 量词符</h4><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次（*<strong>，理解为任意</strong>）(0,1,n)</td></tr><tr><td>+</td><td>重复1次或更多次（+：代表大于等于1的数。以0为分界线，左边是负数-，右边是正数+）</td></tr><tr><td>?</td><td>重复0次或1次 （？问号，理解为有没有）</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次(没有第二个数字,那就意味着是?,没有上界)</td></tr><tr><td>{n,m}</td><td>重复n到m次 （{}：区间符号，次数区间）</td></tr></tbody></table><p>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. * 相当于 &gt;= 0 可以出现0次或者很多次 </span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a*$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. + 相当于 &gt;= 1 可以出现1次或者很多次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a+$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"><span class="comment">// 3. ?  相当于 1 || 0</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a?$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"><span class="comment">// 4. &#123;3 &#125; 就是重复3次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line"><span class="comment">// 5. &#123;3, &#125;  大于等于3</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line"><span class="comment">// 6. &#123;3, 16&#125;  大于等于3 并且 小于等于16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,16&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaa&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="3-3-3-用户名表单验证"><a href="#3-3-3-用户名表单验证" class="headerlink" title="3.3.3 用户名表单验证"></a>3.3.3 用户名表单验证</h4><p>功能需求:</p><ol><li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色<br><img src="https://img-blog.csdnimg.cn/20210707091818555.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210707091830830.png" alt="在这里插入图片描述"></li></ol><p>分析:</p><ol><li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位.</li><li>首先准备好这种正则表达式模式/^[a-zA-Z0-9-_]{6,16}$/</li><li>当表单失去焦点就开始验证. </li><li>如果符合正则规范, 则让后面的span标签添加 right类.</li><li>如果不符合正则规范, 则让后面的span标签添加 wrong类.</li></ol><p>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;uname&quot;</span>&gt; <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">//  量词是设定某个模式出现的次数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>; <span class="comment">// 这个模式用户只能输入英文字母 数字 下划线 中划线</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">var</span> uname = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.uname&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">var</span> span = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;span&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> uname.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">if</span> (reg.test(<span class="built_in">this</span>.value)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="built_in">console</span>.log(<span class="string">&#x27;正确的&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   span.className = <span class="string">&#x27;right&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   span.innerHTML = <span class="string">&#x27;用户名格式输入正确&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="built_in">console</span>.log(<span class="string">&#x27;错误的&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   span.className = <span class="string">&#x27;wrong&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   span.innerHTML = <span class="string">&#x27;用户名格式输入不正确&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="3-3-4-括号总结"><a href="#3-3-4-括号总结" class="headerlink" title="3.3.4 括号总结"></a>3.3.4 括号总结</h4><p>1.大括号  量词符.  里面表示重复次数</p><p>2.中括号 字符集合。匹配方括号中的任意字符. </p><p>3.小括号表示优先级</p><p><a href="https://c.runoob.com/">正则表达式在线测试</a></p><h3 id="3-4-预定义类"><a href="#3-4-预定义类" class="headerlink" title="3.4 预定义类"></a>3.4 预定义类</h3><p>预定义类指的是<strong>某些常见模式的简写方式</strong><br><img src="https://img-blog.csdnimg.cn/20210707091904904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>理解：</p><p>d：digit ，数字</p><p>w：word，单词</p><p>s：space，空白，间隔</p><p><strong>案例:验证座机号码</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span><br><span class="line"><span class="comment">//注意座机号码老师写错了，如果按照上述的方式发现以下问题：</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;010-123456789&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;010-1234567890&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="comment">//需要改为：</span></span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;$|^\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br></pre></td></tr></table></figure><p><strong>表单验证案例</strong></p><p>（表单验证(上)）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机号验证:/^1[3|4|5|7|8][0-9]&#123;9&#125;$/;</span></span><br><span class="line"><span class="comment">//验证通过与不通过更换元素的类名与元素中的内容</span></span><br><span class="line"> <span class="keyword">if</span> (reg.test(<span class="built_in">this</span>.value)) &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;正确的&#x27;);</span></span><br><span class="line">    <span class="built_in">this</span>.nextElementSibling.className = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.nextElementSibling.innerHTML = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// console.log(&#x27;不正确&#x27;);</span></span><br><span class="line">      <span class="built_in">this</span>.nextElementSibling.className = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">      <span class="built_in">this</span>.nextElementSibling.innerHTML = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt;格式不正确,请从新输入 &#x27;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>（表单验证(中)）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//QQ号验证: /^[1-9]\d&#123;4,&#125;$/; </span></span><br><span class="line"><span class="comment">//昵称验证:/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span></span><br><span class="line"><span class="comment">//验证通过与不通过更换元素的类名与元素中的内容 ,将上一步的匹配代码进行封装,多次调用即可</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">regexp</span>(<span class="params">ele, reg</span>) </span>&#123;</span><br><span class="line">    ele.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (reg.test(<span class="built_in">this</span>.value)) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;正确的&#x27;);</span></span><br><span class="line">        <span class="built_in">this</span>.nextElementSibling.className = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.nextElementSibling.innerHTML = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// console.log(&#x27;不正确&#x27;);</span></span><br><span class="line">     <span class="built_in">this</span>.nextElementSibling.className = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">     <span class="built_in">this</span>.nextElementSibling.innerHTML = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt; 格式不正确,请从新输入 &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>（表单验证(下)）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//密码验证:/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span></span><br><span class="line"><span class="comment">//再次输入密码只需匹配与上次输入的密码值 是否一致</span></span><br><span class="line">完整代码：</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> regtel = <span class="regexp">/^1[3|4|5|7|8]\d&#123;9&#125;$/</span>; <span class="comment">// 手机号码的正则表达式</span></span><br><span class="line">    <span class="keyword">var</span> regqq = <span class="regexp">/^[1-9]\d&#123;4,&#125;$/</span>; <span class="comment">// 10000</span></span><br><span class="line">    <span class="keyword">var</span> regnc = <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> regmsg = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> regpwd = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> tel = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#tel&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> qq = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#qq&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> nc = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#nc&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> msg = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#msg&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> pwd = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#pwd&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> surepwd = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#surepwd&#x27;</span>);</span><br><span class="line">    regexp(tel, regtel); <span class="comment">// 手机号码</span></span><br><span class="line">    regexp(qq, regqq); <span class="comment">// qq号码</span></span><br><span class="line">    regexp(nc, regnc); <span class="comment">// 昵称</span></span><br><span class="line">    regexp(msg, regmsg); <span class="comment">// 短信验证</span></span><br><span class="line">    regexp(pwd, regpwd); <span class="comment">// 密码框</span></span><br><span class="line">    <span class="comment">// 表单验证的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">regexp</span>(<span class="params">ele, reg</span>) </span>&#123;</span><br><span class="line">        ele.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (reg.test(<span class="built_in">this</span>.value)) &#123;</span><br><span class="line">                <span class="comment">// console.log(&#x27;正确的&#x27;);</span></span><br><span class="line">                <span class="built_in">this</span>.nextElementSibling.className = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">                <span class="built_in">this</span>.nextElementSibling.innerHTML = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// console.log(&#x27;不正确&#x27;);</span></span><br><span class="line">                <span class="built_in">this</span>.nextElementSibling.className = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">                <span class="built_in">this</span>.nextElementSibling.innerHTML = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt; 格式不正确，请从新输入 &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    surepwd.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value == pwd.value) &#123;</span><br><span class="line">            <span class="built_in">this</span>.nextElementSibling.className = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            <span class="built_in">this</span>.nextElementSibling.innerHTML = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.nextElementSibling.className = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="built_in">this</span>.nextElementSibling.innerHTML = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt; 两次密码输入不一致&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-正则替换replace"><a href="#3-5-正则替换replace" class="headerlink" title="3.5 正则替换replace"></a>3.5 正则替换replace</h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy和red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="string">&#x27;andy&#x27;</span>, <span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//等同于 此处的andy可以写在正则表达式内</span></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.replace(<span class="regexp">/andy/</span>, <span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr2)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//全部替换</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcabc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.replace(<span class="regexp">/a/</span>,<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nStr) <span class="comment">//哈哈bcabc</span></span><br><span class="line"><span class="comment">//全部替换g</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.replace(<span class="regexp">/a/</span>a,<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nStr) <span class="comment">//哈哈bc哈哈bc</span></span><br><span class="line"><span class="comment">//忽略大小写i</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aAbcAba&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="regexp">/a/gi</span>,<span class="string">&#x27;哈哈&#x27;</span>)<span class="comment">//&quot;哈哈哈哈bc哈哈b哈哈&quot;</span></span><br></pre></td></tr></table></figure><p><strong>案例:过滤敏感词汇</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;textarea name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;message&quot;</span>&gt;&lt;<span class="regexp">/textarea&gt; &lt;button&gt;提交&lt;/</span>button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;textarea&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.innerHTML = text.value.replace(<span class="regexp">/激情|gay/g</span>, <span class="string">&#x27;**&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>PS:</strong><a href="https://rainux.top/"> 博主博客主页(Rainux)，精彩继续，欢迎来访！</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Js高级---你所不知道的ES6的规范！</title>
      <link href="/Js%E9%AB%98%E7%BA%A7---%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84ES6%E7%9A%84%E8%A7%84%E8%8C%83%EF%BC%81/"/>
      <url>/Js%E9%AB%98%E7%BA%A7---%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84ES6%E7%9A%84%E8%A7%84%E8%8C%83%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p><strong>Code Is Never Die !</strong></p><p>今天我们一起揭开JS中ES6的神秘面纱！</p><h2 id="1-ES6相关概念（★★）"><a href="#1-ES6相关概念（★★）" class="headerlink" title="1. ES6相关概念（★★）"></a>1. ES6相关概念（★★）</h2><h3 id="1-1-什么是ES6"><a href="#1-1-什么是ES6" class="headerlink" title="1.1 什么是ES6"></a>1.1 什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。<br><img src="https://img-blog.csdnimg.cn/20210706094200257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>ES6 实际上是一个泛指，泛指 ES2015 及后续的版本。 </p><h3 id="1-2-为什么使用-ES6"><a href="#1-2-为什么使用-ES6" class="headerlink" title="1.2 为什么使用 ES6 ?"></a>1.2 为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="2-ES6新增语法"><a href="#2-ES6新增语法" class="headerlink" title="2. ES6新增语法"></a>2. ES6新增语法</h2><h3 id="2-1-let（★★★）"><a href="#2-1-let（★★★）" class="headerlink" title="2.1 let（★★★）"></a>2.1 let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="2-1-1-let声明的变量只在所处于的块级有效"><a href="#2-1-1-let声明的变量只在所处于的块级有效" class="headerlink" title="2.1.1 let声明的变量只在所处于的块级有效"></a>2.1.1 let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; <span class="comment">// 大括号可以形成块级作用域</span></span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//报错: a is not defined</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><p><strong>好处</strong> : 可以防止循环变量变成全局变量 : (使用var就不会报错)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//报错: i is not defined</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-不存在变量提升"><a href="#2-1-2-不存在变量提升" class="headerlink" title="2.1.2 不存在变量提升"></a>2.1.2 不存在变量提升</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined </span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-暂时性死区"><a href="#2-1-3-暂时性死区" class="headerlink" title="2.1.3 暂时性死区"></a>2.1.3 暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; <span class="comment">//因为在此块级作用域中，使用了let声明了tmp变量，那么tmp会与此块级作用域进行绑定，形成死区，不受外界影响（无法访问外部的tmp）</span></span><br><span class="line">    tmp = <span class="string">&#x27;abc&#x27;</span>;<span class="comment">//这里会报错，变量未声明，不能赋值</span></span><br><span class="line">    <span class="keyword">let</span> tmp; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="2-1-4-经典面试题"><a href="#2-1-4-经典面试题" class="headerlink" title="2.1.4 经典面试题"></a>2.1.4 经典面试题</h4><p>面试题1：此题没有用到let</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();<span class="comment">//2</span></span><br><span class="line">arr[<span class="number">1</span>]();<span class="comment">//2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210706094303838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>经典面试题图解：</strong> 此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><p>面试题2：此题用到let关键字</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();<span class="comment">//0</span></span><br><span class="line">arr[<span class="number">1</span>]();<span class="comment">//1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210706094331252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>经典面试题图解：</strong></p><ul><li>此题的关键点在于<strong>每次循环都会产生一个块级作用域</strong>，</li><li>每个块级作用域中的变量都是不同的，</li><li>函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</li></ul><h4 id="2-1-5-小结"><a href="#2-1-5-小结" class="headerlink" title="2.1.5 小结"></a>2.1.5 小结</h4><ul><li><strong>let关键字就是用来声明变量的</strong></li><li><strong>使用let关键字声明的变量具有块级作用域</strong></li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量<ul><li>循环中的i，使用var声明的话是全局变量，但是这样不合理，而使用let就是局部变量</li></ul></li><li><strong>使用let关键字声明的变量没有变量提升</strong></li><li>使用let关键字声明的变量具有暂时性死区特性<ul><li>死区：不受外界影响</li></ul></li></ul><h3 id="2-2-const（★★★）"><a href="#2-2-const（★★★）" class="headerlink" title="2.2 const（★★★）"></a>2.2 const（★★★）</h3><p><strong>声明常量</strong>，常量就是值（内存地址）不能变化的量</p><p><strong>常量：常态的量，值是常态的量，值无法改变</strong></p><p>const：constant常量</p><h4 id="2-2-1-具有块级作用域"><a href="#2-2-1-具有块级作用域" class="headerlink" title="2.2.1 具有块级作用域"></a>2.2.1 具有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-声明常量时必须赋值"><a href="#2-2-2-声明常量时必须赋值" class="headerlink" title="2.2.2 声明常量时必须赋值"></a>2.2.2 声明常量时必须赋值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; <span class="comment">// Missing initializer in const declaration，声明常量时丢失初始化</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-常量赋值后，值不能修改-（栈中存储的内容无法修改）"><a href="#2-2-3-常量赋值后，值不能修改-（栈中存储的内容无法修改）" class="headerlink" title="2.2.3 常量赋值后，值不能修改 （栈中存储的内容无法修改）"></a>2.2.3 常量赋值后，值不能修改 （栈中存储的内容无法修改）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">PI = <span class="number">100</span>; <span class="comment">// Assignment to constant variable. //给常量重新指定值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//复杂数据类型内部的值，是可以改变的</span></span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span></span><br><span class="line">ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]; <span class="comment">// Assignment to constant variable.//但是复杂数据类型变量本身无法改变</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4 小结"></a>2.2.4 小结</h4><ul><li><strong>const声明的变量是一个常量</strong></li><li><strong>既然是常量不能重新进行赋值</strong>，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值<ul><li>复杂数据类型变量中存储的是地址值</li></ul></li><li>声明 const时候必须要给定初始值（<strong>因为没有办法重新赋值，所以在声明时必须有初始值</strong>）</li></ul><h3 id="2-3-let、const、var-的区别"><a href="#2-3-let、const、var-的区别" class="headerlink" title="2.3 let、const、var 的区别"></a>2.3 let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p><img src="https://img-blog.csdnimg.cn/20210706094356725.png" alt="在这里插入图片描述"></p><h3 id="2-4-解构赋值（★★★）"><a href="#2-4-解构赋值（★★★）" class="headerlink" title="2.4 解构赋值（★★★）"></a>2.4 解构赋值（★★★）</h3><ul><li><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p></li><li><p>解构：分解数据结构  (可以理解为拆包，将数组中的元素拆出来)</p></li><li><p>赋值：为变量赋值</p></li><li><p>解构赋值，可以让我们更快捷的从数组或对象中提取值，然后对变量赋值</p></li></ul><h4 id="2-4-1-数组解构"><a href="#2-4-1-数组解构" class="headerlink" title="2.4.1 数组解构"></a>2.4.1 数组解构</h4><ul><li>数组解构允许我们按照一一对应的关系从数组中提取值 </li><li>然后将值赋值给变量 </li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br><span class="line"> <span class="built_in">console</span>.log(b)<span class="comment">//2</span></span><br><span class="line"> <span class="built_in">console</span>.log(c)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-对象解构"><a href="#2-4-2-对象解构" class="headerlink" title="2.4.2 对象解构"></a>2.4.2 对象解构</h4><ul><li>对象解构允许我们使用变量的名字匹配对象的属性 </li><li>匹配成功之后将对象属性的值赋值给变量 </li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意这里的name仅仅是用于属性匹配，不在是变量，myName才是变量</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myName); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//无法获取到zhangsan</span></span><br><span class="line"><span class="built_in">console</span>.log(myAge); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">//如果变量不想与对象的属性名保持一致，那么采用第二种方式解构</span></span><br></pre></td></tr></table></figure><h4 id="2-4-3-小结"><a href="#2-4-3-小结" class="headerlink" title="2.4.3 小结"></a>2.4.3 小结</h4><ul><li><p>解构赋值就是把数据结构分解，然后给变量进行赋值</p></li><li><p>如果解构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</p></li><li><p>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</p></li><li><p>利用解构赋值能够让我们方便的去取对象中的属性跟方法</p></li><li><p>补充:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不管是数组还是对象在去处理结构赋值时,都是通过key匹配变量,然后进行赋值.</span></span><br><span class="line"> <span class="keyword">let</span> [a, b, c] = [<span class="number">0</span>:<span class="number">1</span>, <span class="number">1</span>:<span class="number">2</span>, <span class="number">2</span>:<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-箭头函数（★★★）"><a href="#2-5-箭头函数（★★★）" class="headerlink" title="2.5 箭头函数（★★★）"></a>2.5 箭头函数（★★★）</h3><h4 id="2-5-1-箭头函数介绍"><a href="#2-5-1-箭头函数介绍" class="headerlink" title="2.5.1 箭头函数介绍"></a>2.5.1 箭头函数介绍</h4><p>ES6中新增的定义函数的方式：箭头函数</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;&#125; <span class="comment">//()：代表是函数； =&gt;：代表指向，指向哪一个代码块；&#123;&#125;：代码块，函数体</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;&#125;<span class="comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭头函数是用来简化函数定义语法的</span></span><br><span class="line"> <span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> fn();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果形参只有一个，可以省略小括号</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> v;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"> <span class="keyword">const</span> fn = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>);<span class="comment">//this 指向 是obj对象</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">         <span class="comment">//this 指向 的是箭头函数定义区域的this，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">         <span class="comment">//理解为当前箭头函数作用域中没有this，要向上一级作用域查找</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">const</span> resFn = fn.call(obj); </span><br><span class="line"> resFn();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-5-2-小结"><a href="#2-5-2-小结" class="headerlink" title="2.5.2 小结"></a>2.5.2 小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置<ul><li><strong>理解</strong>：箭头函数不绑定this，箭头函数没有自己的this关键字，如果在箭头函数中使用this，this关键字将指向箭头函数定义位置中的this </li><li><strong>再理解</strong>：理解为当前箭头函数作用域中没有this，要向上一级作用域查找</li></ul></li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。<ul><li>比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li></ul></li></ul><h4 id="2-5-3-面试题"><a href="#2-5-3-面试题" class="headerlink" title="2.5.3 面试题"></a>2.5.3 面试题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">alert(<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.say();<span class="comment">//100；</span></span><br><span class="line"><span class="comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的(对象没有块级作用域)</span></span><br><span class="line"><span class="comment">//所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span><br></pre></td></tr></table></figure><h3 id="2-6-剩余参数（★★）"><a href="#2-6-剩余参数（★★）" class="headerlink" title="2.6 剩余参数（★★）"></a>2.6 剩余参数（★★）</h3><h4 id="2-6-1-剩余参数介绍"><a href="#2-6-1-剩余参数介绍" class="headerlink" title="2.6.1 剩余参数介绍"></a>2.6.1 剩余参数介绍</h4><ul><li>剩余参数语法允许我们将一个不定数量的参数表示为一个数组</li><li>不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</li><li>代码：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">first, ...args</span>) </span>&#123;<span class="comment">//...args为剩余参数，理解为不定长参数</span></span><br><span class="line">     <span class="built_in">console</span>.log(first); <span class="comment">// 10</span></span><br><span class="line">     <span class="built_in">console</span>.log(args); <span class="comment">// [20, 30] </span></span><br><span class="line"> &#125;</span><br><span class="line"> sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><h4 id="2-6-2-剩余参数和解构配合使用"><a href="#2-6-2-剩余参数和解构配合使用" class="headerlink" title="2.6.2 剩余参数和解构配合使用"></a>2.6.2 剩余参数和解构配合使用</h4><ul><li>剩余参数不仅仅可以在函数定义的形参中使用</li><li>还可以配合解构使用</li><li>代码：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students; <span class="comment">//...s2为剩余参数，理解为不定长变量</span></span><br><span class="line"><span class="built_in">console</span>.log(s1);  <span class="comment">// &#x27;wangwu&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(s2);  <span class="comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-ES6-的内置对象扩展"><a href="#3-ES6-的内置对象扩展" class="headerlink" title="3. ES6 的内置对象扩展"></a>3. ES6 的内置对象扩展</h2><h3 id="3-1-Array-的扩展方法（★★）"><a href="#3-1-Array-的扩展方法（★★）" class="headerlink" title="3.1 Array 的扩展方法（★★）"></a>3.1 Array 的扩展方法（★★）</h3><h4 id="3-1-1-扩展运算符…（展开语法）"><a href="#3-1-1-扩展运算符…（展开语法）" class="headerlink" title="3.1.1 扩展运算符…（展开语法）"></a>3.1.1 扩展运算符…（展开语法）</h4><ul><li>扩展运算符可以<strong>将数组转为用逗号分隔的参数序列</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary  <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="built_in">console</span>.log(...ary);    <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>扩展运算符可以<strong>应用于合并数组</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 </span></span><br><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"><span class="comment">// 方法二 </span></span><br><span class="line">ary1.push(...ary2);</span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="built_in">console</span>.log(ary1.concat(ary2));</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>将<strong>伪数组或可遍历对象转换为真正的数组</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>扩展运算符…</li><li>可以理解为拆包，将数组中的元素拆出来</li></ul><h4 id="3-1-2-构造函数方法：Array-from"><a href="#3-1-2-构造函数方法：Array-from" class="headerlink" title="3.1.2 构造函数方法：Array.from()"></a>3.1.2 构造函数方法：Array.from()</h4><p><strong>将伪数组或可遍历对象转换为真正的数组</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//转成数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="comment">//length不是数组中的元素，而是数组的一个属性，所以打印是看不到的，只能在控制台点击数组变量的小三角才能看见length</span></span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src="https://img-blog.csdnimg.cn/20210706094431696.jpg" alt="在这里插入图片描述"><br>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;length&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="built_in">Array</span>.from(arrayLike, <span class="function"><span class="params">item</span> =&gt;</span> item *<span class="number">2</span>)<span class="comment">//[2,4]</span></span><br><span class="line"><span class="comment">//第二个参数是一个箭头函数，因为一个参数，一行代码，所以简写</span></span><br><span class="line"><span class="comment">//这里的item是一个变量，代表属性值</span></span><br><span class="line"><span class="comment">//item这个变量名可以随便写，但是一般用item</span></span><br></pre></td></tr></table></figure><h4 id="3-1-3-实例方法：find"><a href="#3-1-3-实例方法：find" class="headerlink" title="3.1.3 实例方法：find()"></a>3.1.3 实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"> &#125;, &#123; </span><br><span class="line">     <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"> &#125;]; </span><br><span class="line"> <span class="keyword">let</span> target = ary.find(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.id == <span class="number">2</span>);<span class="comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br><span class="line"><span class="comment">//要查找的条件，写到箭头函数的函数体中</span></span><br><span class="line"><span class="comment">//find接收的箭头函数的参数是固定的，item和index，属性值和索引</span></span><br><span class="line"><span class="comment">//注意这里的属性值item是一个个的对象</span></span><br><span class="line"><span class="comment">//target是id为2的item对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-1-4-实例方法：findIndex"><a href="#3-1-4-实例方法：findIndex" class="headerlink" title="3.1.4 实例方法：findIndex()"></a>3.1.4 实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的<strong>位置</strong>，如果没有找到返回-1</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.findIndex(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>); </span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="3-1-5-实例方法：includes"><a href="#3-1-5-实例方法：includes" class="headerlink" title="3.1.5 实例方法：includes()"></a>3.1.5 实例方法：includes()</h4><ul><li>判断某个数组是否包含给定的值，返回布尔值。</li><li>includes：包括</li><li>语法：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>) <span class="comment">// true </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-String-的扩展方法"><a href="#3-2-String-的扩展方法" class="headerlink" title="3.2 String 的扩展方法"></a>3.2 String 的扩展方法</h3><h4 id="3-2-1-模板字符串（★★★）"><a href="#3-2-1-模板字符串（★★★）" class="headerlink" title="3.2.1 模板字符串（★★★）"></a>3.2.1 模板字符串（★★★）</h4><ul><li>ES6新增的创建字符串的方式，使用反引号定义</li><li>反引号在键盘的位置：1的左侧，与~同一个键</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><ul><li>模板字符串中可以解析变量</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br><span class="line"><span class="comment">//模板字符串中，通过$&#123;变量名&#125;的方式来获取变量值</span></span><br></pre></td></tr></table></figure><ul><li>模板字符串中可以换行</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; `</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在模板字符串中可以调用函数</li><li>同样是通过${}来调用</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(greet); <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>模板字符串中可以写代码，html代码（可以识别空格和换行等格式），js代码（写在${}）</li></ul><h4 id="3-2-2-实例方法：startsWith-和-endsWith"><a href="#3-2-2-实例方法：startsWith-和-endsWith" class="headerlink" title="3.2.2 实例方法：startsWith() 和 endsWith()"></a>3.2.2 实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">str.startsWith(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true </span></span><br><span class="line">str.endsWith(<span class="string">&#x27;!&#x27;</span>)       <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-3-实例方法：repeat"><a href="#3-2-3-实例方法：repeat" class="headerlink" title="3.2.3 实例方法：repeat()"></a>3.2.3 实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.repeat(<span class="number">3</span>)      <span class="comment">// &quot;xxx&quot; </span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.repeat(<span class="number">2</span>)  <span class="comment">// &quot;hellohello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Set-数据结构（★★）"><a href="#3-3-Set-数据结构（★★）" class="headerlink" title="3.3. Set 数据结构（★★）"></a>3.3. Set 数据结构（★★）</h3><h4 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h4><ul><li>ES6 提供了新的数据结构  Set。</li><li>它类似于数组，但是<strong>成员的值都是唯一</strong>的，没有重复的值。</li><li>Set本身是一个构造函数，用来生成  Set  数据结构</li><li>创建Set类型的变量，语法如下：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure><p>Set函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);<span class="comment">//&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-2-实例方法"><a href="#3-3-2-实例方法" class="headerlink" title="3.3.2 实例方法"></a>3.3.2 实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>); <span class="comment">// 向 set 结构中添加值 </span></span><br><span class="line">s.delete(<span class="number">2</span>)             <span class="comment">// 删除 set 结构中的2值   </span></span><br><span class="line">s.has(<span class="number">1</span>)                <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span></span><br><span class="line">s.clear()               <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure><h4 id="3-3-3-遍历"><a href="#3-3-3-遍历" class="headerlink" title="3.3.3 遍历"></a>3.3.3 遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">s.forEach(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure><p><strong>PS:</strong><a href="https://rainux.top/"> 博主博客主页(Rainux)，精彩继续，欢迎来访！</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 3 抓住新特性···遇见新前端</title>
      <link href="/Vue%203%20%E6%8A%93%E4%BD%8F%E6%96%B0%E7%89%B9%E6%80%A7%C2%B7%C2%B7%C2%B7%E9%81%87%E8%A7%81%E6%96%B0%E5%89%8D%E7%AB%AF/"/>
      <url>/Vue%203%20%E6%8A%93%E4%BD%8F%E6%96%B0%E7%89%B9%E6%80%A7%C2%B7%C2%B7%C2%B7%E9%81%87%E8%A7%81%E6%96%B0%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p><strong>Header：</strong> Code is never die！</p><p>本文主要介绍了 Vue 3 的设计过程。原文为英文版，对原文感兴趣的可查看（英文版）： <a href="https://increment.com/frontend/making-vue-3/">Vue 3</a></p><p><strong>Vue 3 的设计过程</strong></p><p>重写 Vue.js 下个主版本的经验总结<br>作者：尤雨溪<br>创作日期：2020 年 5 月</p><p>在过去的一年里，Vue 团队一直在开发 Vue.js 的下一个主版本，我们打算在 2020 年上半年发布它（原文注释：在写作本文时，这个工作仍在继续）。与新的 Vue 主版本有关的想法是在 2018 年底成形的，那时 Vue 2 的代码库大约诞生了两年半。对于一个通用软件的整个生命周期来说，这个时间不算长，但是在这段时期内，前端技术已经发生了翻天覆地的变化。</p><p>设计（和重写）Vue 的下一个主版本主要基于两点考虑：1. 主流浏览器中 JavaScript 新特性的普遍可用性；2. 随着时间的推移，当前代码库的设计和结构上的缺陷逐渐暴露了出来。</p><p><strong>为什么要重写？</strong></p><p><strong>一、利用新的语言特性</strong></p><p>随着 ES2015 的标准化，以及 JavaScript（正式名称为 ECMAScript，缩写为 ES） 进行了重大升级，主流浏览器也开始对这些新特性提供不错的支持。其中一些为我们提供了极大提升 Vue 性能的机会。</p><p>其中最值得注意的是 Proxy，它允许框架拦截对对象的操作。Vue 的一个核心特色就是能监听用户自定义 state 的变化，并且响应式地更新 DOM。Vue 2 通过替换 state 内对象属性的 getters 和 setters 来实现这一点。使用 Proxy 实现可以帮助我们消除现有的限制，比如无法检测新添加的属性，并且它还可以改善 Vue 的性能。</p><p>不过，Proxy 是一个原生的语言特性，在旧浏览器中无法被完全 polyfill 。为了使用它，我们必须调整框架所支持的浏览器范围，这是一个只有在新的主版本中才可以做出的重大改变。</p><p><strong>二、解决架构问题</strong></p><p>在维护 Vue 2 的过程中，我们积累了大量由于当前架构的限制而无法解决的问题。例如，模板编译器的编写方式使得生成正确的 source-map 非常有挑战性。另外，虽然 Vue 2 在技术上支持编写高阶渲染函数，从而面向无 DOM（non-DOM）平台使用，但为了实现它，我们必须创建代码库分支，并复制大量的代码。在当前版本中修复这些问题需要进行大规模、高风险的重构，这几乎相当于重写框架。</p><p>与此同时，各个模块内部和一些似乎不属于任何地方的浮动代码存在隐式耦合，这积累了一些技术债务。这使得单独理解代码库的一部分变得很困难，并且我们注意到，很少有贡献者有信心对框架做出重要的改变。重写给了我们重新思考代码组织结构的机会。</p><p>初始原型阶段<br>我们在 2018 年底开始构建 Vue 3 的原型，初步目标是验证以下问题的解决方案。</p><p><strong>三、切换到 TypeScript</strong></p><p>Vue 2 最初是由原生 ES 编写的。在原型阶段过后不久，我们意识到类型系统对这种规模的项目是非常有用的。类型检查大大降低了在重构过程中引入意外 bug 的几率，也可以帮助贡献者增强做出重大改进的信心。我们选择了 FaceBook 的 Flow type checker ，因为它可以逐步添加到已经存在的纯 ES 项目中。Flow 起到了一定的作用，但是带来的好处不如我们预期的那么多；特别是 Flow 不断进行的重大修改使得升级非常痛苦。相比于 TypeScript 与 Visual Studio Code 的深度集成，Flow 对集成开发环境的支持也不够理想。</p><p>我们还注意到，同时使用 Vue 和 TypeScript 的用户在不断增长。为了支持他们的使用场景，我们必须独立于源代码编写和维护使用了不同类型系统（译者注：相对于 Flow 而言）的 TypeScript 声明。切换到 TypeScript 使得我们可以自动生成声明文件，以降低维护的负担。</p><p><strong>四、解耦内部包</strong></p><p>我们还在由多个内部包构成的框架内使用了单一设置，尽管这些包拥有各自的私有 API、类型定义和测试代码。我们希望使模块之间的依赖关系更加明确，使它更易于被开发者阅读、理解和修改。这是我们努力降低为项目做贡献的难度并提高其长期可维护性的关键。</p><p><strong>五、启用 RFC 流程</strong></p><p>在 2018 年末，我们创建了一个有着新的响应式系统和虚拟 DOM 渲染器的工作原型。我们已经验证了我们想要的内部架构的改进，但是公开 API（public-facing API，译者注：指面向开发者的 API）部分只有一个大致草稿，是时候把它们变成具体的设计了。</p><p>我们知道我们必须尽快并且谨慎地做这件事。Vue 的大量使用意味着重大改变会带来巨大的迁移成本和潜在的框架生态分裂。为了确保用户能对重大变化提供反馈，我们在 2019 年初启用了 RFC(Request For Comments)流程。每个 RFC 使用一个固定模板，包括方案目的、设计细节、方案权衡和采用的策略。由于该过程是在 GitHub 仓库中进行的，建议以 pull request 的形式提交，相关讨论会在评论中展开。</p><p>RFC 在构建一个成熟框架的过程中是非常有用的，它迫使我们对一个变化的所有方面进行全面的考虑，并允许我们的社区参与设计过程，提交经过深思熟虑的功能设计。</p><p>更快，更小<br>性能对前端框架极其重要。尽管 Vue 2 在性能方面已经很有竞争力，但是通过新的渲染策略，重写使得性能可以进一步提升。</p><p><strong>六、克服虚拟 DOM 的瓶颈</strong></p><p>Vue 有一个相当独特的渲染策略：它提供一个接近 HTML（HTML-like）的模板语法，并最终把它编译为一个可以返回虚拟 DOM 树的渲染函数。该框架通过递归遍历两个虚拟 DOM 树并比较每个节点上的每个属性来确定实际 DOM 的哪些部分需要更新。感谢现代 JavaScript 引擎所执行的高级优化，这个有些粗糙的算法通常执行得很快，但是更新过程仍然涉及很多不必要的 CPU 操作。当你观察一个包含大量静态内容而只有少量动态绑定的模板时，效率低下问题就会变得很明显 – 整个虚拟 DOM 树仍然需要递归遍历来算出哪里发生了变化。</p><p>幸运的是，模板编译步骤给了我们分析静态模板和动态部分的机会。Vue 2 通过跳过静态子树在一定程度上做到了这一点，但是由于编译器架构过于简单，更进一步的优化很难实现。在 Vue 3 中，我们用更合适的 AST 转换管道（AST transform pipeline）重写了编译器，它使得我们能以转换插件的形式进行编译时优化。</p><p>随着新架构的实施，我们希望找到一种开销尽可能低的渲染策略。一个选择是舍弃虚拟 DOM，直接生成必要的 DOM 操作，但是那会丧失直接编写虚拟 DOM 渲染函数的能力，而我们发现这个能力对高级用户和库的开发者非常有用。另外，这又将是一个重大更新。</p><p>接下来最好的方法是消除不必要的虚拟 DOM 树遍历和属性比较，而这在更新过程中的性能损耗是最大的。为了实现这一点，编译器和运行时必须同时工作：编译器分析模板和生成带有优化提示的代码，同时，运行时拾取这些提示，并采取尽可能快的更新策略。这里主要有三个优化：</p><p>第一，从树的层面看，我们注意到，在没有使用可以动态改变树结构的指令（例如 v-if 和 v-for）的情况下，节点结构是完全静态的。如果我们将模板划分为由这些结构指令分隔的嵌套“块”，那么每个“块”中的节点结构又会变成完全静态的。当我们在一个“块”内部更新节点时，我们不再需要递归遍历整棵树 – 因为“块”内的动态绑定可以在一个扁平数组（译者注：即一维数组）中被追踪到。通过将需要执行的树遍历运算减少一个数量级，这种优化规避了虚拟 DOM 的大部分开销。</p><p>第二，编译器会主动监测模板中的静态节点、静态子树甚至数据对象，并且把它们提取到结果代码中的渲染函数之外。这避免了在每个渲染函数中重新创建这些对象，极大的改善了内存使用，降低了垃圾回收频率。</p><p>第三，从标签元素的角度来说，编译器还会根据需要执行的更新类型为每个元素动态绑定生成一个优化标志。例如，一个有动态 class 和一些静态属性的元素会被标记为只需要进行类名检查。运行时会拾取这些提示并采取专门的快速更新策略。</p><p>结合这些技术，Vue 3 占用的 CPU 时间 还不到 Vue 2 的十分之一，极大地改善了我们的渲染更新基准测试性能。</p><p><strong>七、最小化包体积</strong></p><p>框架的体积同样影响它的性能。这是 web 应用程序遇到的一个独特问题，因为资源需要在使用时下载，并且在浏览器解析完必要的 JavaScript 代码之前，应用无法产生交互。对于单页面应用程序来说尤其如此。尽管 Vue 一直以来是比较轻量的 – Vue 2xx 版本的运行时使用 gzip 压缩后只有 23KB，我们还是注意到两个问题：</p><p>第一，不是所有人都会用到框架的所有功能。例如，一个不需要使用 transition 组件的应用仍然需要付出下载和解析与 transition 有关代码的代价。</p><p>第二，随着我们不断增加新特性，框架也在不断增长。当我们在权衡新特性的利弊时，包的体积必须考虑在内。最终，我们倾向于只添加大多数用户会用到的功能。</p><p>理想情况下，用户应该能够在构建时删除那些未使用的框架特性相关的代码 – 也叫 tree-shaking，只留下他们用到的东西。这也使得我们可以在不增加其他用户成本的情况下，为一部分用户提供有用的特性。</p><p>在 Vue 3 中，我们通过把大部分全局 API 和内置帮助程序（internal helpers）转移到 ES 模块中来实现这一点。这允许现代打包器静态地分析模块依赖关系，并删除与未使用的特性相关的代码。模板编译器也可以生成 tree-shaking 友好的代码，它只会在模板中实际使用了该特性时才导入与该特性相关的帮助程序。</p><p>框架中的一些部分永远不能被 tree-shaken，因为它们对任何一个应用都是必要的。我们称这些不可缺少的部分的体积为基准体积。尽管增加了大量的新特性，但 Vue 3 的基准体积用 gzip 压缩后只有大约 10KB - 比 Vue 2 的一半还小。</p><p><strong>八、解决对规模化的需求</strong></p><p>我们还想提升 Vue 应对大型应用的能力。我们最初的 Vue 设计专注于较低的准入门槛和平缓的学习曲线。但是随着 Vue 的使用越来越广泛，我们意识到支持包含数百个模块以及由数十名开发者维护的大型项目是必要的。对这类项目，像 TypeScript 这样的类型系统，以及干净地组织可重用代码的能力是至关重要的，然而 Vue 2 在这方面的支持不够理想。</p><p>在 Vue 3 设计的早期阶段，我们尝试通过支持使用类编写组件来改进 TypeScript 集成。挑战在于，class 所依赖的许多语言特性，例如类字段和修饰器，仍处于建议阶段。而在成为正式的 JavaScript 标准之前，这些特性仍然可能变化。这些问题所涉及的复杂性和不确定性让我们怀疑添加类 API 是否真的合理，因为它除了提供稍好的 TypeScript 集成之外，没有带来任何好处。</p><p>我们决定研究解决规模化问题的其他方法。受 React Hooks 的启发，我们考虑通过暴露更底层的响应式和组件生命周期 API，来启用一种更自由的方式编写组件逻辑，我们称之为 Composition API。与通过指定一长串 option 来定义组件不同，Composition API 允许用户自由地像编写函数一样表达、组合和重用有状态组件逻辑，并且这些都提供了很好的 TypeScript 支持。</p><p>我们对这个想法感到兴奋。尽管 Composition API 设计出来是为了解决某些特定的问题，但在编写组件时只使用这类 API 来实现（译者注：指完全使用 Composition API 来编写组件）在技术上也是可行的。在提案的第一稿中，我们有些超前地提出可能会在后续的发布中使用 Composition API 替换已存在的 Options API。这遭到社区成员的强烈反对，同时这也给了我们一个宝贵的教训，就是要清楚地表达长期计划和意图，以及理解用户的需要。在听取了社区的反馈后，我们彻底修改了这个提案，明确表示 Composition API 将会是 Options API 的修改和补充。修订后的提案得到的反响要积极得多，并收到了许多建设性的建议。</p><p><strong>九、寻求平衡</strong></p><p>在 Vue 的用户群中，有超过 100 万的开发人员是对 HTML/CSS 只有基本知识的初学者，或由 jQuery 转型而来的专业人士，或从其他框架迁移而来，或寻求前端解决方案的后端工程师，以及处理大规模软件的软件架构师。开发者的多样性造成了使用场景的多样性：一些开发人员可能希望在遗留应用程序上增加交互性；而另一些人则可能从事开发周期很短但维护时间有限的一次性项目；架构师可能必须处理大型、多年的项目，以及面对在项目生命周期中变化不定的开发团队。</p><p>当我们在各种权衡之间追求平衡的同时，Vue 的设计也不断被这些需求不断塑造。Vue 的口号：“渐进式框架”，含义就是封装由此过程产生的分层 API 设计。初学者可以通过一个 CDN 脚本、基于 HTML 的模板语法和直观的 Options API 获得一个平滑的学习曲线，而高级用户可以用全功能 CLI、渲染函数和 Composition API 设计大规模的应用。</p><p>要实现我们的愿景，还有很多工作要做 – 最重要的是要更新支持库、文档和工具，以确保顺利迁移。在接下来的几个月里，我们将会努力工作，我们已经迫不及待地想看看 Vue 3 社区将会创造什么了。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试基本---闭包大透析(包含案例及题目)</title>
      <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E9%97%AD%E5%8C%85%E5%A4%A7%E9%80%8F%E6%9E%90(%E5%8C%85%E5%90%AB%E6%A1%88%E4%BE%8B%E5%8F%8A%E9%A2%98%E7%9B%AE)/"/>
      <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E9%97%AD%E5%8C%85%E5%A4%A7%E9%80%8F%E6%9E%90(%E5%8C%85%E5%90%AB%E6%A1%88%E4%BE%8B%E5%8F%8A%E9%A2%98%E7%9B%AE)/</url>
      
        <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-0-变量的作用域"><a href="#1-0-变量的作用域" class="headerlink" title="1.0 变量的作用域"></a>1.0 变量的作用域</h3><p>变量根据作用域的不同分为两种：全局变量和局部变量</p><ol><li>函数内部可以使用全局变量</li><li>函数外部不可以使用局部变量</li><li>当函数执行完毕，本作用域内的局部变量会销毁</li></ol><h3 id="2-0-什么是闭包"><a href="#2-0-什么是闭包" class="headerlink" title="2.0 什么是闭包"></a>2.0 什么是闭包</h3><ul><li>闭包（closure）指<strong>有权访问另一个函数作用域中变量的函数</strong></li><li>简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//fn1就是闭包函数</span></span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(num);<span class="comment">//666</span></span><br><span class="line"> &#125;</span><br><span class="line"> fn2()</span><br><span class="line"> &#125;</span><br><span class="line"> fn1();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如上述代码，<strong>理解闭包</strong>：<strong>fn2内部是一个作用域，那么fn2访问了另一个函数内部的局部变量，那么这个局部变量所在函数就叫做闭包函数，所以此时fn1就是闭包函数</strong>。</p><p>闭包形成的两个关键点：</p><ol><li>函数嵌套</li><li>内部函数使用外部函数的局部变量（将外部函数称之为闭包函数）</li></ol><h3 id="3-0-闭包的作用"><a href="#3-0-闭包的作用" class="headerlink" title="3.0 闭包的作用"></a>3.0 闭包的作用</h3><p>作用：<strong>延伸变量的作用范围</strong>。（使得fn外部的作用域访问num）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(num);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">return</span> fun;<span class="comment">//将内部函数返回，不调用</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();<span class="comment">//fn调用完毕，正常理解num就需要消耗，但是fn如果是一个闭包函数，就不会消耗，因为fun要使用，只用fun调用完毕才消耗</span></span><br><span class="line">f();<span class="comment">//调用内部函数fun，打印num，此时就是在fn外部访问了num</span></span><br></pre></td></tr></table></figure><h3 id="4-0-闭包的案例"><a href="#4-0-闭包的案例" class="headerlink" title="4.0 闭包的案例"></a>4.0 闭包的案例</h3><ol><li>闭包应用——利用闭包的方式得到当前li 的索引号</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line"><span class="comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line"><span class="comment">// 立即执行函数也成为小闭包，因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    lis[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//理解：</span></span><br><span class="line"><span class="comment">//for循环创建了四个立即执行函数，每个立即执行函数都有一个局部变量i，并且值不一样，是0,1,2,3</span></span><br><span class="line"><span class="comment">//当我们点击li的时候，li的onclick执行，内部要访问i，此时就访问到它所在的立即执行函数的局部变量i</span></span><br></pre></td></tr></table></figure><ol start="2"><li>闭包应用——3秒钟之后,打印所有li元素的内容</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">   (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(lis[i].innerHTML);<span class="comment">//理解：i访问的是立即执行函数的局部变量i</span></span><br><span class="line">     &#125;, <span class="number">3000</span>)</span><br><span class="line">   &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>闭包应用——计算打车价格 </p><p>需求分析：</p><ul><li><p>打车起步价13(3公里内)，之后每多一公里增加 5块钱</p></li><li><p>用户输入公里数就可以计算打车价格</p></li><li><p>如果有拥堵情况，总价格多收取10块钱拥堵费</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> car = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> start = <span class="number">13</span>; <span class="comment">// 起步价  局部变量</span></span><br><span class="line">     <span class="keyword">var</span> total = <span class="number">0</span>; <span class="comment">// 总价  局部变量</span></span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="comment">// 正常的总价</span></span><br><span class="line">       <span class="attr">price</span>: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">           total = start;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           total = start + (n - <span class="number">3</span>) * <span class="number">5</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> total;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 拥堵之后的费用</span></span><br><span class="line">       <span class="attr">yd</span>: <span class="function"><span class="keyword">function</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> flag ? total + <span class="number">10</span> : total;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(car.price(<span class="number">5</span>)); <span class="comment">// 23</span></span><br><span class="line"><span class="built_in">console</span>.log(car.yd(<span class="literal">true</span>)); <span class="comment">// 33</span></span><br></pre></td></tr></table></figure><h3 id="5-0-小试牛刀-动动脑-试一试"><a href="#5-0-小试牛刀-动动脑-试一试" class="headerlink" title="5.0 小试牛刀(动动脑,试一试)"></a>5.0 小试牛刀(动动脑,试一试)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line">   <span class="keyword">var</span> object = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">     <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;　　</span><br><span class="line">  <span class="keyword">var</span> object = &#123;　　　　</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">    <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br><span class="line">       </span><br></pre></td></tr></table></figure><p><strong>Ending…</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
