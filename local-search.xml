<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端的小激动：Nodejs写简单接口教程</title>
    <link href="/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B0%8F%E6%BF%80%E5%8A%A8%EF%BC%9ANodejs%E5%86%99%E7%AE%80%E5%8D%95%E6%8E%A5%E5%8F%A3%E6%95%99%E7%A8%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B0%8F%E6%BF%80%E5%8A%A8%EF%BC%9ANodejs%E5%86%99%E7%AE%80%E5%8D%95%E6%8E%A5%E5%8F%A3%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><p>写前端的朋友不知道如何拓展自己在后端的能力，那么nodejs是你的不二选择，废话不多说，直接进入正题。</p><p>这里我演示的是nodejs+mysql，别的数据库也类似。</p><p>首先我们需要做两件事，下载nodejs和mysql安装，这些基本知识略过。</p><p>接着新建一个文件夹，在此文件夹下打开cms,或者vscode的终端，输入node init初始化一个项目，输入一些基本信息。</p><p>然后我们还需要安装以下包到–save下<br><img src="https://img-blog.csdnimg.cn/20210421212539769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>express和mysql这两个包是最主要的，稍后再讲其他包的作用。</p><p>在这里我要阐明一个事实，这里的mysql是操作mysql数据库的一个js插件，并不是数据库软件，npm下载的包都是一些js的插件包。</p><p>好了，接下来和我一步步向下操作就可以了。</p><p>在文件夹下新建一个index.js文件，当然别的名字也可以，这个文件是你整个程序的入口。</p><p>键入以下代码：<br><img src="https://img-blog.csdnimg.cn/20210421212554444.png" alt="在这里插入图片描述"></p><p>80代表的是你的端口号，然后在终端或者cms输入node index.js，在浏览器里打开localhost就可以看到了，或者127.0.0.1也行，如果是别的端口号需要加上端口号，当然现在是什么也没有，因为我们还没有写接口。</p><p>接下来我们写一个get接口，返回一个‘hello world’字符串</p><p><img src="https://img-blog.csdnimg.cn/20210421212618745.png" alt="在这里插入图片描述"></p><p>res.json这个方法是以json对象的形式返回去，还有以下方法</p><p>res.send以页面的方式返回去</p><p>res.download以文件的方式返回去，前端请求会下载此文件</p><p>别的方法这里就不在一一阐明了，可以打出res.然后使用vscode的语法提醒查看下面的方法即可，或者查看文档看解释。</p><p>在这里插入图片描述</p><p>接下来我们返回一个页面：<br><img src="https://img-blog.csdnimg.cn/20210421212708273.png" alt="在这里插入图片描述"></p><p>可以看到localhost页面上出现了我们预期的结果</p><p><img src="https://img-blog.csdnimg.cn/20210421212720613.png" alt="在这里插入图片描述"></p><p>到了这里想必你们已经发现问题了，我每次改动一下都要重新跑程序，这不符合人体工程学，说的一点没错，我无法容忍，你萌呢？</p><p>想必你们在前面也发现了pageage.json里有这么一句话</p><p><img src="https://img-blog.csdnimg.cn/20210421212744222.png" alt="在这里插入图片描述"></p><p>scripts的作用就是自己定义脚本命令，在这下面定义的所有命令都可以使用npm run xxx来运行，可以省略run。里面运行的应该是node index.js才对，但是这里我们使用了一个插件，hotnode，这个插件可以让你的node程序热更新，要全局安装这个插件，不然找不到命令。</p><p>npm install -g hotnode</p><p>然后我们就可以npm start运行我们的程序了，所有基于node的程序跑起来都是两步，npm install,安装所有插件，npm start运行程序，如果跑不起来，那么这个项目一定不是一个好项目，我通常如此告诫我的弟子，我们一定要站在巨人的肩上。</p><p>做到这里，我们接下来就可以愉快的开发了。</p><p>接下来我们试试post方法<br><img src="https://img-blog.csdnimg.cn/2021042121281019.png" alt="在这里插入图片描述"></p><p>post不支持浏览器直接访问，这个时候要用postman软件</p><p><img src="https://img-blog.csdnimg.cn/20210421212952436.png" alt="在这里插入图片描述"></p><p>依然符合我们的预期。</p><p>可以把路径改为/login，/test进行尝试，这里就不再演示了。</p><p>也可以试试app.all方法，这个方法支持所有请求方式，不必每个请求都写好几遍了。</p><p>想必大家已经想到了，我要做登录拦截难道每个接口里都要写一遍吗。</p><p>答案是当然不用的，接口的第一个参数可以用正则表达，我们这么写：</p><p><img src="https://img-blog.csdnimg.cn/20210421213005400.png" alt="在这里插入图片描述"></p><p>我们使用<em>来匹配所有路径，这个时候请求test,会先经过</em>，被<em>拦截返回了</em>**，</p><p>我们可以在内部判断来进行操作：</p><p><img src="https://img-blog.csdnimg.cn/20210421213057425.png" alt="在这里插入图片描述"></p><p>如果未登录，返回未登录，否则，继续向下匹配，回调函数接收三个参数，最后一个是next,继续向下执行，*路径一定要写在最上面，不然会先被test捕捉到，test没有执行next,*就会捕捉不到请求。</p><p>这时候就可以设置login的值来看路径localhost/test下的返回值了。</p><p>那么有参数的情况呢，我们先引入一下中间件，如果没有安装可以先npm安装</p><p><img src="https://img-blog.csdnimg.cn/20210421213113364.png" alt="在这里插入图片描述">接下来我们请求一下<img src="https://img-blog.csdnimg.cn/20210421213239895.png" alt="在这里插入图片描述"></p><p>？后面的表单参数会放到req.query里，路径上的参数会放到req.params里，json参数会放到req.body里，可以任意选择一种参数传递即可，路径以:开头表示此路径作为参数的意思。</p><p>前后端联调的时候经常碰到跨域的问题，我们可以使用cors插件解决，</p><p><img src="https://img-blog.csdnimg.cn/20210421213305263.png" alt="在这里插入图片描述"><br>以上提到的跨域和参数都可以自己进行处理，利用路径自己提取参数，在*路径的请求的请求体req里自己加上跨域允许的header，但我希望你们可以使用插件，保证代码的简洁性，同时</p><p>我经常告诉我的弟子，我们一定要站在巨人的肩上。</p><p>好了，接下来我们开始连接数据库，从数据库里拿一条数据出来返回给前端。</p><p>引入mysql插件，我们先在mysql里新建一个表students，存入以下数据：</p><p><img src="https://img-blog.csdnimg.cn/20210421213357899.png" alt="在这里插入图片描述"><br>然后使用mysql插件连接数据库</p><p><img src="https://img-blog.csdnimg.cn/20210421213432681.png" alt="在这里插入图片描述"></p><p>option里都是连接数据库的基本配置，更多参数可以查看文档，我们请求一下localhost/login看看<br><img src="https://img-blog.csdnimg.cn/20210421213445548.png" alt="在这里插入图片描述"></p><p>真的返回了我们存在数据库的数据，我好激动啊，大业终于完成了。</p><p>是的，conn.query就是执行一条sql语句，在回调函数里返回结果。</p><p>结果可以用构造函数封装，这样就不用每次都写一推没用的字段了。</p><p>如果你在此处这样做：</p><p><img src="https://img-blog.csdnimg.cn/20210421213459690.png" alt="在这里插入图片描述"><br>那么这个不妥的，第一次没有问题，第二次不行了，说是关闭了数据库无法继续查询，因为connect()并不能重连数据库，你需要重新建立一条新连接，所以不建议使用conn.end()断开数据库。</p><p>如果莫名其妙断了呢，我们就需要就重连机制，断了数据库会触发error事件，我们这样处理：<br><img src="https://img-blog.csdnimg.cn/20210421213510771.png" alt="在这里插入图片描述"><br>监听error事件，如果err.code返回了以上字符，那么我们就重新发起连接，直到连接成功。</p><p>做到这里，想必大家已经想到了，这是单线程的，并发量高的时候会不会顶不住，会的，所以我们要上连接池。</p><p>连接池与连接相似，做以下处理：<br><img src="https://img-blog.csdnimg.cn/20210421213526757.png" alt="在这里插入图片描述"></p><p>建立连接池比连接多了几个参数，这里罗列了常用的三个，其它参数可以查看文档。这个时候我们使用连接池处理请求。conn.release()的意思是释放连接池的意思，用完就要释放给别的请求使用，也可以直接使用连接池，具体区别我还不知道，我猜应该是直接使用连接池就是这个线程专门为这个请求服务，不用别的也不释放，可以用于常用接口，可以减少取连接池的操作。</p><p>做到这里我们大部分工作已经做完了，想必大家一定又想到了什么，我如果有一千个接口，难道要在一个文件里写一千个吗。</p><p>这当然是不妥的，比较难维护，所以我们要拆分模块，使用express.Router()这个api。</p><p>我们将连接数据库的文件单独抽离<br><img src="https://img-blog.csdnimg.cn/20210421213546143.png" alt="在这里插入图片描述"><br>导出常用的pool,Result,router,app模块，然后在子模块：<br><img src="https://img-blog.csdnimg.cn/2021042121371535.png" alt="在这里插入图片描述"><br>然后在入口：<br><img src="https://img-blog.csdnimg.cn/20210421213701140.png" alt="在这里插入图片描述"><br>看看是不是简洁多了，要注意一点，引入的子模块要放到全局监听<em>的下面，不然又会无法匹配到</em>，app.use的第一个参数代表下发到那个目录，内部子模块的/相当于app.use的第一个参数，接下来请求一下/和/login试试吧。</p><p><strong>Ending</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Nodejs</tag>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完整顺利的卸载node（避免踩坑！）</title>
    <link href="/%E5%AE%8C%E6%95%B4%E9%A1%BA%E5%88%A9%E7%9A%84%E5%8D%B8%E8%BD%BDnode%EF%BC%88%E9%81%BF%E5%85%8D%E8%B8%A9%E5%9D%91%EF%BC%81%EF%BC%89/"/>
    <url>/%E5%AE%8C%E6%95%B4%E9%A1%BA%E5%88%A9%E7%9A%84%E5%8D%B8%E8%BD%BDnode%EF%BC%88%E9%81%BF%E5%85%8D%E8%B8%A9%E5%9D%91%EF%BC%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die！</strong></p><p>1.卸载node本身、删除nodejs目录</p><p>提示：可以在系统控制面板–&gt;所有控制面板项–&gt;程序和功能  卸载Node.js</p><p>2.手动删除<code>C:\Program Files\nodejs\node_modules</code>(如果你的文件是在这里的话)</p><p>3.手动删除<code>C:\users\</code>你的用户名<code>\node_modules</code>(如果你的文件是在这里的话)</p><p>这样就能完整卸载电脑上面的node，然后也可以进行新版本下载<br>附官网地址：<a href="http://nodejs.cn/download/">下载新版nodejs</a><br><img src="https://img-blog.csdnimg.cn/20210421183201539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>Ending…</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Nodejs</tag>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeError_ util.print is not a function 用node.js安装hotnode后启动报错</title>
    <link href="/TypeError_%20util.print%20is%20not%20a%20function%20%E7%94%A8node.js%E5%AE%89%E8%A3%85hotnode%E5%90%8E%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/"/>
    <url>/TypeError_%20util.print%20is%20not%20a%20function%20%E7%94%A8node.js%E5%AE%89%E8%A3%85hotnode%E5%90%8E%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//终端安装插件</span><br>npm install -g hotnode<br></code></pre></td></tr></table></figure><p>直接展示错误地方：<br><img src="https://img-blog.csdnimg.cn/2021042019323395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击下划线处部分进入hotloader.js中（长按ctrl+鼠标点击）进入自动定位到下方位置<br>修改代码<code>util.print -&gt;console.log</code>保存，重新跑项目<br><img src="https://img-blog.csdnimg.cn/20210420193304705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最终成功跑项目：<br><img src="https://img-blog.csdnimg.cn/2021042019332219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Ending…</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Nodejs</tag>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 3 抓住新特性···遇见新前端</title>
    <link href="/Vue%203%20%E6%8A%93%E4%BD%8F%E6%96%B0%E7%89%B9%E6%80%A7%C2%B7%C2%B7%C2%B7%E9%81%87%E8%A7%81%E6%96%B0%E5%89%8D%E7%AB%AF/"/>
    <url>/Vue%203%20%E6%8A%93%E4%BD%8F%E6%96%B0%E7%89%B9%E6%80%A7%C2%B7%C2%B7%C2%B7%E9%81%87%E8%A7%81%E6%96%B0%E5%89%8D%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>Header：</strong> Code is never die！</p><p>本文主要介绍了Vue 3的设计过程。原文为英文版，对原文感兴趣的可查看（英文版）：   <a href="https://increment.com/frontend/making-vue-3/">Vue 3</a></p><p><strong>Vue 3的设计过程</strong></p><p>重写Vue.js下个主版本的经验总结<br>作者：尤雨溪<br>创作日期：2020年5月</p><p>在过去的一年里，Vue团队一直在开发Vue.js的下一个主版本，我们打算在2020年上半年发布它（原文注释：在写作本文时，这个工作仍在继续）。与新的Vue主版本有关的想法是在2018年底成形的，那时Vue 2的代码库大约诞生了两年半。对于一个通用软件的整个生命周期来说，这个时间不算长，但是在这段时期内，前端技术已经发生了翻天覆地的变化。</p><p>设计（和重写）Vue的下一个主版本主要基于两点考虑：1. 主流浏览器中JavaScript新特性的普遍可用性；2. 随着时间的推移，当前代码库的设计和结构上的缺陷逐渐暴露了出来。</p><p><strong>为什么要重写？</strong></p><p><strong>一、利用新的语言特性</strong></p><p>随着ES2015的标准化，以及JavaScript（正式名称为ECMAScript，缩写为ES） 进行了重大升级，主流浏览器也开始对这些新特性提供不错的支持。其中一些为我们提供了极大提升Vue性能的机会。</p><p>其中最值得注意的是Proxy，它允许框架拦截对对象的操作。Vue的一个核心特色就是能监听用户自定义state的变化，并且响应式地更新DOM。Vue 2通过替换state内对象属性的getters和setters来实现这一点。使用Proxy实现可以帮助我们消除现有的限制，比如无法检测新添加的属性，并且它还可以改善Vue的性能。</p><p>不过，Proxy是一个原生的语言特性，在旧浏览器中无法被完全 polyfill 。为了使用它，我们必须调整框架所支持的浏览器范围，这是一个只有在新的主版本中才可以做出的重大改变。</p><p><strong>二、解决架构问题</strong></p><p>在维护Vue 2的过程中，我们积累了大量由于当前架构的限制而无法解决的问题。例如，模板编译器的编写方式使得生成正确的 source-map 非常有挑战性。另外，虽然Vue 2在技术上支持编写高阶渲染函数，从而面向无DOM（non-DOM）平台使用，但为了实现它，我们必须创建代码库分支，并复制大量的代码。在当前版本中修复这些问题需要进行大规模、高风险的重构，这几乎相当于重写框架。</p><p>与此同时，各个模块内部和一些似乎不属于任何地方的浮动代码存在隐式耦合，这积累了一些技术债务。这使得单独理解代码库的一部分变得很困难，并且我们注意到，很少有贡献者有信心对框架做出重要的改变。重写给了我们重新思考代码组织结构的机会。</p><p>初始原型阶段<br>我们在2018年底开始构建Vue 3的原型，初步目标是验证以下问题的解决方案。</p><p><strong>三、切换到TypeScript</strong></p><p>Vue 2最初是由原生ES编写的。在原型阶段过后不久，我们意识到类型系统对这种规模的项目是非常有用的。类型检查大大降低了在重构过程中引入意外bug的几率，也可以帮助贡献者增强做出重大改进的信心。我们选择了FaceBook的Flow type checker ，因为它可以逐步添加到已经存在的纯ES项目中。Flow起到了一定的作用，但是带来的好处不如我们预期的那么多；特别是Flow不断进行的重大修改使得升级非常痛苦。相比于TypeScript与Visual Studio Code的深度集成，Flow对集成开发环境的支持也不够理想。</p><p>我们还注意到，同时使用Vue和TypeScript的用户在不断增长。为了支持他们的使用场景，我们必须独立于源代码编写和维护使用了不同类型系统（译者注：相对于Flow而言）的TypeScript声明。切换到TypeScript使得我们可以自动生成声明文件，以降低维护的负担。</p><p><strong>四、解耦内部包</strong></p><p>我们还在由多个内部包构成的框架内使用了单一设置，尽管这些包拥有各自的私有API、类型定义和测试代码。我们希望使模块之间的依赖关系更加明确，使它更易于被开发者阅读、理解和修改。这是我们努力降低为项目做贡献的难度并提高其长期可维护性的关键。</p><p><strong>五、启用RFC流程</strong></p><p>在2018年末，我们创建了一个有着新的响应式系统和虚拟DOM渲染器的工作原型。我们已经验证了我们想要的内部架构的改进，但是公开API（public-facing API，译者注：指面向开发者的API）部分只有一个大致草稿，是时候把它们变成具体的设计了。</p><p>我们知道我们必须尽快并且谨慎地做这件事。Vue的大量使用意味着重大改变会带来巨大的迁移成本和潜在的框架生态分裂。为了确保用户能对重大变化提供反馈，我们在2019年初启用了RFC(Request For Comments)流程。每个RFC使用一个固定模板，包括方案目的、设计细节、方案权衡和采用的策略。由于该过程是在GitHub仓库中进行的，建议以pull request的形式提交，相关讨论会在评论中展开。</p><p>RFC在构建一个成熟框架的过程中是非常有用的，它迫使我们对一个变化的所有方面进行全面的考虑，并允许我们的社区参与设计过程，提交经过深思熟虑的功能设计。</p><p>更快，更小<br>性能对前端框架极其重要。尽管Vue 2在性能方面已经很有竞争力，但是通过新的渲染策略，重写使得性能可以进一步提升。</p><p><strong>六、克服虚拟DOM的瓶颈</strong></p><p>Vue有一个相当独特的渲染策略：它提供一个接近HTML（HTML-like）的模板语法，并最终把它编译为一个可以返回虚拟DOM树的渲染函数。该框架通过递归遍历两个虚拟DOM树并比较每个节点上的每个属性来确定实际DOM的哪些部分需要更新。感谢现代JavaScript引擎所执行的高级优化，这个有些粗糙的算法通常执行得很快，但是更新过程仍然涉及很多不必要的CPU操作。当你观察一个包含大量静态内容而只有少量动态绑定的模板时，效率低下问题就会变得很明显 – 整个虚拟DOM树仍然需要递归遍历来算出哪里发生了变化。</p><p>幸运的是，模板编译步骤给了我们分析静态模板和动态部分的机会。Vue 2通过跳过静态子树在一定程度上做到了这一点，但是由于编译器架构过于简单，更进一步的优化很难实现。在Vue 3中，我们用更合适的AST转换管道（AST transform pipeline）重写了编译器，它使得我们能以转换插件的形式进行编译时优化。</p><p>随着新架构的实施，我们希望找到一种开销尽可能低的渲染策略。一个选择是舍弃虚拟DOM，直接生成必要的DOM操作，但是那会丧失直接编写虚拟DOM渲染函数的能力，而我们发现这个能力对高级用户和库的开发者非常有用。另外，这又将是一个重大更新。</p><p>接下来最好的方法是消除不必要的虚拟DOM树遍历和属性比较，而这在更新过程中的性能损耗是最大的。为了实现这一点，编译器和运行时必须同时工作：编译器分析模板和生成带有优化提示的代码，同时，运行时拾取这些提示，并采取尽可能快的更新策略。这里主要有三个优化：</p><p>第一，从树的层面看，我们注意到，在没有使用可以动态改变树结构的指令（例如v-if和v-for）的情况下，节点结构是完全静态的。如果我们将模板划分为由这些结构指令分隔的嵌套“块”，那么每个“块”中的节点结构又会变成完全静态的。当我们在一个“块”内部更新节点时，我们不再需要递归遍历整棵树 – 因为“块”内的动态绑定可以在一个扁平数组（译者注：即一维数组）中被追踪到。通过将需要执行的树遍历运算减少一个数量级，这种优化规避了虚拟DOM的大部分开销。</p><p>第二，编译器会主动监测模板中的静态节点、静态子树甚至数据对象，并且把它们提取到结果代码中的渲染函数之外。这避免了在每个渲染函数中重新创建这些对象，极大的改善了内存使用，降低了垃圾回收频率。</p><p>第三，从标签元素的角度来说，编译器还会根据需要执行的更新类型为每个元素动态绑定生成一个优化标志。例如，一个有动态class和一些静态属性的元素会被标记为只需要进行类名检查。运行时会拾取这些提示并采取专门的快速更新策略。</p><p>结合这些技术，Vue 3占用的 CPU时间 还不到Vue 2的十分之一，极大地改善了我们的渲染更新基准测试性能。</p><p><strong>七、最小化包体积</strong></p><p>框架的体积同样影响它的性能。这是web应用程序遇到的一个独特问题，因为资源需要在使用时下载，并且在浏览器解析完必要的JavaScript代码之前，应用无法产生交互。对于单页面应用程序来说尤其如此。尽管Vue一直以来是比较轻量的 – Vue 2xx版本的运行时使用gzip压缩后只有23KB，我们还是注意到两个问题：</p><p>第一，不是所有人都会用到框架的所有功能。例如，一个不需要使用transition组件的应用仍然需要付出下载和解析与transition有关代码的代价。</p><p>第二，随着我们不断增加新特性，框架也在不断增长。当我们在权衡新特性的利弊时，包的体积必须考虑在内。最终，我们倾向于只添加大多数用户会用到的功能。</p><p>理想情况下，用户应该能够在构建时删除那些未使用的框架特性相关的代码 – 也叫tree-shaking，只留下他们用到的东西。这也使得我们可以在不增加其他用户成本的情况下，为一部分用户提供有用的特性。</p><p>在Vue 3中，我们通过把大部分全局API和内置帮助程序（internal helpers）转移到ES模块中来实现这一点。这允许现代打包器静态地分析模块依赖关系，并删除与未使用的特性相关的代码。模板编译器也可以生成tree-shaking友好的代码，它只会在模板中实际使用了该特性时才导入与该特性相关的帮助程序。</p><p>框架中的一些部分永远不能被tree-shaken，因为它们对任何一个应用都是必要的。我们称这些不可缺少的部分的体积为基准体积。尽管增加了大量的新特性，但Vue 3的基准体积用gzip压缩后只有大约10KB - 比Vue 2的一半还小。</p><p><strong>八、解决对规模化的需求</strong></p><p>我们还想提升Vue应对大型应用的能力。我们最初的Vue设计专注于较低的准入门槛和平缓的学习曲线。但是随着Vue的使用越来越广泛，我们意识到支持包含数百个模块以及由数十名开发者维护的大型项目是必要的。对这类项目，像TypeScript这样的类型系统，以及干净地组织可重用代码的能力是至关重要的，然而Vue 2在这方面的支持不够理想。</p><p>在Vue 3设计的早期阶段，我们尝试通过支持使用类编写组件来改进TypeScript集成。挑战在于，class所依赖的许多语言特性，例如类字段和修饰器，仍处于建议阶段。而在成为正式的JavaScript标准之前，这些特性仍然可能变化。这些问题所涉及的复杂性和不确定性让我们怀疑添加类API是否真的合理，因为它除了提供稍好的TypeScript集成之外，没有带来任何好处。</p><p>我们决定研究解决规模化问题的其他方法。受React Hooks的启发，我们考虑通过暴露更底层的响应式和组件生命周期API，来启用一种更自由的方式编写组件逻辑，我们称之为Composition API。与通过指定一长串option来定义组件不同，Composition API允许用户自由地像编写函数一样表达、组合和重用有状态组件逻辑，并且这些都提供了很好的TypeScript支持。</p><p>我们对这个想法感到兴奋。尽管Composition API设计出来是为了解决某些特定的问题，但在编写组件时只使用这类API来实现（译者注：指完全使用Composition API来编写组件）在技术上也是可行的。在提案的第一稿中，我们有些超前地提出可能会在后续的发布中使用Composition API替换已存在的Options API。这遭到社区成员的强烈反对，同时这也给了我们一个宝贵的教训，就是要清楚地表达长期计划和意图，以及理解用户的需要。在听取了社区的反馈后，我们彻底修改了这个提案，明确表示Composition API将会是Options API的修改和补充。修订后的提案得到的反响要积极得多，并收到了许多建设性的建议。</p><p><strong>九、寻求平衡</strong></p><p>在Vue的用户群中，有超过100万的开发人员是对HTML/CSS只有基本知识的初学者，或由jQuery转型而来的专业人士，或从其他框架迁移而来，或寻求前端解决方案的后端工程师，以及处理大规模软件的软件架构师。开发者的多样性造成了使用场景的多样性：一些开发人员可能希望在遗留应用程序上增加交互性；而另一些人则可能从事开发周期很短但维护时间有限的一次性项目；架构师可能必须处理大型、多年的项目，以及面对在项目生命周期中变化不定的开发团队。</p><p>当我们在各种权衡之间追求平衡的同时，Vue的设计也不断被这些需求不断塑造。Vue的口号：“渐进式框架”，含义就是封装由此过程产生的分层API设计。初学者可以通过一个CDN脚本、基于HTML的模板语法和直观的Options API获得一个平滑的学习曲线，而高级用户可以用全功能CLI、渲染函数和Composition API设计大规模的应用。</p><p>要实现我们的愿景，还有很多工作要做 – 最重要的是要更新支持库、文档和工具，以确保顺利迁移。在接下来的几个月里，我们将会努力工作，我们已经迫不及待地想看看Vue 3社区将会创造什么了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Vue3</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gojs组件------前端图形化插件之利器</title>
    <link href="/Gojs%E7%BB%84%E4%BB%B6------%E5%89%8D%E7%AB%AF%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%88%A9%E5%99%A8/"/>
    <url>/Gojs%E7%BB%84%E4%BB%B6------%E5%89%8D%E7%AB%AF%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%88%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die！</strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用jsPlumb这个组件本身还不错，使用方便、入门简单、轻量级，但是使用一段时间下来，发现一些弊病，比如组件不太稳定，初始进入页面的时候连线的样式有时会乱掉，刷新页面之后才能恢复正常，而且连线样式比较单一，容易让人产生视觉疲劳，加之最近公司在大力推行所谓的“工业4.0”，除了对自动化控制要求的提高之外，对这种图形化界面的要求也随之提高，所以单纯的jsPlumb组件效果已经不能满足日益发展的公司业务。基于以上种种，最终找到了Gojs组件，它效果强大、api丰富，唯一的不足就是这个组件是一个收费组件，可是在天朝，嘘…这是个不能说的秘密！</p><h1 id="一、组件效果预览"><a href="#一、组件效果预览" class="headerlink" title="一、组件效果预览"></a>一、组件效果预览</h1><p>先来两个炫酷点的效果：<br><img src="https://img-blog.csdnimg.cn/20210420173655509.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420173716399.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420173731858.gif" alt="在这里插入图片描述"><br>就最下面两个效果而言，就是jsPlumb无法实现的，可是这种效果在MES系统里面是很吸引人的，尤其是一些流程性的业务，用这种效果实现让可以一眼就感觉高大上了。并且咋一眼看上去，你根本都不相信这是一个web页面的效果。</p><p> 其他效果示例：<br> <img src="https://img-blog.csdnimg.cn/20210420173759992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021042017381095.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可折叠的树：<br><img src="https://img-blog.csdnimg.cn/20210420173834649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是图片吗？<br><img src="https://img-blog.csdnimg.cn/2021042017384774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>竟然还可以生成图表！<br><img src="https://img-blog.csdnimg.cn/20210420173900441.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420173914283.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420173924320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>想抢visio的饭碗吗？<br><img src="https://img-blog.csdnimg.cn/20210420174031610.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420174050114.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420174101683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>更多示例可查看<a href="https://gojs.net/latest/samples/index.html">GoJS</a></p><h1 id="二、初次接触"><a href="#二、初次接触" class="headerlink" title="二、初次接触"></a>二、初次接触</h1><p>老规矩，还是先来个入门教程。</p><p>源码下载：<a href="https://github.com/NorthwoodsSoftware/GoJS">https://github.com/NorthwoodsSoftware/GoJS</a></p><p>api详情：<a href="https://gojs.net/latest/api/index.html">https://gojs.net/latest/api/index.html</a></p><p>示例地址：<a href="https://gojs.net/latest/samples/index.html">https://gojs.net/latest/samples/index.html</a></p><h2 id="1、Gojs简介"><a href="#1、Gojs简介" class="headerlink" title="1、Gojs简介"></a>1、Gojs简介</h2><p>GoJS是一个功能丰富的JS库，在Web浏览器和平台上可实现自定义交互图和复杂的可视化效果，它用自定义模板和布局组件简化了节点、链接和分组等复杂的JS图表，给用户交互提供了许多先进的功能，如拖拽、复制、粘贴、文本编辑、工具提示、上下文菜单、自动布局、模板、数据绑定和模型、事务状态和撤销管理、调色板、概述、事件处理程序、命令和自定义操作的扩展工具系统。无需切换服务器和插件，GoJS就能实现用户互动并在浏览器中完全运行，呈现HTML5 Canvas元素或SVG，也不用服务器端请求。 GoJS不依赖于任何JS库或框架（例如bootstrap、jquery等），可与任何HTML或JS框架配合工作，甚至可以不用框架。</p><h2 id="2、使用入门"><a href="#2、使用入门" class="headerlink" title="2、使用入门"></a>2、使用入门</h2><p>（1）文件引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;gojs/go-debug_ok.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>可以用cdn上面的最新版本，也可以引用本地down下来的文件。如果是开发，可以引用debug版本的js，正式运行的时候引用正式的js，这个无需多讲。</p><p>（2）创建画布</p><p>随便定义一个html元素，作为我们的画布</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;myDiagramDiv&quot;</span> style=<span class="hljs-string">&quot;margin:auto;width:300px; height:300px; background-color:#ddd;&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>然后使用gojs的api初始化画布</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建画布</span><br>      <span class="hljs-keyword">var</span> objGo = go.GraphObject.make;<br>      <span class="hljs-keyword">var</span> myDiagram = objGo(go.Diagram, <span class="hljs-string">&quot;myDiagramDiv&quot;</span>,<br>          &#123;<br>              <span class="hljs-comment">//模型图的中心位置所在坐标</span><br>              <span class="hljs-attr">initialContentAlignment</span>: go.Spot.Center,<br>              <br>              <span class="hljs-comment">//允许用户操作图表的时候使用Ctrl-Z撤销和Ctrl-Y重做快捷键</span><br>              <span class="hljs-string">&quot;undoManager.isEnabled&quot;</span>: <span class="hljs-literal">true</span>,<br>              <br>              <span class="hljs-comment">//不运行用户改变图表的规模</span><br>              <span class="hljs-attr">allowZoom</span>: <span class="hljs-literal">false</span>,<br><br>              <span class="hljs-comment">//画布上面是否出现网格</span><br>              <span class="hljs-string">&quot;grid.visible&quot;</span>: <span class="hljs-literal">true</span>,<br><br>              <span class="hljs-comment">//允许在画布上面双击的时候创建节点</span><br>              <span class="hljs-string">&quot;clickCreatingTool.archetypeNodeData&quot;</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;Node&quot;</span> &#125;,<br><br>              <span class="hljs-comment">//允许使用ctrl+c、ctrl+v复制粘贴</span><br>              <span class="hljs-string">&quot;commandHandler.copiesTree&quot;</span>: <span class="hljs-literal">true</span>,  <br><br>              <span class="hljs-comment">//允许使用delete键删除节点</span><br>              <span class="hljs-string">&quot;commandHandler.deletesTree&quot;</span>: <span class="hljs-literal">true</span>, <br><br>              <span class="hljs-comment">// dragging for both move and copy</span><br>              <span class="hljs-string">&quot;draggingTool.dragsTree&quot;</span>: <span class="hljs-literal">true</span>,  <br>          &#125;);    <br></code></pre></td></tr></table></figure><p>官方示例用的<code>$</code>符号作为变量，博主觉得<code>$</code>符号太敏感，还是换个名字吧~以上几个参数都是博主摘选的，更多初始化画布的参数请参考官方api下图：<br><img src="https://img-blog.csdnimg.cn/20210420174518606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3）创建模型数据（Model）</p><p>接着上面的代码，我们增加如下几行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myModel = objGo(go.Model);<span class="hljs-comment">//创建Model对象</span><br>        <span class="hljs-comment">// model中的数据每一个js对象都代表着一个相应的模型图中的元素</span><br>        myModel.nodeDataArray = [<br>            &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;工厂&quot;</span> &#125;,<br>            &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;车间&quot;</span> &#125;,<br>            &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;工人&quot;</span> &#125;,<br>            &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;岗位&quot;</span> &#125;,<br>        ];<br>        myDiagram.model = myModel; <span class="hljs-comment">//将模型数据绑定到画布图上</span><br></code></pre></td></tr></table></figure><p>效果预览<img src="https://img-blog.csdnimg.cn/20210420174604965.gif" alt="在这里插入图片描述"><br>4）创建节点（Node）</p><p>上面有了画布和节点数据，只是有了一个雏形，但是还没有任何的图形化效果。我们加入一些效果试试</p><p>在gojs里面给我们提供了几种模型节点的可选项：</p><p><a href="https://gojs.net/latest/intro/shapes.html">Shape</a>:形状——Rectangle（矩形）、RoundedRectangle（圆角矩形），Ellipse（椭圆形），Triangle（三角形），Diamond（菱形），Circle（圆形）等<br><a href="https://gojs.net/latest/intro/textblocks.html">TextBlock</a>:文本域（可编辑）<br><a href="https://gojs.net/latest/intro/pictures.html">Picture</a>:图片<br><a href="https://gojs.net/latest/intro/panels.html">Panel</a>:容器来保存其他Node的集合<br>默认的节点模型代码只是由一个TextBlock组件构建成<br>我们增加如下一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个简单的节点模板</span><br>        myDiagram.nodeTemplate =<br>            objGo(go.Node, <span class="hljs-string">&quot;Horizontal&quot;</span>,<span class="hljs-comment">//横向布局的面板</span><br>                <span class="hljs-comment">// 节点淡蓝色背景</span><br>                &#123; <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;#44CCFF&quot;</span> &#125;,<br>                objGo(go.Shape,<br>                    <span class="hljs-string">&quot;RoundedRectangle&quot;</span>, <span class="hljs-comment">//定义形状，这是圆角矩形</span><br>                    &#123; <span class="hljs-comment">/* Shape的参数。宽高颜色等等*/</span>figure: <span class="hljs-string">&quot;Club&quot;</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">60</span>, <span class="hljs-attr">margin</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;red&#x27;</span> &#125;,<br>                    <span class="hljs-comment">// 绑定 Shape.figure属性为Node.data.fig的值，Model对象可以通过Node.data.fig 获取和设置Shape.figure（修改形状）</span><br>                    <span class="hljs-keyword">new</span> go.Binding(<span class="hljs-string">&quot;figure&quot;</span>, <span class="hljs-string">&quot;fig&quot;</span>), <span class="hljs-keyword">new</span> go.Binding(<span class="hljs-string">&#x27;fill&#x27;</span>, <span class="hljs-string">&#x27;fill2&#x27;</span>)),<br>                objGo(go.TextBlock,<br>                    <span class="hljs-string">&quot;Default Text&quot;</span>,  <span class="hljs-comment">// 默认文本</span><br>                    <span class="hljs-comment">// 设置字体大小颜色以及边距</span><br>                    &#123; <span class="hljs-attr">margin</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">stroke</span>: <span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-attr">font</span>: <span class="hljs-string">&quot;bold 16px sans-serif&quot;</span> &#125;,<br>                    <span class="hljs-comment">//绑定TextBlock.text 属性为Node.data.name的值，Model对象可以通过Node.data.name获取和设置TextBlock.text</span><br>                    <span class="hljs-keyword">new</span> go.Binding(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>))<br>            );<br><br>        <span class="hljs-keyword">var</span> myModel = objGo(go.Model);<span class="hljs-comment">//创建Model对象</span><br>        <span class="hljs-comment">// model中的数据每一个js对象都代表着一个相应的模型图中的元素</span><br>        myModel.nodeDataArray = [<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;工厂&quot;</span>, <span class="hljs-attr">fig</span>: <span class="hljs-string">&#x27;YinYang&#x27;</span>, <span class="hljs-attr">fill2</span>: <span class="hljs-string">&#x27;blue&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;车间&quot;</span>, <span class="hljs-attr">fig</span>: <span class="hljs-string">&#x27;Peace&#x27;</span>, <span class="hljs-attr">fill2</span>: <span class="hljs-string">&#x27;red&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;工人&quot;</span>, <span class="hljs-attr">fig</span>: <span class="hljs-string">&#x27;NotAllowed&#x27;</span>, <span class="hljs-attr">fill2</span>: <span class="hljs-string">&#x27;green&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;岗位&quot;</span>, <span class="hljs-attr">fig</span>: <span class="hljs-string">&#x27;Fragile&#x27;</span>, <span class="hljs-attr">fill2</span>: <span class="hljs-string">&#x27;yellow&#x27;</span> &#125;,<br>        ];<br>        myDiagram.model = myModel; <span class="hljs-comment">//将模型数据绑定到画布图上</span><br></code></pre></td></tr></table></figure><p>代码释疑：以上我们给画布对象定义了两种节点模板，一种是文本节点，另一种是形状节点（Node）。在形状节点中，我们定义了数据模型的通用节点样式，就是这一段代码 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-comment">/* Shape的参数。宽高颜色等等*/</span>figure: <span class="hljs-string">&quot;Club&quot;</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">60</span>, <span class="hljs-attr">margin</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;red&#x27;</span> &#125;,<br></code></pre></td></tr></table></figure><p><strong>然后通过 <code>new go.Binding(&quot;figure&quot;, &quot;fig&quot;)</code>方法将模板里面的属性映射到数据实例中，比如这里模板里面的figure属性定义的是Club，如果在我们的数据里面定义fig属性，那么它就会覆盖模板里面的figure的默认值。同样，fill和fill2也是通过同样的原理去区别模板中的样式和实例中的实际样式的！</strong><br>注：更多figure属性的取值详见 <a href="https://gojs.net/latest/extensions/Figures.js">这里</a><br>效果如下：<br><img src="https://img-blog.csdnimg.cn/20210420175144453.gif" alt="在这里插入图片描述"><br>由此可见我们数据里面的属性会覆盖模板的原始属性，如果是新增的节点，由于没有自定义数据属性，所以呈现到界面上面的时候就是模板里面的原生样式！</p><p>（5）节点连线</p><p>有了上面的基础，我们可以在画布上面画出我们想要的图形效果了，可是还没有连线。我们知道连线是建立在节点模型的上面的，于是乎我们的Model又分为了以下三种类型：</p><p>Model：最基本的（不带连线，如上面的例子）<br>GraphLinksModel ：高级点的动态连线图<br>TreeModel：树形图的模型（从例子看好像用的不多）<br>GraphLinksModel中为model.nodeDataArray提供model.linkDataArray为node节点连线保存数据模型信息，其实也是的一个JSON数组对象，每个线条都有两个属性 “to” 和 “from” 即Node节点的“key”值，两个属性代表两个key表示两个节点间的连线。</p><p>我们上面已经写过最基本的Model的例子了，我们再来个带连线的Model的示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myModel = objGo(go.GraphLinksModel);<br>        myModel.nodeDataArray =<br>            [<br>                &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;aaa&quot;</span> ,<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;工厂&quot;</span> &#125;,<br>                &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;bbb&quot;</span> ,<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;车间&quot;</span>&#125;,<br>                &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;ccc&quot;</span> ,<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;车间&quot;</span> &#125;<br>            ];<br>        myModel.linkDataArray =<br>            [<br>                &#123; <span class="hljs-attr">from</span>: <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">&quot;bbb&quot;</span> &#125;,<br>                &#123; <span class="hljs-attr">from</span>: <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">&quot;ccc&quot;</span> &#125;<br>            ];<br>        myDiagram.model = myModel;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20210420175221785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>学习了Model、GraphLinksModel，还剩下一种TreeModel树节点的模型，这个博主不打算做详细介绍，有兴趣可以直接查看官网。</p><h1 id="三、综合效果"><a href="#三、综合效果" class="headerlink" title="三、综合效果"></a>三、综合效果</h1><p>关于综合效果，博主不打算将gojs的api逐个翻个遍了，这样太耗时间，伤不起，只是将官方示例中的部分源码截取出来供大家参考。有需要的再细究！</p><h2 id="1、自定义流程的使用"><a href="#1、自定义流程的使用" class="headerlink" title="1、自定义流程的使用"></a>1、自定义流程的使用</h2><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20210420175330889.gif" alt="在这里插入图片描述"><br>建议各位copy代码，在本地看到效果，然后再根据实际需求去研究它的api，这样才不会太盲目而花费太多时间。</p><h2 id="2、工业流程图"><a href="#2、工业流程图" class="headerlink" title="2、工业流程图"></a>2、工业流程图</h2><p><img src="https://img-blog.csdnimg.cn/20210420175534446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>本文根据js的一些基础用法做了简单介绍，今天就先到这里，以后有问题了再来跟大家分享。如果你的项目里面也有这种业务需求，可以用起来试试！需要说明一点，如果您的公司不缺钱，建议使用正版授权的组件，毕竟尊重作者的劳动成果很重要！</p><p>本文原创出处：<a href="http://www.cnblogs.com/landeanfen/">http://www.cnblogs.com/landeanfen/</a></p><h1 id="五、附三中①②代码"><a href="#五、附三中①②代码" class="headerlink" title="五、附三中①②代码"></a>五、附三中①②代码</h1><p>①</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;<br>&lt;title&gt;Draggable Link&lt;/title&gt;<br>&lt;meta name=&quot;description&quot; content=&quot;Drag a link to reconnect it. Nodes have custom Adornments for selection, resizing, and reshaping.&quot; /&gt;<br>&lt;!-- Copyright 1998-2017 by Northwoods Software Corporation. --&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;script src=&quot;../../gojs/go-debug.js&quot;&gt;&lt;/script&gt;<br>&lt;script id=&quot;code&quot;&gt;<br>  function init() &#123;<br>    if (window.goSamples) goSamples();  // init for these samples -- you don&#x27;t need to call this<br>    var objGo = go.GraphObject.make;  // for conciseness in defining templates<br><br>    myDiagram =<br>      objGo(go.Diagram, &quot;myDiagramDiv&quot;,  // must name or refer to the DIV HTML element<br>        &#123;<br>          grid: objGo(go.Panel, &quot;Grid&quot;,<br>                  objGo(go.Shape, &quot;LineH&quot;, &#123; stroke: &quot;lightgray&quot;, strokeWidth: 0.5 &#125;),<br>                  objGo(go.Shape, &quot;LineH&quot;, &#123; stroke: &quot;gray&quot;, strokeWidth: 0.5, interval: 10 &#125;),<br>                  objGo(go.Shape, &quot;LineV&quot;, &#123; stroke: &quot;lightgray&quot;, strokeWidth: 0.5 &#125;),<br>                  objGo(go.Shape, &quot;LineV&quot;, &#123; stroke: &quot;gray&quot;, strokeWidth: 0.5, interval: 10 &#125;)<br>                ),<br>          allowDrop: true,  // must be true to accept drops from the Palette<br>          &quot;draggingTool.dragsLink&quot;: true,<br>          &quot;draggingTool.isGridSnapEnabled&quot;: true,<br>          &quot;linkingTool.isUnconnectedLinkValid&quot;: true,<br>          &quot;linkingTool.portGravity&quot;: 20,<br>          &quot;relinkingTool.isUnconnectedLinkValid&quot;: true,<br>          &quot;relinkingTool.portGravity&quot;: 20,<br>          &quot;relinkingTool.fromHandleArchetype&quot;:<br>            objGo(go.Shape, &quot;Diamond&quot;, &#123; segmentIndex: 0, cursor: &quot;pointer&quot;, desiredSize: new go.Size(8, 8), fill: &quot;tomato&quot;, stroke: &quot;darkred&quot; &#125;),<br>          &quot;relinkingTool.toHandleArchetype&quot;:<br>            objGo(go.Shape, &quot;Diamond&quot;, &#123; segmentIndex: -1, cursor: &quot;pointer&quot;, desiredSize: new go.Size(8, 8), fill: &quot;darkred&quot;, stroke: &quot;tomato&quot; &#125;),<br>          &quot;linkReshapingTool.handleArchetype&quot;:<br>            objGo(go.Shape, &quot;Diamond&quot;, &#123; desiredSize: new go.Size(7, 7), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br>          rotatingTool: objGo(TopRotatingTool),  // defined below<br>          &quot;rotatingTool.snapAngleMultiple&quot;: 15,<br>          &quot;rotatingTool.snapAngleEpsilon&quot;: 15,<br>          &quot;undoManager.isEnabled&quot;: true<br>        &#125;);<br><br>    // when the document is modified, add a &quot;*&quot; to the title and enable the &quot;Save&quot; button<br>    myDiagram.addDiagramListener(&quot;Modified&quot;, function(e) &#123;<br>      var button = document.getElementById(&quot;SaveButton&quot;);<br>      if (button) button.disabled = !myDiagram.isModified;<br>      var idx = document.title.indexOf(&quot;*&quot;);<br>      if (myDiagram.isModified) &#123;<br>        if (idx &lt; 0) document.title += &quot;*&quot;;<br>      &#125; else &#123;<br>        if (idx &gt;= 0) document.title = document.title.substr(0, idx);<br>      &#125;<br>    &#125;);<br><br>    // Define a function for creating a &quot;port&quot; that is normally transparent.<br>    // The &quot;name&quot; is used as the GraphObject.portId, the &quot;spot&quot; is used to control how links connect<br>    // and where the port is positioned on the node, and the boolean &quot;output&quot; and &quot;input&quot; arguments<br>    // control whether the user can draw links from or to the port.<br>    function makePort(name, spot, output, input) &#123;<br>      // the port is basically just a small transparent square<br>      return objGo(go.Shape, &quot;Circle&quot;,<br>               &#123;<br>                  fill: null,  // not seen, by default; set to a translucent gray by showSmallPorts, defined below<br>                  stroke: null,<br>                  desiredSize: new go.Size(7, 7),<br>                  alignment: spot,  // align the port on the main Shape<br>                  alignmentFocus: spot,  // just inside the Shape<br>                  portId: name,  // declare this object to be a &quot;port&quot;<br>                  fromSpot: spot, toSpot: spot,  // declare where links may connect at this port<br>                  fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here<br>                  cursor: &quot;pointer&quot;  // show a different cursor to indicate potential link point<br>               &#125;);<br>    &#125;<br><br>    var nodeSelectionAdornmentTemplate =<br>      objGo(go.Adornment, &quot;Auto&quot;,<br>        objGo(go.Shape, &#123; fill: null, stroke: &quot;deepskyblue&quot;, strokeWidth: 1.5, strokeDashArray: [4, 2] &#125;),<br>        objGo(go.Placeholder)<br>      );<br><br>    var nodeResizeAdornmentTemplate =<br>      objGo(go.Adornment, &quot;Spot&quot;,<br>        &#123; locationSpot: go.Spot.Right &#125;,<br>        objGo(go.Placeholder),<br>        objGo(go.Shape, &#123; alignment: go.Spot.TopLeft, cursor: &quot;nw-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br>        objGo(go.Shape, &#123; alignment: go.Spot.Top, cursor: &quot;n-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br>        objGo(go.Shape, &#123; alignment: go.Spot.TopRight, cursor: &quot;ne-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br><br>        objGo(go.Shape, &#123; alignment: go.Spot.Left, cursor: &quot;w-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br>        objGo(go.Shape, &#123; alignment: go.Spot.Right, cursor: &quot;e-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br><br>        objGo(go.Shape, &#123; alignment: go.Spot.BottomLeft, cursor: &quot;se-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br>        objGo(go.Shape, &#123; alignment: go.Spot.Bottom, cursor: &quot;s-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br>        objGo(go.Shape, &#123; alignment: go.Spot.BottomRight, cursor: &quot;sw-resize&quot;, desiredSize: new go.Size(6, 6), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;)<br>      );<br><br>    var nodeRotateAdornmentTemplate =<br>      objGo(go.Adornment,<br>        &#123; locationSpot: go.Spot.Center, locationObjectName: &quot;CIRCLE&quot; &#125;,<br>        objGo(go.Shape, &quot;Circle&quot;, &#123; name: &quot;CIRCLE&quot;, cursor: &quot;pointer&quot;, desiredSize: new go.Size(7, 7), fill: &quot;lightblue&quot;, stroke: &quot;deepskyblue&quot; &#125;),<br>        objGo(go.Shape, &#123; geometryString: &quot;M3.5 7 L3.5 30&quot;, isGeometryPositioned: true, stroke: &quot;deepskyblue&quot;, strokeWidth: 1.5, strokeDashArray: [4, 2] &#125;)<br>      );<br><br>    myDiagram.nodeTemplate =<br>      objGo(go.Node, &quot;Spot&quot;,<br>        &#123; locationSpot: go.Spot.Center &#125;,<br>        new go.Binding(&quot;location&quot;, &quot;loc&quot;, go.Point.parse).makeTwoWay(go.Point.stringify),<br>        &#123; selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate &#125;,<br>        &#123; resizable: true, resizeObjectName: &quot;PANEL&quot;, resizeAdornmentTemplate: nodeResizeAdornmentTemplate &#125;,<br>        &#123; rotatable: true, rotateAdornmentTemplate: nodeRotateAdornmentTemplate &#125;,<br>        new go.Binding(&quot;angle&quot;).makeTwoWay(),<br>        // the main object is a Panel that surrounds a TextBlock with a Shape<br>        objGo(go.Panel, &quot;Auto&quot;,<br>          &#123; name: &quot;PANEL&quot; &#125;,<br>          new go.Binding(&quot;desiredSize&quot;, &quot;size&quot;, go.Size.parse).makeTwoWay(go.Size.stringify),<br>          objGo(go.Shape, &quot;Rectangle&quot;,  // default figure<br>            &#123;<br>              portId: &quot;&quot;, // the default port: if no spot on link data, use closest side<br>              fromLinkable: true, toLinkable: true, cursor: &quot;pointer&quot;,<br>              fill: &quot;white&quot;,  // default color<br>              strokeWidth: 2<br>            &#125;,<br>            new go.Binding(&quot;figure&quot;),<br>            new go.Binding(&quot;fill&quot;)),<br>          objGo(go.TextBlock,<br>            &#123;<br>              font: &quot;bold 11pt Helvetica, Arial, sans-serif&quot;,<br>              margin: 8,<br>              maxSize: new go.Size(160, NaN),<br>              wrap: go.TextBlock.WrapFit,<br>              editable: true<br>            &#125;,<br>            new go.Binding(&quot;text&quot;).makeTwoWay())<br>        ),<br>        // four small named ports, one on each side:<br>        makePort(&quot;T&quot;, go.Spot.Top, false, true),<br>        makePort(&quot;L&quot;, go.Spot.Left, true, true),<br>        makePort(&quot;R&quot;, go.Spot.Right, true, true),<br>        makePort(&quot;B&quot;, go.Spot.Bottom, true, false),<br>        &#123; // handle mouse enter/leave events to show/hide the ports<br>          mouseEnter: function(e, node) &#123; showSmallPorts(node, true); &#125;,<br>          mouseLeave: function(e, node) &#123; showSmallPorts(node, false); &#125;<br>        &#125;<br>      );<br><br>    function showSmallPorts(node, show) &#123;<br>      node.ports.each(function(port) &#123;<br>        if (port.portId !== &quot;&quot;) &#123;  // don&#x27;t change the default port, which is the big shape<br>          port.fill = show ? &quot;rgba(0,0,0,.3)&quot; : null;<br>        &#125;<br>      &#125;);<br>    &#125;<br><br>    var linkSelectionAdornmentTemplate =<br>      objGo(go.Adornment, &quot;Link&quot;,<br>        objGo(go.Shape,<br>          // isPanelMain declares that this Shape shares the Link.geometry<br>          &#123; isPanelMain: true, fill: null, stroke: &quot;deepskyblue&quot;, strokeWidth: 0 &#125;)  // use selection object&#x27;s strokeWidth<br>      );<br><br>    myDiagram.linkTemplate =<br>      objGo(go.Link,  // the whole link panel<br>        &#123; selectable: true, selectionAdornmentTemplate: linkSelectionAdornmentTemplate &#125;,<br>        &#123; relinkableFrom: true, relinkableTo: true, reshapable: true &#125;,<br>        &#123;<br>          routing: go.Link.AvoidsNodes,<br>          curve: go.Link.JumpOver,<br>          corner: 5,<br>          toShortLength: 4<br>        &#125;,<br>        new go.Binding(&quot;points&quot;).makeTwoWay(),<br>        objGo(go.Shape,  // the link path shape<br>          &#123; isPanelMain: true, strokeWidth: 2 &#125;),<br>        objGo(go.Shape,  // the arrowhead<br>          &#123; toArrow: &quot;Standard&quot;, stroke: null &#125;),<br>        objGo(go.Panel, &quot;Auto&quot;,<br>          new go.Binding(&quot;visible&quot;, &quot;isSelected&quot;).ofObject(),<br>          objGo(go.Shape, &quot;RoundedRectangle&quot;,  // the link shape<br>            &#123; fill: &quot;#F8F8F8&quot;, stroke: null &#125;),<br>          objGo(go.TextBlock,<br>            &#123;<br>              textAlign: &quot;center&quot;,<br>              font: &quot;10pt helvetica, arial, sans-serif&quot;,<br>              stroke: &quot;#919191&quot;,<br>              margin: 2,<br>              minSize: new go.Size(10, NaN),<br>              editable: true<br>            &#125;,<br>            new go.Binding(&quot;text&quot;).makeTwoWay())<br>        )<br>      );<br><br>    load();  // load an initial diagram from some JSON text<br><br>    // initialize the Palette that is on the left side of the page<br>    myPalette =<br>      objGo(go.Palette, &quot;myPaletteDiv&quot;,  // must name or refer to the DIV HTML element<br>        &#123;<br>          maxSelectionCount: 1,<br>          nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram<br>          linkTemplate: // simplify the link template, just in this Palette<br>            objGo(go.Link,<br>              &#123; // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,<br>                // to line up the Link in the same manner we have to pretend the Link has the same location spot<br>                locationSpot: go.Spot.Center,<br>                selectionAdornmentTemplate:<br>                  objGo(go.Adornment, &quot;Link&quot;,<br>                    &#123; locationSpot: go.Spot.Center &#125;,<br>                    objGo(go.Shape,<br>                      &#123; isPanelMain: true, fill: null, stroke: &quot;deepskyblue&quot;, strokeWidth: 0 &#125;),<br>                    objGo(go.Shape,  // the arrowhead<br>                      &#123; toArrow: &quot;Standard&quot;, stroke: null &#125;)<br>                  )<br>              &#125;,<br>              &#123;<br>                routing: go.Link.AvoidsNodes,<br>                curve: go.Link.JumpOver,<br>                corner: 5,<br>                toShortLength: 4<br>              &#125;,<br>              new go.Binding(&quot;points&quot;),<br>              objGo(go.Shape,  // the link path shape<br>                &#123; isPanelMain: true, strokeWidth: 2 &#125;),<br>              objGo(go.Shape,  // the arrowhead<br>                &#123; toArrow: &quot;Standard&quot;, stroke: null &#125;)<br>            ),<br>          model: new go.GraphLinksModel([  // specify the contents of the Palette<br>            &#123; text: &quot;Start&quot;, figure: &quot;Circle&quot;, fill: &quot;#00AD5F&quot; &#125;,<br>            &#123; text: &quot;Step&quot; &#125;,<br>            &#123; text: &quot;DB&quot;, figure: &quot;Database&quot;, fill: &quot;lightgray&quot; &#125;,<br>            &#123; text: &quot;???&quot;, figure: &quot;Diamond&quot;, fill: &quot;lightskyblue&quot; &#125;,<br>            &#123; text: &quot;End&quot;, figure: &quot;Circle&quot;, fill: &quot;#CE0620&quot; &#125;,<br>            &#123; text: &quot;Comment&quot;, figure: &quot;RoundedRectangle&quot;, fill: &quot;lightyellow&quot; &#125;<br>          ], [<br>            // the Palette also has a disconnected Link, which the user can drag-and-drop<br>            &#123; points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) &#125;<br>          ])<br>        &#125;);<br>  &#125;<br><br><br>  function TopRotatingTool() &#123;<br>    go.RotatingTool.call(this);<br>  &#125;<br>  go.Diagram.inherit(TopRotatingTool, go.RotatingTool);<br><br>  /** @override */<br>  TopRotatingTool.prototype.updateAdornments = function(part) &#123;<br>    go.RotatingTool.prototype.updateAdornments.call(this, part);<br>    var adornment = part.findAdornment(&quot;Rotating&quot;);<br>    if (adornment !== null) &#123;<br>      adornment.location = part.rotateObject.getDocumentPoint(new go.Spot(0.5, 0, 0, -30));  // above middle top<br>    &#125;<br>  &#125;;<br><br>  /** @override */<br>  TopRotatingTool.prototype.rotate = function(newangle) &#123;<br>    go.RotatingTool.prototype.rotate.call(this, newangle + 90);<br>  &#125;;<br>  // end of TopRotatingTool class<br><br><br>  // Show the diagram&#x27;s model in JSON format that the user may edit<br>  function save() &#123;<br>    saveDiagramProperties();  // do this first, before writing to JSON<br>    document.getElementById(&quot;mySavedModel&quot;).value = myDiagram.model.toJson();<br>    myDiagram.isModified = false;<br>  &#125;<br>  function load() &#123;<br>    myDiagram.model = go.Model.fromJson(document.getElementById(&quot;mySavedModel&quot;).value);<br>    loadDiagramProperties();  // do this after the Model.modelData has been brought into memory<br>  &#125;<br><br>  function saveDiagramProperties() &#123;<br>    myDiagram.model.modelData.position = go.Point.stringify(myDiagram.position);<br>  &#125;<br>  function loadDiagramProperties(e) &#123;<br>    // set Diagram.initialPosition, not Diagram.position, to handle initialization side-effects<br>    var pos = myDiagram.model.modelData.position;<br>    if (pos) myDiagram.initialPosition = go.Point.parse(pos);<br>  &#125;<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body onload=&quot;init()&quot;&gt;<br>&lt;div id=&quot;sample&quot;&gt;<br>  &lt;div style=&quot;width:100%; white-space:nowrap;&quot;&gt;<br>    &lt;span style=&quot;display: inline-block; vertical-align: top; width:105px&quot;&gt;<br>      &lt;div id=&quot;myPaletteDiv&quot; style=&quot;border: solid 1px black; height: 620px&quot;&gt;&lt;/div&gt;<br>    &lt;/span&gt;<br><br>    &lt;span style=&quot;display: inline-block; vertical-align: top; width:80%&quot;&gt;<br>      &lt;div id=&quot;myDiagramDiv&quot; style=&quot;border: solid 1px black; height: 620px&quot;&gt;&lt;/div&gt;<br>    &lt;/span&gt;<br>  &lt;/div&gt;<br>  &lt;p&gt;<br>    This sample demonstrates the ability for the user to drag around a Link as if it were a Node.<br>    When either end of the link passes over a valid port, the port is highlighted.<br>  &lt;/p&gt;<br>  &lt;p&gt;<br>    The link-dragging functionality is enabled by setting some or all of the following properties:<br>    &lt;a&gt;DraggingTool.dragsLink&lt;/a&gt;, &lt;a&gt;LinkingTool.isUnconnectedLinkValid&lt;/a&gt;, and<br>    &lt;a&gt;RelinkingTool.isUnconnectedLinkValid&lt;/a&gt;.<br>  &lt;/p&gt;<br>  &lt;p&gt;<br>    Note that a Link is present in the &lt;a&gt;Palette&lt;/a&gt; so that it too can be dragged out and onto<br>    the main Diagram.  Because links are not automatically routed when either end is not connected<br>    with a Node, the route is provided explicitly when that Palette item is defined.<br>  &lt;/p&gt;<br>  &lt;p&gt;<br>    This also demonstrates several custom Adornments:<br>    &lt;a&gt;Part.selectionAdornmentTemplate&lt;/a&gt;, &lt;a&gt;Part.resizeAdornmentTemplate&lt;/a&gt;, and<br>    &lt;a&gt;Part.rotateAdornmentTemplate&lt;/a&gt;.<br>  &lt;/p&gt;<br>  &lt;p&gt;<br>    Finally this sample demonstrates saving and restoring the &lt;a&gt;Diagram.position&lt;/a&gt; as a property<br>    on the &lt;a&gt;Model.modelData&lt;/a&gt; object that is automatically saved and restored when calling &lt;a&gt;Model.toJson&lt;/a&gt;<br>    and &lt;a&gt;Model.fromJson&lt;/a&gt;.<br>  &lt;/p&gt;<br>  &lt;div&gt;<br>    &lt;div&gt;<br>      &lt;button id=&quot;SaveButton&quot; onclick=&quot;save()&quot;&gt;Save&lt;/button&gt;<br>      &lt;button onclick=&quot;load()&quot;&gt;Load&lt;/button&gt;<br>      Diagram Model saved in JSON format:<br>    &lt;/div&gt;<br>    &lt;textarea id=&quot;mySavedModel&quot; style=&quot;width:100%;height:300px&quot;&gt;<br>&#123; &quot;class&quot;: &quot;go.GraphLinksModel&quot;,<br>  &quot;linkFromPortIdProperty&quot;: &quot;fromPort&quot;,<br>  &quot;linkToPortIdProperty&quot;: &quot;toPort&quot;,<br>  &quot;nodeDataArray&quot;: [<br> ],<br>  &quot;linkDataArray&quot;: [<br> ]&#125;<br>    &lt;/textarea&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>②</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;<br>&lt;title&gt;Process Flow&lt;/title&gt;<br>&lt;meta name=&quot;description&quot; content=&quot;A simple process flow or SCADA diagram editor, simulating equipment monitoring and control.&quot; /&gt;<br>&lt;!-- Copyright 1998-2017 by Northwoods Software Corporation. --&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;script src=&quot;../../gojs/go-debug.js&quot;&gt;&lt;/script&gt;<br>&lt;script id=&quot;code&quot;&gt;<br>  function init() &#123;<br>    if (window.goSamples) goSamples();  // init for these samples -- you don&#x27;t need to call this<br>    var $ = go.GraphObject.make;  // for more concise visual tree definitions<br><br>    myDiagram =<br>      $(go.Diagram, &quot;myDiagramDiv&quot;,<br>        &#123;<br>          &quot;grid.visible&quot;: true,<br>          &quot;grid.gridCellSize&quot;: new go.Size(30, 20),<br>          &quot;draggingTool.isGridSnapEnabled&quot;: true,<br>          &quot;resizingTool.isGridSnapEnabled&quot;: true,<br>          &quot;rotatingTool.snapAngleMultiple&quot;: 90,<br>          &quot;rotatingTool.snapAngleEpsilon&quot;: 45,<br>          &quot;undoManager.isEnabled&quot;: true<br>        &#125;);<br><br>    // when the document is modified, add a &quot;*&quot; to the title and enable the &quot;Save&quot; button<br>    myDiagram.addDiagramListener(&quot;Modified&quot;, function(e) &#123;<br>      var button = document.getElementById(&quot;SaveButton&quot;);<br>      if (button) button.disabled = !myDiagram.isModified;<br>      var idx = document.title.indexOf(&quot;*&quot;);<br>      if (myDiagram.isModified) &#123;<br>        if (idx &lt; 0) document.title += &quot;*&quot;;<br>      &#125; else &#123;<br>        if (idx &gt;= 0) document.title = document.title.substr(0, idx);<br>      &#125;<br>    &#125;);<br><br>    myDiagram.nodeTemplateMap.add(&quot;Process&quot;,<br>      $(go.Node, &quot;Auto&quot;,<br>        &#123; locationSpot: new go.Spot(0.5, 0.5), locationObjectName: &quot;SHAPE&quot;,<br>          resizable: true, resizeObjectName: &quot;SHAPE&quot; &#125;,<br>        new go.Binding(&quot;location&quot;, &quot;pos&quot;, go.Point.parse).makeTwoWay(go.Point.stringify),<br>        $(go.Shape, &quot;Cylinder1&quot;,<br>          &#123; name: &quot;SHAPE&quot;,<br>            strokeWidth: 2,<br>            fill: $(go.Brush, &quot;Linear&quot;,<br>                    &#123; start: go.Spot.Left, end: go.Spot.Right,<br>                      0: &quot;gray&quot;, 0.5: &quot;white&quot;, 1: &quot;gray&quot; &#125;),<br>            minSize: new go.Size(50, 50),<br>            portId: &quot;&quot;, fromSpot: go.Spot.AllSides, toSpot: go.Spot.AllSides<br>          &#125;,<br>          new go.Binding(&quot;desiredSize&quot;, &quot;size&quot;, go.Size.parse).makeTwoWay(go.Size.stringify)),<br>        $(go.TextBlock,<br>          &#123; alignment: go.Spot.Center, textAlign: &quot;center&quot;, margin: 5,<br>            editable: true &#125;,<br>          new go.Binding(&quot;text&quot;).makeTwoWay())<br>      ));<br><br>    myDiagram.nodeTemplateMap.add(&quot;Valve&quot;,<br>      $(go.Node, &quot;Vertical&quot;,<br>        &#123; locationSpot: new go.Spot(0.5, 1, 0, -21), locationObjectName: &quot;SHAPE&quot;,<br>          selectionObjectName: &quot;SHAPE&quot;, rotatable: true &#125;,<br>        new go.Binding(&quot;angle&quot;).makeTwoWay(),<br>        new go.Binding(&quot;location&quot;, &quot;pos&quot;, go.Point.parse).makeTwoWay(go.Point.stringify),<br>        $(go.TextBlock,<br>          &#123; alignment: go.Spot.Center, textAlign: &quot;center&quot;, margin: 5, editable: true &#125;,<br>          new go.Binding(&quot;text&quot;).makeTwoWay(),<br>          // keep the text upright, even when the whole node has been rotated upside down<br>          new go.Binding(&quot;angle&quot;, &quot;angle&quot;, function(a) &#123; return a === 180 ? 180 : 0; &#125;).ofObject()),<br>        $(go.Shape,<br>          &#123; name: &quot;SHAPE&quot;,<br>            geometryString: &quot;F1 M0 0 L40 20 40 0 0 20z M20 10 L20 30 M12 30 L28 30&quot;,<br>            strokeWidth: 2,<br>            fill: $(go.Brush, &quot;Linear&quot;, &#123; 0: &quot;gray&quot;, 0.35: &quot;white&quot;, 0.7: &quot;gray&quot; &#125;),<br>            portId: &quot;&quot;, fromSpot: new go.Spot(1, 0.35), toSpot: new go.Spot(0, 0.35) &#125;)<br>      ));<br><br>    myDiagram.linkTemplate =<br>      $(go.Link,<br>        &#123; routing: go.Link.AvoidsNodes, curve: go.Link.JumpGap, corner: 10, reshapable: true, toShortLength: 7 &#125;,<br>        new go.Binding(&quot;points&quot;).makeTwoWay(),<br>        // mark each Shape to get the link geometry with isPanelMain: true<br>        $(go.Shape, &#123; isPanelMain: true, stroke: &quot;black&quot;, strokeWidth: 5 &#125;),<br>        $(go.Shape, &#123; isPanelMain: true, stroke: &quot;gray&quot;, strokeWidth: 3 &#125;),<br>        $(go.Shape, &#123; isPanelMain: true, stroke: &quot;white&quot;, strokeWidth: 1, name: &quot;PIPE&quot;, strokeDashArray: [10, 10] &#125;),<br>        $(go.Shape, &#123; toArrow: &quot;Triangle&quot;, fill: &quot;black&quot;, stroke: null &#125;)<br>      );<br><br>    load();<br><br>    loop();  // animate some flow through the pipes<br>  &#125;<br><br>  function loop() &#123;<br>    var diagram = myDiagram;<br>    setTimeout(function() &#123;<br>      var oldskips = diagram.skipsUndoManager;<br>      diagram.skipsUndoManager = true;<br>      diagram.links.each(function(link) &#123;<br>          var shape = link.findObject(&quot;PIPE&quot;);<br>          var off = shape.strokeDashOffset - 2;<br>          shape.strokeDashOffset = (off &lt;= 0) ? 20 : off;<br>        &#125;);<br>      diagram.skipsUndoManager = oldskips;<br>      loop();<br>    &#125;, 100);<br>  &#125;<br><br>  function save() &#123;<br>    document.getElementById(&quot;mySavedModel&quot;).value = myDiagram.model.toJson();<br>    myDiagram.isModified = false;<br>  &#125;<br>  function load() &#123;<br>    myDiagram.model = go.Model.fromJson(document.getElementById(&quot;mySavedModel&quot;).value);<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;/head&gt;<br>&lt;body onload=&quot;init()&quot;&gt;<br>&lt;div id=&quot;sample&quot;&gt;<br>  &lt;div id=&quot;myDiagramDiv&quot; style=&quot;border: solid 1px black; width:100%; height:500px&quot;&gt;&lt;/div&gt;<br>  &lt;p&gt;<br>    A &lt;em&gt;process flow diagram&lt;/em&gt; is commonly used in chemical and process engineering to indicate the general flow of plant processes and equipment.<br>    A simple SCADA diagram, with animation of the flow along the pipes, is implemented here.<br>  &lt;/p&gt;<br>  &lt;p&gt;<br>    The diagram displays the background grid layer by setting &lt;b&gt;grid.visible&lt;/b&gt; to true,<br>    and also allows snapping to the grid using &lt;a&gt;DraggingTool.isGridSnapEnabled&lt;/a&gt;,<br>    &lt;a&gt;ResizingTool.isGridSnapEnabled&lt;/a&gt;, and &lt;a&gt;RotatingTool.snapAngleMultiple&lt;/a&gt; alongside &lt;a&gt;RotatingTool.snapAngleEpsilon&lt;/a&gt;.<br>  &lt;/p&gt;<br>  &lt;p&gt;<br>    The diagram also uses the &lt;b&gt;loop&lt;/b&gt; function to animate the links by adjusting the &lt;a&gt;Shape.strokeDashOffset&lt;/a&gt; every 100 ms.<br>  &lt;/p&gt;<br>  &lt;div&gt;<br>    &lt;div&gt;<br>      &lt;button id=&quot;SaveButton&quot; onclick=&quot;save()&quot;&gt;Save&lt;/button&gt;<br>      &lt;button onclick=&quot;load()&quot;&gt;Load&lt;/button&gt;<br>      Diagram Model saved in JSON format:<br>    &lt;/div&gt;<br>    &lt;textarea id=&quot;mySavedModel&quot; style=&quot;width:100%;height:300px&quot;&gt;<br>&#123; &quot;class&quot;: &quot;go.GraphLinksModel&quot;,<br>  &quot;nodeDataArray&quot;: [<br>&#123;&quot;key&quot;:&quot;P1&quot;, &quot;category&quot;:&quot;Process&quot;, &quot;pos&quot;:&quot;150 120&quot;, &quot;text&quot;:&quot;Process&quot;&#125;,<br>&#123;&quot;key&quot;:&quot;P2&quot;, &quot;category&quot;:&quot;Process&quot;, &quot;pos&quot;:&quot;330 320&quot;, &quot;text&quot;:&quot;Tank&quot;&#125;,<br>&#123;&quot;key&quot;:&quot;V1&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;270 120&quot;, &quot;text&quot;:&quot;V1&quot;&#125;,<br>&#123;&quot;key&quot;:&quot;P3&quot;, &quot;category&quot;:&quot;Process&quot;, &quot;pos&quot;:&quot;150 420&quot;, &quot;text&quot;:&quot;Pump&quot;&#125;,<br>&#123;&quot;key&quot;:&quot;V2&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;150 280&quot;, &quot;text&quot;:&quot;VM&quot;, &quot;angle&quot;:270&#125;,<br>&#123;&quot;key&quot;:&quot;V3&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;270 420&quot;, &quot;text&quot;:&quot;V2&quot;, &quot;angle&quot;:180&#125;,<br>&#123;&quot;key&quot;:&quot;P4&quot;, &quot;category&quot;:&quot;Process&quot;, &quot;pos&quot;:&quot;450 140&quot;, &quot;text&quot;:&quot;Reserve Tank&quot;&#125;,<br>&#123;&quot;key&quot;:&quot;V4&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;390 60&quot;, &quot;text&quot;:&quot;VA&quot;&#125;,<br>&#123;&quot;key&quot;:&quot;V5&quot;, &quot;category&quot;:&quot;Valve&quot;, &quot;pos&quot;:&quot;450 260&quot;, &quot;text&quot;:&quot;VB&quot;, &quot;angle&quot;:90&#125;<br> ],<br>  &quot;linkDataArray&quot;: [<br>&#123;&quot;from&quot;:&quot;P1&quot;, &quot;to&quot;:&quot;V1&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;P3&quot;, &quot;to&quot;:&quot;V2&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;V2&quot;, &quot;to&quot;:&quot;P1&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;P2&quot;, &quot;to&quot;:&quot;V3&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;V3&quot;, &quot;to&quot;:&quot;P3&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;V1&quot;, &quot;to&quot;:&quot;V4&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;V4&quot;, &quot;to&quot;:&quot;P4&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;V1&quot;, &quot;to&quot;:&quot;P2&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;P4&quot;, &quot;to&quot;:&quot;V5&quot;&#125;,<br>&#123;&quot;from&quot;:&quot;V5&quot;, &quot;to&quot;:&quot;P2&quot;&#125;<br> ]&#125;<br>    &lt;/textarea&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
      <tag>Gojs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生JavaScript封装去除数组重复元素的去重函数</title>
    <link href="/%E5%8E%9F%E7%94%9FJavaScript%E5%B0%81%E8%A3%85%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E5%8E%BB%E9%87%8D%E5%87%BD%E6%95%B0/"/>
    <url>/%E5%8E%9F%E7%94%9FJavaScript%E5%B0%81%E8%A3%85%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E5%8E%BB%E9%87%8D%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>Header：</strong> 原创不易，还请大家不吝指导赐教，Code is never die！</p><p>ps：本着让更多人不止解决问题，更能够学到一点点方法的目的。</p><p>今天给大家分享一下JavaScript封装一个数组去重函数方法。</p><p><strong>题目：</strong> 要求去除数组中重复的元素</p><p><strong>①思路：</strong> 把旧数组里面不重复的元素选取出来放到新数组中，重复的元素只保留一个，放到新数组中去重；</p><p><strong>②核心算法：</strong> 我们遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面没有出现过，我们就添加，否则不添加；</p><p><strong>③常见疑问：</strong> 我们怎么知道该元素没有存在？利用新数组.indexOf(数组元素) ，如果返回时 - 1 就说明新数组里面没有改元素。</p><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 封装函数：去除数组重复元素</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uniqueArr</span>(<span class="hljs-params">arr</span>) </span>&#123;<br><span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">if</span> (newArr.indexOf(arr[i]) === -<span class="hljs-number">1</span>) &#123;<br>newArr.push(arr[i]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> newArr;<br>&#125;<br>   <span class="hljs-keyword">var</span> demo1 = uniqueArr([<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]);<br>   <span class="hljs-keyword">var</span> demo2 = uniqueArr([<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]);<br>   <span class="hljs-built_in">console</span>.log(demo1); <span class="hljs-comment">// [&quot;c&quot;, &quot;a&quot;, &quot;z&quot;, &quot;x&quot;, &quot;b&quot;]</span><br>   <span class="hljs-built_in">console</span>.log(demo2); <span class="hljs-comment">// [&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;]</span><br></code></pre></td></tr></table></figure><p><strong>Ending…</strong><br>好啦，简单明了，自己封装有时候也并不麻烦，相反还可以根据一些实际的特殊需求自己设计，刺激而满满的成就感。还望各位支持一下~~~</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生JavaScript封装颠倒数组元素</title>
    <link href="/%E5%8E%9F%E7%94%9FJavaScript%E5%B0%81%E8%A3%85%E9%A2%A0%E5%80%92%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/"/>
    <url>/%E5%8E%9F%E7%94%9FJavaScript%E5%B0%81%E8%A3%85%E9%A2%A0%E5%80%92%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>Header：</strong> 原创不易，还请大家不吝指导赐教，Code is never die！</p><p>ps：本着让更多人不止解决问题，更能够学到一点点方法的目的。</p><p>今天给大家分享一下JavaScript原生代码封装reverse()方法。<br>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 利用封装函数翻转任意数组</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeArr</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>   <span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = arr.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>newArr[newArr.length] = arr[i];<br>&#125;<br><span class="hljs-keyword">return</span> newArr;<br>   &#125;<br>   <span class="hljs-keyword">var</span> arr1 = changeArr([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>]);<br>   <span class="hljs-built_in">console</span>.log(arr1); <span class="hljs-comment">// [9, 6, 4, 3, 1]</span><br>   <span class="hljs-keyword">var</span> arr2 = changeArr([<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]);<br>   <span class="hljs-built_in">console</span>.log(arr2); <span class="hljs-comment">// [&quot;blue&quot;, &quot;purple&quot;, &quot;green&quot;, &quot;red&quot;]</span><br></code></pre></td></tr></table></figure><p><strong>Ending…</strong><br>好啦，简单明了，自己封装有时候也并不麻烦，相反还可以根据一些实际的特殊需求自己设计，刺激而满满的成就感。还望各位支持一下~~~</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reverse()使用方法及常见问题</title>
    <link href="/reverse()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/reverse()%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>Header：</strong> 原创不易，还请大家不吝指导赐教，Code is never die！</p><p>ps：本着让更多人不止解决问题，更能够学到一点点方法的目的。</p><p>今天给大家分享一下JavaScript中最实用的方法之一——reverse()。</p><h4 id="一、简单用法"><a href="#一、简单用法" class="headerlink" title="一、简单用法"></a>一、简单用法</h4><p>相信身为前端工程师或者正在成为前端工程师的小伙伴都对它并不陌生，甚至非常熟悉，主要作用就是用于颠倒数组中元素的顺序，这里举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arrData = [<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;like&quot;</span>,<span class="hljs-string">&quot;your&quot;</span>,<span class="hljs-string">&quot;voice&quot;</span>]<br><span class="hljs-built_in">console</span>.log(arrData) <span class="hljs-comment">// [&quot;I&quot;,&quot;like&quot;,&quot;your&quot;,&quot;voice&quot;]</span><br><span class="hljs-keyword">var</span> arrData2 = [<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;like&quot;</span>,<span class="hljs-string">&quot;your&quot;</span>,<span class="hljs-string">&quot;voice&quot;</span>]<br><span class="hljs-built_in">console</span>.log(arrData2.reverse()) <span class="hljs-comment">// [&quot;voice&quot;,&quot;your&quot;,&quot;like&quot;,&quot;I&quot;,]</span><br></code></pre></td></tr></table></figure><p>这就是最简单的例子，能够使数组元素顺序发生变化，从而满足前端项目的需要。</p><h4 id="二、理解含义"><a href="#二、理解含义" class="headerlink" title="二、理解含义"></a>二、理解含义</h4><p>当然本篇小记并不是简单记一下流水账，说一下定义而已。重点在于讲一下颠倒数组元素之后发生的那些事儿。且听后面慢慢分析~~<br>接着上面的这个例子来说，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arrData = [<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;like&quot;</span>,<span class="hljs-string">&quot;your&quot;</span>,<span class="hljs-string">&quot;voice&quot;</span>]<br><span class="hljs-comment">//第一次 arrData</span><br><span class="hljs-built_in">console</span>.log(arrData) <span class="hljs-comment">// [&quot;I&quot;,&quot;like&quot;,&quot;your&quot;,&quot;voice&quot;]</span><br><span class="hljs-comment">//reverse()</span><br><span class="hljs-built_in">console</span>.log(arrData.reverse()) <span class="hljs-comment">// [&quot;voice&quot;,&quot;your&quot;,&quot;like&quot;,&quot;I&quot;]</span><br><span class="hljs-comment">//第一次 arrData</span><br><span class="hljs-built_in">console</span>.log(arrData) <span class="hljs-comment">// [&quot;voice&quot;,&quot;your&quot;,&quot;like&quot;,&quot;I&quot;]</span><br></code></pre></td></tr></table></figure><p>如前面所述，定义了两个变量分别单独打印原变量和<code>reverse()</code>后的数据都是正常的，但这里，打印同一个数据时就出现了“意外惊喜”，为什么第一次打印的<code>arrData</code>和第二次打印的<code>arrData</code>不一样呢？原因就在于：reverse()方法改变原数组，而不创建新数组。什么意思呢，我们分析一下整个过程：</p><p>①第一次正常打印<code>arrData</code>数据，也就是定义的值；</p><p>②第二步打印<code>arrData.reverse()</code>，同样是正常的颠倒数组元素打印。这里颠倒所发生的行为是颠倒然后打印出来，<strong>但是</strong> 随之改变的是 <code>arrData = [&quot;voice&quot;,&quot;your&quot;,&quot;like&quot;,&quot;I&quot;]</code>；</p><p>③第二次打印arrData，不言而喻，上一步<code>arrData.reverse()</code>已然改变了数据，故第二次打印的是改变后的数据。</p><h4 id="三、深入使用"><a href="#三、深入使用" class="headerlink" title="三、深入使用"></a>三、深入使用</h4><p>代码的世界如此美妙。接下来再进一步升华用法，不要走开，依然精彩…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arrData = [<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;like&quot;</span>,<span class="hljs-string">&quot;your&quot;</span>,<span class="hljs-string">&quot;voice&quot;</span>]<br><span class="hljs-comment">// 第一种方式</span><br><span class="hljs-built_in">console</span>.log(arrData + arrData.reverse()) <span class="hljs-comment">// voice,your,like,Ivoice,your,like,I</span><br><br><span class="hljs-keyword">var</span> arrData2 = [<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;like&quot;</span>,<span class="hljs-string">&quot;your&quot;</span>,<span class="hljs-string">&quot;voice&quot;</span>]<br><span class="hljs-comment">// 第二种方式</span><br><span class="hljs-built_in">console</span>.log(arrData2 + <span class="hljs-string">&quot;~&quot;</span> + arrData2.reverse()) <span class="hljs-comment">// I,like,your,voice~voice,your,like,I</span><br></code></pre></td></tr></table></figure><p>我只是简单的在中间多加了一个字符串<code>~</code>，出现了两种截然不同的结果是为什么呢？其实还是万变不离其宗，深入理解：<strong>reverse()方法改变原数组，而不创建新数组</strong>  接下来逐个分析</p><p>第一种方式：定义arrData，打印时拿到变量arrData，然后再拿到变量arrData.reverse()，此时会修改原定义的arrData，所以打印时的变量arrData就随之改变，此时<code>+</code>两边都是数组会被强制转换为字符串，然后拼接，最后一起打印出来，即出现代码中所示结果；</p><p>第二种方式：定义arrData，打印括号内拿到变量arrData，然后执行<code>+&quot;~&quot;</code>(这里需要知道，代码执行顺序都是从左至右)，这里变量arrData会被强制转化为字符串String类型，然后再拿到变量arrData.reverse()（此时前面已经被强制转化String类型，所以不会再受后面影响），接下来就是字符串<code>&quot;I,like,your,voice~&quot;+arrData.reverse()</code>，也会转化为字符串然后拼接，最后打印出来。</p><p><strong>总结：</strong> 字符串不会被“策反”而发生改变，而变量会随变量值是什么，它就跟着是什么。</p><p><strong>Ending…</strong><br>好啦，又一次地怀着激动的心啰里啰唆竟然码了2k，主要的是想要给大家分享拿到问题的整个流程和想法，咱们讨论区相互学习，还望各位支持一下~~~</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试基本---面向过程与面向对象</title>
    <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-面向过程"><a href="#1-面向过程" class="headerlink" title="1. 面向过程"></a>1. 面向过程</h3><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li><li><strong>总结</strong>：按照步骤编程  （函数和变量）</li></ul><h3 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2. 面向对象"></a>2. 面向对象</h3><ul><li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li><li><strong>总结</strong>：将需求分析出一个一个的对象，然后在分析出对象中的属性和方法，最后按照步骤编程（方法和属性）</li></ul><h3 id="3-面向过程与面向对象对比"><a href="#3-面向过程与面向对象对比" class="headerlink" title="3. 面向过程与面向对象对比"></a>3. 面向过程与面向对象对比</h3><table><thead><tr><th></th><th>面向过程</th><th>面向对象</th></tr></thead><tbody><tr><td>优点</td><td>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</td><td>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</td></tr><tr><td>缺点</td><td>不易维护、不易复用、不易扩展</td><td>性能比面向过程低</td></tr></tbody></table><h3 id="4-应用场景"><a href="#4-应用场景" class="headerlink" title="4. 应用场景"></a>4. 应用场景</h3><ul><li>比较简单的逻辑，使用面向过程，前端更偏向使用面向过程。</li><li>比较复杂的逻辑，使用面向对象，后端更偏向使用面向对象。</li></ul><p><strong>Ending…</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>面向过程</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试基本---forEach、filter、some大合集</title>
    <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---forEach%E3%80%81filter%E3%80%81some%E5%A4%A7%E5%90%88%E9%9B%86/"/>
    <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---forEach%E3%80%81filter%E3%80%81some%E5%A4%A7%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-0-数组方法forEach遍历数组"><a href="#1-0-数组方法forEach遍历数组" class="headerlink" title="1.0 数组方法forEach遍历数组 ***"></a>1.0 数组方法forEach遍历数组 ***</h3><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value， index， array</span>) </span>&#123;<br>       <span class="hljs-comment">//参数一是:数组元素</span><br>       <span class="hljs-comment">//参数二是:数组元素的索引</span><br>       <span class="hljs-comment">//参数三是:当前的数组</span><br> &#125;)<br>  <span class="hljs-comment">//相当于数组遍历的 for循环 没有返回值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">forEach</span>（<span class="hljs-title">fn</span>）</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">this</span>.length;i++)&#123;<br>        fn(<span class="hljs-built_in">this</span>[i],i,<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// forEach 迭代(遍历) 数组</span><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>    arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, array</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每个数组元素&#x27;</span> + value);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每个数组元素的索引号&#x27;</span> + index);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数组本身&#x27;</span> + array);<br>        sum += value;<br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(sum);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="2-0-数组方法filter过滤数组"><a href="#2-0-数组方法filter过滤数组" class="headerlink" title="2.0 数组方法filter过滤数组 ***"></a>2.0 数组方法filter过滤数组 ***</h3><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>， <span class="hljs-number">66</span>， <span class="hljs-number">4</span>， <span class="hljs-number">88</span>， <span class="hljs-number">3</span>， <span class="hljs-number">7</span>];<br>  <span class="hljs-keyword">var</span> newArr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value， index，array</span>) </span>&#123;<br>   <span class="hljs-comment">//参数一是:数组元素</span><br>     <span class="hljs-comment">//参数二是:数组元素的索引</span><br>     <span class="hljs-comment">//参数三是:当前的数组</span><br>     <span class="hljs-keyword">return</span> value &gt;= <span class="hljs-number">20</span>;<br>  &#125;);<br>  <span class="hljs-built_in">console</span>.log(newArr);<span class="hljs-comment">//[66，88] //返回值是一个新数组</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFilter</span>(<span class="hljs-params">fnCallback</span>)</span>&#123;<br>    <span class="hljs-comment">// 根据fnCallback的返回值来进行过滤</span><br>    <span class="hljs-comment">// 返回值就是过滤条件</span><br>    <span class="hljs-keyword">var</span> tj = fnCallback(<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,arr);<br>    <span class="hljs-keyword">if</span>(tj)&#123;<br>        newArr.push(<span class="hljs-number">12</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// filter 筛选数组</span><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">66</span>, <span class="hljs-number">4</span>, <span class="hljs-number">88</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">var</span> newArr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index</span>) </span>&#123;<br>        <span class="hljs-comment">// return value &gt;= 20;</span><br>        <span class="hljs-keyword">return</span> value % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>    &#125;);<br>    <span class="hljs-built_in">console</span>.log(newArr);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-0-数组方法some"><a href="#3-0-数组方法some" class="headerlink" title="3.0 数组方法some ***"></a>3.0 数组方法some ***</h3><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">some 查找数组中是否有满足条件的元素 <br> <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>， <span class="hljs-number">30</span>， <span class="hljs-number">4</span>];<br> <span class="hljs-keyword">var</span> flag = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value，index，array</span>) </span>&#123;<br>     <span class="hljs-comment">//参数一是:数组元素</span><br>     <span class="hljs-comment">//参数二是:数组元素的索引</span><br>     <span class="hljs-comment">//参数三是:当前的数组</span><br>     <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">15</span>;<br>  &#125;);<br><span class="hljs-built_in">console</span>.log(flag);<span class="hljs-comment">//返回值是布尔值，只要查找到满足条件的一个元素就立马终止循环</span><br><br><span class="hljs-comment">// some的源码</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">some</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>        <span class="hljs-keyword">var</span> result = fn(<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(result == <span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// some 查找数组中是否有满足条件的元素 </span><br>    <span class="hljs-comment">// var arr = [10, 30, 4];</span><br>    <span class="hljs-comment">// var flag = arr.some(function(value) &#123;</span><br>    <span class="hljs-comment">//     // return value &gt;= 20;</span><br>    <span class="hljs-comment">//     return value &lt; 3;</span><br>    <span class="hljs-comment">// &#125;);</span><br>    <span class="hljs-comment">// console.log(flag);</span><br>    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>];<br>    <span class="hljs-keyword">var</span> flag1 = arr1.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> value == <span class="hljs-string">&#x27;pink&#x27;</span>;<br>    &#125;);<br>    <span class="hljs-built_in">console</span>.log(flag1);<br>    <span class="hljs-comment">// 1. filter 也是查找满足条件的元素 返回的是一个数组 而且是把所有满足条件的元素返回回来</span><br>    <span class="hljs-comment">// 2. some 也是查找满足条件的元素是否存在  返回的是一个布尔值 如果查找到第一个满足条件的元素就终止循环</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结</strong><br>| 名称 | 作用 |参数  | 返回值| 备注|<br>|–|–|–|–|–|<br>| forEach| 遍历数组,取出数组中的每一项| function(value,index,array){}|没有返回值|不会使用回调函数的返回值|<br>| filter| 遍历数组,筛选出满足条件的项,将满足条件的项放到新数组中,并且返回| function(value,index,array){}|返回存放了满足条件的项的新数组|如果发现回调函数,返回了true,就会将当前的value,放到新数组中|<br>| some| 遍历数组,判断是否有满足条件的元素,如果有返回true,如果没有返回false| function(value,index,array){}|返回true/false|如果发现回调函数,返回了true,就会停止遍历|</p><p><strong>Ending…</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Array</tag>
      
      <tag>forEach</tag>
      
      <tag>filter</tag>
      
      <tag>some</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试基本---理解 “类“和 “对象“</title>
    <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E7%90%86%E8%A7%A3%20%E2%80%9C%E7%B1%BB%E2%80%9C%E5%92%8C%20%E2%80%9C%E5%AF%B9%E8%B1%A1%E2%80%9C/"/>
    <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC---%E7%90%86%E8%A7%A3%20%E2%80%9C%E7%B1%BB%E2%80%9C%E5%92%8C%20%E2%80%9C%E5%AF%B9%E8%B1%A1%E2%80%9C/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><h3 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h3 id="2-类"><a href="#2-类" class="headerlink" title="2. 类"></a>2. 类</h3><h4 id="2-1-类介绍"><a href="#2-1-类介绍" class="headerlink" title="2.1 类介绍"></a>2.1 类介绍</h4><ul><li><p>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</p></li><li><p>类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</p></li><li><p>类，对象，面向对象<strong>总结：</strong></p><p><strong>类</strong>抽象了对象的公共部分，它泛指某一大类（class） </p><p><strong>对象</strong>特指某一个，通过类实例化一个具体的对象 </p><p><strong>面向对象</strong>的思维特点:  </p><ol><li>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板) </li><li>对类进行实例化, 获取类的对象<ol><li>实例：实际的例子，对象</li><li>实例化：通过类的构造函数，来创建对象，实例</li></ol></li></ol></li></ul><h4 id="2-2-创建类"><a href="#2-2-创建类" class="headerlink" title="2.2 创建类"></a>2.2 创建类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//步骤1 定义类：使用class关键字</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">name</span> </span>&#123;<br>  <span class="hljs-comment">// class body</span><br>&#125;     <br><span class="hljs-comment">//步骤2 创建实例：使用定义的类创建实例  注意new关键字</span><br><span class="hljs-keyword">var</span> xx = <span class="hljs-keyword">new</span> name();     <br><br><br><span class="hljs-comment">// *****例子：</span><br><br><span class="hljs-comment">// 1. 创建类 class  创建一个 明星类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span> </span>&#123;<br>&#125;<br><br><span class="hljs-comment">// 2. 利用类创建对象 new</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star();<br></code></pre></td></tr></table></figure><p>问题：</p><p>但是这么创建的对象，没有属性和方法呀，怎么办？</p><p>需要用到<strong>构造函数</strong>。</p><h4 id="2-3-类创建添加属性和方法"><a href="#2-3-类创建添加属性和方法" class="headerlink" title="2.3 类创建添加属性和方法"></a>2.3 类创建添加属性和方法</h4><h5 id="1-构造函数介绍"><a href="#1-构造函数介绍" class="headerlink" title="1. 构造函数介绍"></a>1. 构造函数介绍</h5><ul><li>constructor() 方法是类的构造函数(默认方法)，用于传递参数,返回实例对象</li><li>通过 new 命令生成对象实例时，自动调用该方法</li><li>如果没有显示定义, 类内部会自动给我们创建一个constructor() </li><li><strong>构造函数的作用：给对象添加（构造）属性</strong></li></ul><h5 id="2-构造函数添加属性"><a href="#2-构造函数添加属性" class="headerlink" title="2. 构造函数添加属性"></a>2. 构造函数添加属性</h5><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//步骤1 在类中定义构造函数constructor，函数名固定</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age</span>)</span> &#123;<span class="hljs-comment">//定义形参</span><br>      <span class="hljs-built_in">this</span>.name = name;<span class="hljs-comment">//将形参赋值给this对象的对应属性</span><br>      <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;       <br><br><span class="hljs-comment">//步骤2 在实例化对象的时候，传递实参</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>); <span class="hljs-comment">//这里的实参默认传递给Person类中的constructor</span><br><span class="hljs-built_in">console</span>.log(ldh.name);<span class="hljs-comment">//刘德华</span><br></code></pre></td></tr></table></figure><p><strong>注意事项:</strong></p><ol><li>通过class 关键字创建类，类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数，可以接受传递过来的参数，同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时，就会自动调用这个函数，如果我们不写这个函数,类也会自动生成这个函数</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><h5 id="3-类中添加方法"><a href="#3-类中添加方法" class="headerlink" title="3. 类中添加方法"></a>3. 类中添加方法</h5><ul><li>语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//步骤1 添加普通方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age</span>)</span> &#123;  <br>      <span class="hljs-built_in">this</span>.name = name;<br>      <span class="hljs-built_in">this</span>.age = age;<br>      <span class="hljs-built_in">this</span>.btn = ...<br>      <span class="hljs-built_in">this</span>.btn.onclick = <span class="hljs-built_in">this</span>.say;<br>      <span class="hljs-comment">// this.btn.onclick(); --- this.btn.say()</span><br>       <span class="hljs-built_in">this</span>.btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;你好&#x27;</span>);<br>    &#125;<br>    &#125;<span class="hljs-comment">//-------------------------------------------&gt;注意,方法与方法之间不需要添加逗号</span><br>   <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;你好&#x27;</span>);<br>   &#125;<br><span class="hljs-keyword">var</span> say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;你好&#x27;</span>);<br>&#125;<br>&#125;       <br><br><span class="hljs-comment">//步骤2  通过对象调用方法</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>); <br>ldh.say()   <br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：        </p><ol><li>我们类里面所有的函数不需要写function </li><li><strong>多个函数方法之间不需要添加逗号分隔</strong></li></ol><h4 id="2-4-类的继承"><a href="#2-4-类的继承" class="headerlink" title="2.4 类的继承"></a>2.4 类的继承</h4><ul><li>现实中的继承：子承父业，比如我们都继承了父亲的姓。 </li><li>程序中的继承：子类可以继承父类的一些属性和方法。</li><li><strong>类的继承：为了复用代码</strong></li><li>语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;   <br>&#125; <br><br><span class="hljs-comment">// 子类继承父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;  <br>&#125;       <br></code></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">surname</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.surname= surname;<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你的姓是&#x27;</span> + <span class="hljs-built_in">this</span>.surname);<br>       &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;  <span class="hljs-comment">// 这样子类就继承了父类的属性和方法</span><br>    <br>&#125;<br><span class="hljs-keyword">var</span> damao= <span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;刘&#x27;</span>);<br>damao.say();      <span class="hljs-comment">//结果为 你的姓是刘</span><br></code></pre></td></tr></table></figure><ul><li>补充：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 1. Son如果只是要继承父类的方法，什么都不用写</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">money</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br>son.money();<br><span class="hljs-comment">// 2. Son如果要在父类的基础之上做扩展，就可以重写方法（重新书写）</span><br><span class="hljs-comment">// Son可以扩展属性，也可以扩展方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>         <span class="hljs-built_in">this</span>.x = x;<br>         <span class="hljs-built_in">this</span>.y = y;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br><br>     &#125;<br> &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-comment">// (1)重写父类的构造函数 (主要是为了扩展属性)</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y, z</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y); <span class="hljs-comment">//调用了父类中的构造函数</span><br>        <span class="hljs-comment">//相当于：</span><br>        <span class="hljs-comment">// Father(x,y);</span><br>        <span class="hljs-comment">//相当于：</span><br>        <span class="hljs-comment">// this.x = x; //调用父类的构造函数，让父类帮助Son添加x，y属性</span><br>        <span class="hljs-comment">// this.y = y;</span><br>        <span class="hljs-built_in">this</span>.z = z; <span class="hljs-comment">// son新增的属性，需要自己处理</span><br>    &#125;;<br>    <span class="hljs-comment">//（2） 自己新增的方法</span><br>    <span class="hljs-function"><span class="hljs-title">sum2</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y + <span class="hljs-built_in">this</span>.z);<br>    &#125;;<br>    <span class="hljs-comment">//（3）重写父类的普通方法</span><br>    <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// console.log(this.x + this.y);</span><br>        <span class="hljs-comment">//既然要重写，肯定是要与父亲不一样，所以，改为以下需求</span><br>        <span class="hljs-comment">//求 x  到 y 的和</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>son.sum2();<br>son.sum();<br></code></pre></td></tr></table></figure><ul><li>重写：<ul><li>什么是重写：重新定义父类继承过来的方法 </li><li>什么时候重写：子类要对父类方法进行扩展时，就可以重写方法</li></ul></li></ul><p><strong>Ending…</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
      <tag>类</tag>
      
      <tag>对象</tag>
      
      <tag>Class</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在html的js中获取外部js中的多个变量和数据</title>
    <link href="/%E5%9C%A8html%E7%9A%84js%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%A4%96%E9%83%A8js%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE/"/>
    <url>/%E5%9C%A8html%E7%9A%84js%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%A4%96%E9%83%A8js%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die !</strong></p><p>通常如果数据过多，我们会将数据单独拉出来存储到一个单独的js文件中，然后通过外部js引入进来使用数据。</p><p>目前比较简单而且用的比较多的是ES6语法规范的<code>exports&amp;import</code>方法。<br>使用方法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 外部定义dataList.js</span><br><span class="hljs-built_in">exports</span>.dataList = &#123;<br>  uname = <span class="hljs-string">&#x27;Rain&#x27;</span>,<br>    uage = <span class="hljs-string">&#x27;18&#x27;</span>,<br>    year = <span class="hljs-string">&#x27;2021-04-22 09:30&#x27;</span>,<br>    hometown = <span class="hljs-string">&#x27;China&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">使用数据的index.html文件<br>&lt;script&gt;<br><span class="hljs-keyword">import</span> &#123; dataList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(dataList);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>当然在项目中使用完全没有任何问题，但是当你测试或者单独两个文件这样使用的话就会出现问题，因为这种方法是ES6语法规范下的方法，在普通的JS中是使用的JavaScript语法，所以肯定会出现“不适”的问题出现，就是下面这个啦！<br><img src="https://img-blog.csdnimg.cn/20210422100907549.png" alt="在这里插入图片描述"><br>“无法在模块外部使用import语句”，意思就是说导入文件是ES6模块化语法，而浏览器并不支持ES6语法。就是这个问题导致的错误。</p><p>看到网上很多人给出的解决方法是：在script 标签中加入type=”module”属性<br>然而，不管是看评论还是自己亲身测试发现，然而并没有什么用处，依然会报错！！！</p><p>其实刚刚开头也说了在项目中使用较多，为什么在项目中可以正常使用呢？其实这里所说的意思是，默认你的项目配置了webpack包，然后在webpack配置文件中初始化配置一下：<code>module.exports = &#123; mode: &#39;development&#39; // mode 用来指定构建模式 &#125;</code>  然后是启动webpack项目打包，将原本的js文件改为dist目录下的main.js文件使用，这里就可以正常使用<code>exports&amp;import</code>方法！</p><p>这是在项目中使用，当然不会有什么问题，但有人说了我自己测试一些数据，或者自己学习练习，小demo中使用，难道还得打包……那岂不是大材小用，这里讲一下原生js、html的方法：在html的js中获取外部js中的多个变量值。<br>首先上代码：<br>HTML文件部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 引入定义数据的js文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./data.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// 直接使用js文件方法获取数据</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">var</span> dataList = dataList();</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">console</span>.log(dataList);</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>所引用的data.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dataList</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> uname = <span class="hljs-string">&#x27;Rain&#x27;</span>;<br><span class="hljs-keyword">var</span> uage = <span class="hljs-string">&#x27;18&#x27;</span>;<br><span class="hljs-keyword">var</span> year = <span class="hljs-string">&#x27;2021-04-22 09:30&#x27;</span>;<br><span class="hljs-keyword">var</span> hometown = <span class="hljs-string">&#x27;China&#x27;</span>;<br><span class="hljs-comment">// 这里可以return两种类型数据：对象  数组 （按需求）</span><br><span class="hljs-keyword">return</span> &#123; uname, uage, year, hometown &#125;;<br><span class="hljs-comment">// return [uname, uage, year, hometown];</span><br>&#125;<br></code></pre></td></tr></table></figure><p>展示下控制台分别打印的数据情况以及测试情况（大家见图即理解）<br>①返回数组<br><img src="https://img-blog.csdnimg.cn/20210422102329101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>②返回对象</p><p><img src="https://img-blog.csdnimg.cn/20210422102350124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图大家所见，可以对数据进行遍历等等等操作，方便大家测试，当然在正式项目中也可以使用呀，个人感觉不是特别麻烦，主要是不会报错啦！！！</p><p><strong>Ending：</strong> 坚持写下去，前端的魅力无法言说，努力做自己认为对的事！ </p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>HTML</tag>
      
      <tag>封装</tag>
      
      <tag>Import</tag>
      
      <tag>Script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不得不知道的事儿---前端Gojs之去除水印</title>
    <link href="/%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E5%84%BF---%E5%89%8D%E7%AB%AFGojs%E4%B9%8B%E5%8E%BB%E9%99%A4%E6%B0%B4%E5%8D%B0/"/>
    <url>/%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E5%84%BF---%E5%89%8D%E7%AB%AFGojs%E4%B9%8B%E5%8E%BB%E9%99%A4%E6%B0%B4%E5%8D%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>Code is never die !</strong><br>刚开始是这个样子的，带有水印，显得特别难看，太影响界面了吧 ！<img src="https://img-blog.csdnimg.cn/20210422215938389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开你项目引入的go.js文件，然后甭管其他的，直接<strong>ctrl+f</strong> 然后复制这段文字<code>5da73c80a36755dc038e4972187c3cae51fd22</code>，然后就能查找到图中所示位置了<br><img src="https://img-blog.csdnimg.cn/20210422220215420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时就是从b[c]开始的内容，一直到if(…)这里，全部注释掉！直接<strong>ctrl+s</strong>保存，本来将信将疑，然而奇迹般地就出现了下图：<br><img src="https://img-blog.csdnimg.cn/20210422220220523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 附记录：<br> 今天发现这个地方可能长得不太一样，不过影响不大，都差不多，而且效果都能显示出来（以下亲测）<br> <img src="https://img-blog.csdnimg.cn/202104241736355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTkxODY1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Ending…</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
      <tag>Gojs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用innerHTML向DOM元素中追加问题</title>
    <link href="/%E4%BD%BF%E7%94%A8innerHTML%E5%90%91DOM%E5%85%83%E7%B4%A0%E4%B8%AD%E8%BF%BD%E5%8A%A0%E9%97%AE%E9%A2%98/"/>
    <url>/%E4%BD%BF%E7%94%A8innerHTML%E5%90%91DOM%E5%85%83%E7%B4%A0%E4%B8%AD%E8%BF%BD%E5%8A%A0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>Header：</strong> 首创不易，还请大家不吝指导赐教，Code is never die！</p><p>ps:本着让更多人不止解决问题，更能够学到一点点方法的目的，内容有点赘述，还请耐心。</p><p>今天在修改项目时，偶然碰到了innerHTML部分知识的使用。<br><strong>直击问题：</strong><br>根据后台返回数据的个数循环动态添加dom元素，并且对dom元素进行相应的操作（例如：添加、编辑dom元素等）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; This.dataList.length; i++) &#123;<br>    <span class="hljs-comment">// 此处为每个div添加一个id（为简洁直接以i作为id）</span><br>dom.innerHTML += <span class="hljs-string">`&lt;div id=<span class="hljs-subst">$&#123;i&#125;</span> style=&quot;width:200px;height:200px;&quot;&gt;&lt;/div&gt;`</span>;<br><span class="hljs-keyword">let</span> domItem = <span class="hljs-built_in">document</span>.getElementById(i);<br><span class="hljs-comment">// 此处以添加一个echarts图表为例；</span><br>domItem.myChart = echarts.init(domItem);<br>......<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题阐述：</strong><br>这是一段很常规的代码，但是当真正渲染时会发现，当有两个（及以上）的数量时，最终只会展现最后一个可视化部分，而前面的部分dom元素也存在，但就是无法显示出来。</p><p><strong>初步想法：</strong><br>① 一开始更多的想的是可视化的数据出现了问题，用过echarts的朋友都知道，数据不准确会导致这种情况。在反复各种打印控制台log各种数据后发现，各类数据都一一打印出来。所以，数据部分导致的设想Pass掉了。<br>② 考虑的是初始化echarts时，也就是上面代码中的<code>domItem</code>，因为每次循环使用同一个变量，后面的可能会把前面的覆盖，导致前面可视化图形展示不出来。后面通过对象赋予不同变量<code>domItem[i]</code> 然而发现，并没有什么作用，原因猜测是当前面的可视化初始化–&gt;完成，已经完成了本轮图形化的构建，当第二次循环使用的话相当于用了一个“新”的变量，所以这个不是主要原因。所以，也Pass掉了。</p><p><strong>最终原因：</strong><br>后面瞪着代码看，然后瞪着代码看，然后再瞪着代码看，最终跟着循环走了第一圈，发现当第一次可视化完成之后，来到第二次可视化，关键来了！<code>dom.innerHTML +=...... </code>其实也就是<code>dom.innerHTML = dom.innerHTML +......</code> 这个过程，相当于前面我第一次完成的echarts构建，在这里就是<code>dom.innerHTML +</code> +号前面的部分，又重新绘制了一遍，那么问题就浮出了水面，会导致已经可视化完成的第一个图表，再进行第二轮可视化时发生了 <strong>重绘</strong> 整个dom元素，所以前面已然完成的可视化，又将被“打回原形”，变成了一个空壳子，而第二次的可视化正常，以此类推…所以最终只会显示最后一个可视化（真实创建并渲染完成显示）</p><p><strong>解决办法：</strong><br>① 针对上述这种需要进行操作的类型，既然会发生重绘，那我何不将计就计，等你各种重绘完成之后，我再去给你每个盒子进行操作呢。这就好比于下课的时候大家都在吵闹，你去制止A同学，A不说话了，当你再去制止B，会发现A继续和大家吵闹，而B不说了，往复循环，最后发现让他们吵闹去吧，一上课大家就立马安静了。这里的上课就类比于重绘完成，一切就绪，就可以一个一个的去批评啦，哈哈哈…..例子稍微一点点牵强，不过意思到了。<br>代码也非常简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//孩子创建过程，随便重绘</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; This.dataList.length; i++) &#123;<br>dom.innerHTML += <span class="hljs-string">`&lt;div id=<span class="hljs-subst">$&#123;i&#125;</span> style=&quot;width:200px;height:200px;&quot;&gt;&lt;/div&gt;`</span>;<br>&#125;<br><span class="hljs-comment">// 创建完成了，不会再重绘了..后续操作</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; This.dataList.length; i++) &#123;<br><span class="hljs-keyword">let</span> domItem = <span class="hljs-built_in">document</span>.getElementById(i);<br><span class="hljs-comment">// 此处以添加一个echarts图表为例；</span><br>domItem.myChart = echarts.init(domItem);<br>......<br>&#125;<br></code></pre></td></tr></table></figure><p>②当你需要循环添加的dom元素内容单一、固定格式的元素时，也可以选择appendChild来解决重绘问题。具体见代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 给body添加dom元素</span><br><span class="hljs-keyword">var</span> dom=<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;h1&#x27;</span>);<br>dom.className=<span class="hljs-string">&#x27;test&#x27;</span>;<br>dom.innerHTML=<span class="hljs-string">&#x27;Hello,Rain&#x27;</span>;<br><span class="hljs-built_in">document</span>.body.appendChild(dom);<br></code></pre></td></tr></table></figure><p>这样也避免了重绘问题。</p><p><strong>Ending…</strong><br>好啦，首创怀着激动的心啰里啰唆竟然码了2k，问题不是特别难理解，主要的是想要给大家分享拿到问题的整个流程和想法，如有个别地方表述不当或您有疑问，咱们讨论区相互学习哦，还望各位支持一下哦~</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
